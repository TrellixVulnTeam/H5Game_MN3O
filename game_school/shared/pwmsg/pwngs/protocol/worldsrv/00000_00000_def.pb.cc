// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pwngs/protocol/worldsrv/00000_00000_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pwngs {
namespace protocol {
namespace worldsrv {

namespace {

const ::google::protobuf::Descriptor* STencentUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STencentUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SMagicIntensify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMagicIntensify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SMagicType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMagicType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SAura_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SAura_reflection_ = NULL;
const ::google::protobuf::Descriptor* SMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemModAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemModAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemModTrig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemModTrig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCombatPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCombatPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemFashionParts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemFashionParts_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemWing_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemBless_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemBless_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemEquipRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemEquipRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemBloodGobm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemBloodGobm_reflection_ = NULL;
const ::google::protobuf::Descriptor* SEquipIndexGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SEquipIndexGem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemHPMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemHPMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItemPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItemPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRandomItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRandomItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto() {
  protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pwngs/protocol/worldsrv/00000_00000_def.proto");
  GOOGLE_CHECK(file != NULL);
  STencentUserInfo_descriptor_ = file->message_type(0);
  static const int STencentUserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_blue_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_blue_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_super_blue_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, blue_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, is_super_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, tgp_level_),
  };
  STencentUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STencentUserInfo_descriptor_,
      STencentUserInfo::default_instance_,
      STencentUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STencentUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STencentUserInfo));
  SMagicIntensify_descriptor_ = file->message_type(1);
  static const int SMagicIntensify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicIntensify, levelpencent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicIntensify, levelvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicIntensify, leveladdition_),
  };
  SMagicIntensify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMagicIntensify_descriptor_,
      SMagicIntensify::default_instance_,
      SMagicIntensify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicIntensify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicIntensify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMagicIntensify));
  SMagicType_descriptor_ = file->message_type(2);
  static const int SMagicType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, intensify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, combat_point_),
  };
  SMagicType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMagicType_descriptor_,
      SMagicType::default_instance_,
      SMagicType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMagicType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMagicType));
  SVector3_descriptor_ = file->message_type(3);
  static const int SVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVector3, z_),
  };
  SVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SVector3_descriptor_,
      SVector3::default_instance_,
      SVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SVector3));
  SAura_descriptor_ = file->message_type(4);
  static const int SAura_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, caster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, overlap_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, level_),
  };
  SAura_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SAura_descriptor_,
      SAura::default_instance_,
      SAura_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAura, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SAura));
  SMotion_descriptor_ = file->message_type(5);
  static const int SMotion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, motion_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, motion_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, motion_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, motion_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, motion_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, param_),
  };
  SMotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMotion_descriptor_,
      SMotion::default_instance_,
      SMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMotion));
  SStageInfo_descriptor_ = file->message_type(6);
  static const int SStageInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, scene_navmesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, scene_info_),
  };
  SStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SStageInfo_descriptor_,
      SStageInfo::default_instance_,
      SStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SStageInfo));
  SItemModAttr_descriptor_ = file->message_type(7);
  static const int SItemModAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModAttr, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModAttr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModAttr, value_),
  };
  SItemModAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemModAttr_descriptor_,
      SItemModAttr::default_instance_,
      SItemModAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemModAttr));
  SItemModTrig_descriptor_ = file->message_type(8);
  static const int SItemModTrig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModTrig, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModTrig, params_),
  };
  SItemModTrig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemModTrig_descriptor_,
      SItemModTrig::default_instance_,
      SItemModTrig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModTrig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemModTrig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemModTrig));
  SCombatPoint_descriptor_ = file->message_type(9);
  static const int SCombatPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCombatPoint, zs_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCombatPoint, gs_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCombatPoint, fs_point_),
  };
  SCombatPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCombatPoint_descriptor_,
      SCombatPoint::default_instance_,
      SCombatPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCombatPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCombatPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCombatPoint));
  SItemFashionParts_descriptor_ = file->message_type(10);
  static const int SItemFashionParts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemFashionParts, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemFashionParts, enhance_lv_),
  };
  SItemFashionParts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemFashionParts_descriptor_,
      SItemFashionParts::default_instance_,
      SItemFashionParts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemFashionParts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemFashionParts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemFashionParts));
  SItemWing_descriptor_ = file->message_type(11);
  static const int SItemWing_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, equip_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, luck_),
  };
  SItemWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemWing_descriptor_,
      SItemWing::default_instance_,
      SItemWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemWing));
  SItemEquip_descriptor_ = file->message_type(12);
  static const int SItemEquip_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, use_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, enchant_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, basics_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, extends_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, special_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, special_trig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, fashion_parts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, skill_id_),
  };
  SItemEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemEquip_descriptor_,
      SItemEquip::default_instance_,
      SItemEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemEquip));
  SItemRune_descriptor_ = file->message_type(13);
  static const int SItemRune_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemRune, exp_),
  };
  SItemRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemRune_descriptor_,
      SItemRune::default_instance_,
      SItemRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemRune));
  SItemBless_descriptor_ = file->message_type(14);
  static const int SItemBless_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBless, mod_attrs_),
  };
  SItemBless_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemBless_descriptor_,
      SItemBless::default_instance_,
      SItemBless_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBless, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBless, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemBless));
  SItemEgg_descriptor_ = file->message_type(15);
  static const int SItemEgg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, aptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, fire_dmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, cold_dmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, light_dmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, poison_dmg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, fire_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, cold_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, light_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, poison_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, grow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, grow_rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, con_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, con_rate_limit_),
  };
  SItemEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemEgg_descriptor_,
      SItemEgg::default_instance_,
      SItemEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemEgg));
  SItemEquipRune_descriptor_ = file->message_type(16);
  static const int SItemEquipRune_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquipRune, mod_attrs_),
  };
  SItemEquipRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemEquipRune_descriptor_,
      SItemEquipRune::default_instance_,
      SItemEquipRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquipRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemEquipRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemEquipRune));
  SItemBloodGobm_descriptor_ = file->message_type(17);
  static const int SItemBloodGobm_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, active_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, active_param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, active_param2_),
  };
  SItemBloodGobm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemBloodGobm_descriptor_,
      SItemBloodGobm::default_instance_,
      SItemBloodGobm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemBloodGobm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemBloodGobm));
  SEquipIndexGem_descriptor_ = file->message_type(18);
  static const int SEquipIndexGem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEquipIndexGem, equip_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEquipIndexGem, gems_),
  };
  SEquipIndexGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SEquipIndexGem_descriptor_,
      SEquipIndexGem::default_instance_,
      SEquipIndexGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEquipIndexGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEquipIndexGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SEquipIndexGem));
  SItemHPMP_descriptor_ = file->message_type(19);
  static const int SItemHPMP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemHPMP, used_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemHPMP, total_val_),
  };
  SItemHPMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemHPMP_descriptor_,
      SItemHPMP::default_instance_,
      SItemHPMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemHPMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemHPMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemHPMP));
  SItem_descriptor_ = file->message_type(20);
  static const int SItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, expired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, item_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, equip_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, bless_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, egg_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, gobm_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, combat_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, hpmp_attrs_),
  };
  SItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItem_descriptor_,
      SItem::default_instance_,
      SItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItem));
  SItemPrice_descriptor_ = file->message_type(21);
  static const int SItemPrice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemPrice, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemPrice, price_),
  };
  SItemPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItemPrice_descriptor_,
      SItemPrice::default_instance_,
      SItemPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItemPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItemPrice));
  SPackItem_descriptor_ = file->message_type(22);
  static const int SPackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPackItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPackItem, count_),
  };
  SPackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPackItem_descriptor_,
      SPackItem::default_instance_,
      SPackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPackItem));
  SRandomItem_descriptor_ = file->message_type(23);
  static const int SRandomItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandomItem, random_item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandomItem, pack_item_),
  };
  SRandomItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRandomItem_descriptor_,
      SRandomItem::default_instance_,
      SRandomItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandomItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRandomItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRandomItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STencentUserInfo_descriptor_, &STencentUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMagicIntensify_descriptor_, &SMagicIntensify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMagicType_descriptor_, &SMagicType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SVector3_descriptor_, &SVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SAura_descriptor_, &SAura::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMotion_descriptor_, &SMotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SStageInfo_descriptor_, &SStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemModAttr_descriptor_, &SItemModAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemModTrig_descriptor_, &SItemModTrig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCombatPoint_descriptor_, &SCombatPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemFashionParts_descriptor_, &SItemFashionParts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemWing_descriptor_, &SItemWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemEquip_descriptor_, &SItemEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemRune_descriptor_, &SItemRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemBless_descriptor_, &SItemBless::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemEgg_descriptor_, &SItemEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemEquipRune_descriptor_, &SItemEquipRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemBloodGobm_descriptor_, &SItemBloodGobm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SEquipIndexGem_descriptor_, &SEquipIndexGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemHPMP_descriptor_, &SItemHPMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItem_descriptor_, &SItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItemPrice_descriptor_, &SItemPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPackItem_descriptor_, &SPackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRandomItem_descriptor_, &SRandomItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto() {
  delete STencentUserInfo::default_instance_;
  delete STencentUserInfo_reflection_;
  delete SMagicIntensify::default_instance_;
  delete SMagicIntensify_reflection_;
  delete SMagicType::default_instance_;
  delete SMagicType_reflection_;
  delete SVector3::default_instance_;
  delete SVector3_reflection_;
  delete SAura::default_instance_;
  delete SAura_reflection_;
  delete SMotion::default_instance_;
  delete SMotion_reflection_;
  delete SStageInfo::default_instance_;
  delete SStageInfo_reflection_;
  delete SItemModAttr::default_instance_;
  delete SItemModAttr_reflection_;
  delete SItemModTrig::default_instance_;
  delete SItemModTrig_reflection_;
  delete SCombatPoint::default_instance_;
  delete SCombatPoint_reflection_;
  delete SItemFashionParts::default_instance_;
  delete SItemFashionParts_reflection_;
  delete SItemWing::default_instance_;
  delete SItemWing_reflection_;
  delete SItemEquip::default_instance_;
  delete SItemEquip_reflection_;
  delete SItemRune::default_instance_;
  delete SItemRune_reflection_;
  delete SItemBless::default_instance_;
  delete SItemBless_reflection_;
  delete SItemEgg::default_instance_;
  delete SItemEgg_reflection_;
  delete SItemEquipRune::default_instance_;
  delete SItemEquipRune_reflection_;
  delete SItemBloodGobm::default_instance_;
  delete SItemBloodGobm_reflection_;
  delete SEquipIndexGem::default_instance_;
  delete SEquipIndexGem_reflection_;
  delete SItemHPMP::default_instance_;
  delete SItemHPMP_reflection_;
  delete SItem::default_instance_;
  delete SItem_reflection_;
  delete SItemPrice::default_instance_;
  delete SItemPrice_reflection_;
  delete SPackItem::default_instance_;
  delete SPackItem_reflection_;
  delete SRandomItem::default_instance_;
  delete SRandomItem_reflection_;
}

void protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-pwngs/protocol/worldsrv/00000_00000_de"
    "f.proto\022\027pwngs.protocol.worldsrv\"\203\002\n\020STe"
    "ncentUserInfo\022\020\n\010platform\030\001 \002(\t\022\023\n\013is_bl"
    "ue_vip\030\002 \002(\010\022\030\n\020is_blue_year_vip\030\003 \002(\010\022\031"
    "\n\021is_super_blue_vip\030\004 \002(\010\022\026\n\016blue_vip_le"
    "vel\030\005 \002(\005\022\025\n\ris_yellow_vip\030\006 \002(\010\022\032\n\022is_y"
    "ellow_year_vip\030\007 \002(\010\022\033\n\023is_super_yellow_"
    "vip\030\010 \002(\010\022\030\n\020yellow_vip_level\030\t \002(\005\022\021\n\tt"
    "gp_level\030\n \002(\005\"R\n\017SMagicIntensify\022\024\n\014Lev"
    "elPencent\030\001 \002(\005\022\022\n\nLevelValue\030\002 \002(\005\022\025\n\rL"
    "evelAddition\030\003 \002(\005\"\250\001\n\nSMagicType\022\n\n\002id\030"
    "\001 \002(\005\022\013\n\003loc\030\002 \002(\005\022;\n\tintensify\030\003 \002(\0132(."
    "pwngs.protocol.worldsrv.SMagicIntensify\022"
    "\013\n\003exp\030\004 \002(\003\022\r\n\005level\030\005 \002(\005\022\022\n\nopen_leve"
    "l\030\006 \002(\005\022\024\n\014combat_point\030\007 \002(\003\"+\n\010SVector"
    "3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\205\001\n\005S"
    "Aura\022\n\n\002id\030\001 \002(\003\022\016\n\006caster\030\002 \002(\003\022\r\n\005owne"
    "r\030\003 \002(\003\022\014\n\004type\030\005 \002(\005\022\023\n\013overlap_num\030\006 \002"
    "(\005\022\020\n\010duration\030\007 \002(\003\022\r\n\005param\030\010 \002(\005\022\r\n\005l"
    "evel\030\t \002(\005\"\367\001\n\007SMotion\022\023\n\013motion_type\030\001 "
    "\002(\005\022\025\n\rmotion_target\030\002 \001(\003\022=\n\022motion_ori"
    "entation\030\003 \001(\0132!.pwngs.protocol.worldsrv"
    ".SVector3\022:\n\017motion_position\030\004 \001(\0132!.pwn"
    "gs.protocol.worldsrv.SVector3\0226\n\013motion_"
    "path\030\005 \003(\0132!.pwngs.protocol.worldsrv.SVe"
    "ctor3\022\r\n\005param\030\006 \001(\002\"R\n\nSStageInfo\022\n\n\002id"
    "\030\001 \002(\003\022\r\n\005scene\030\002 \002(\014\022\025\n\rscene_navmesh\030\003"
    " \002(\014\022\022\n\nscene_info\030\004 \002(\014\"8\n\014SItemModAttr"
    "\022\013\n\003mod\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005value\030\003 \002"
    "(\002\"+\n\014SItemModTrig\022\013\n\003mod\030\001 \002(\005\022\016\n\006param"
    "s\030\002 \003(\002\"D\n\014SCombatPoint\022\020\n\010zs_point\030\001 \002("
    "\002\022\020\n\010gs_point\030\002 \002(\002\022\020\n\010fs_point\030\003 \002(\002\"4\n"
    "\021SItemFashionParts\022\013\n\003idx\030\001 \002(\005\022\022\n\nenhan"
    "ce_lv\030\002 \002(\005\"e\n\tSItemWing\022\013\n\003exp\030\001 \002(\005\022\014\n"
    "\004star\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\014\n\004step\030\004 \002(\005"
    "\022\022\n\nequip_step\030\005 \002(\005\022\014\n\004luck\030\006 \002(\005\"\342\003\n\nS"
    "ItemEquip\022\r\n\005color\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022"
    "\021\n\tuse_level\030\003 \002(\005\022\022\n\nstar_level\030\004 \001(\005\022\025"
    "\n\renchant_level\030\005 \001(\005\022:\n\013basics_attr\030\006 \003"
    "(\0132%.pwngs.protocol.worldsrv.SItemModAtt"
    "r\022;\n\014extends_attr\030\007 \003(\0132%.pwngs.protocol"
    ".worldsrv.SItemModAttr\022;\n\014special_attr\030\010"
    " \001(\0132%.pwngs.protocol.worldsrv.SItemModA"
    "ttr\022;\n\014special_trig\030\t \001(\0132%.pwngs.protoc"
    "ol.worldsrv.SItemModTrig\022A\n\rfashion_part"
    "s\030\n \003(\0132*.pwngs.protocol.worldsrv.SItemF"
    "ashionParts\0220\n\004wing\030\013 \001(\0132\".pwngs.protoc"
    "ol.worldsrv.SItemWing\022\020\n\010skill_id\030\014 \001(\005\""
    "\030\n\tSItemRune\022\013\n\003exp\030\001 \002(\005\"F\n\nSItemBless\022"
    "8\n\tmod_attrs\030\001 \003(\0132%.pwngs.protocol.worl"
    "dsrv.SItemModAttr\"\210\002\n\010SItemEgg\022\020\n\010aptitu"
    "de\030\001 \002(\002\022\020\n\010fire_dmg\030\002 \002(\002\022\020\n\010cold_dmg\030\003"
    " \002(\002\022\021\n\tlight_dmg\030\004 \002(\002\022\022\n\npoison_dmg\030\005 "
    "\002(\002\022\020\n\010fire_res\030\006 \002(\002\022\020\n\010cold_res\030\007 \002(\002\022"
    "\021\n\tlight_res\030\010 \002(\002\022\022\n\npoison_res\030\t \002(\002\022\021"
    "\n\tgrow_rate\030\n \002(\002\022\027\n\017grow_rate_limit\030\013 \002"
    "(\002\022\020\n\010con_rate\030\014 \002(\002\022\026\n\016con_rate_limit\030\r"
    " \002(\002\"J\n\016SItemEquipRune\0228\n\tmod_attrs\030\001 \003("
    "\0132%.pwngs.protocol.worldsrv.SItemModAttr"
    "\"o\n\016SItemBloodGobm\022\r\n\005level\030\001 \002(\005\022\013\n\003exp"
    "\030\002 \002(\005\022\023\n\013active_type\030\003 \002(\005\022\025\n\ractive_pa"
    "ram1\030\004 \002(\005\022\025\n\ractive_param2\030\005 \002(\005\"S\n\016SEq"
    "uipIndexGem\022\023\n\013equip_index\030\001 \002(\005\022,\n\004gems"
    "\030\002 \003(\0132\036.pwngs.protocol.worldsrv.SItem\"0"
    "\n\tSItemHPMP\022\020\n\010used_val\030\001 \002(\005\022\021\n\ttotal_v"
    "al\030\002 \002(\005\"\202\004\n\005SItem\022\017\n\007item_id\030\001 \002(\003\022\021\n\ti"
    "tem_type\030\002 \002(\005\022\022\n\nitem_count\030\003 \002(\005\022\020\n\010it"
    "em_bag\030\004 \002(\005\022\025\n\ritem_position\030\005 \002(\005\022\022\n\ni"
    "tem_flags\030\006 \002(\003\022\024\n\014expired_time\030\007 \002(\003\022\022\n"
    "\nitem_price\030\010 \001(\003\0228\n\013equip_attrs\030\t \001(\0132#"
    ".pwngs.protocol.worldsrv.SItemEquip\0228\n\013b"
    "less_attrs\030\n \001(\0132#.pwngs.protocol.worlds"
    "rv.SItemBless\0224\n\tegg_attrs\030\013 \001(\0132!.pwngs"
    ".protocol.worldsrv.SItemEgg\022;\n\ngobm_attr"
    "s\030\014 \001(\0132\'.pwngs.protocol.worldsrv.SItemB"
    "loodGobm\022;\n\014combat_point\030\r \001(\0132%.pwngs.p"
    "rotocol.worldsrv.SCombatPoint\0226\n\nhpmp_at"
    "trs\030\016 \001(\0132\".pwngs.protocol.worldsrv.SIte"
    "mHPMP\"(\n\nSItemPrice\022\013\n\003tid\030\001 \002(\005\022\r\n\005pric"
    "e\030\002 \002(\005\"\'\n\tSPackItem\022\013\n\003tid\030\001 \002(\005\022\r\n\005cou"
    "nt\030\002 \002(\005\"^\n\013SRandomItem\022\030\n\020random_item_t"
    "ype\030\001 \002(\005\0225\n\tpack_item\030\002 \002(\0132\".pwngs.pro"
    "tocol.worldsrv.SPackItem", 3304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pwngs/protocol/worldsrv/00000_00000_def.proto", &protobuf_RegisterTypes);
  STencentUserInfo::default_instance_ = new STencentUserInfo();
  SMagicIntensify::default_instance_ = new SMagicIntensify();
  SMagicType::default_instance_ = new SMagicType();
  SVector3::default_instance_ = new SVector3();
  SAura::default_instance_ = new SAura();
  SMotion::default_instance_ = new SMotion();
  SStageInfo::default_instance_ = new SStageInfo();
  SItemModAttr::default_instance_ = new SItemModAttr();
  SItemModTrig::default_instance_ = new SItemModTrig();
  SCombatPoint::default_instance_ = new SCombatPoint();
  SItemFashionParts::default_instance_ = new SItemFashionParts();
  SItemWing::default_instance_ = new SItemWing();
  SItemEquip::default_instance_ = new SItemEquip();
  SItemRune::default_instance_ = new SItemRune();
  SItemBless::default_instance_ = new SItemBless();
  SItemEgg::default_instance_ = new SItemEgg();
  SItemEquipRune::default_instance_ = new SItemEquipRune();
  SItemBloodGobm::default_instance_ = new SItemBloodGobm();
  SEquipIndexGem::default_instance_ = new SEquipIndexGem();
  SItemHPMP::default_instance_ = new SItemHPMP();
  SItem::default_instance_ = new SItem();
  SItemPrice::default_instance_ = new SItemPrice();
  SPackItem::default_instance_ = new SPackItem();
  SRandomItem::default_instance_ = new SRandomItem();
  STencentUserInfo::default_instance_->InitAsDefaultInstance();
  SMagicIntensify::default_instance_->InitAsDefaultInstance();
  SMagicType::default_instance_->InitAsDefaultInstance();
  SVector3::default_instance_->InitAsDefaultInstance();
  SAura::default_instance_->InitAsDefaultInstance();
  SMotion::default_instance_->InitAsDefaultInstance();
  SStageInfo::default_instance_->InitAsDefaultInstance();
  SItemModAttr::default_instance_->InitAsDefaultInstance();
  SItemModTrig::default_instance_->InitAsDefaultInstance();
  SCombatPoint::default_instance_->InitAsDefaultInstance();
  SItemFashionParts::default_instance_->InitAsDefaultInstance();
  SItemWing::default_instance_->InitAsDefaultInstance();
  SItemEquip::default_instance_->InitAsDefaultInstance();
  SItemRune::default_instance_->InitAsDefaultInstance();
  SItemBless::default_instance_->InitAsDefaultInstance();
  SItemEgg::default_instance_->InitAsDefaultInstance();
  SItemEquipRune::default_instance_->InitAsDefaultInstance();
  SItemBloodGobm::default_instance_->InitAsDefaultInstance();
  SEquipIndexGem::default_instance_->InitAsDefaultInstance();
  SItemHPMP::default_instance_->InitAsDefaultInstance();
  SItem::default_instance_->InitAsDefaultInstance();
  SItemPrice::default_instance_->InitAsDefaultInstance();
  SPackItem::default_instance_->InitAsDefaultInstance();
  SRandomItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto {
  StaticDescriptorInitializer_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto() {
    protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();
  }
} static_descriptor_initializer_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int STencentUserInfo::kPlatformFieldNumber;
const int STencentUserInfo::kIsBlueVipFieldNumber;
const int STencentUserInfo::kIsBlueYearVipFieldNumber;
const int STencentUserInfo::kIsSuperBlueVipFieldNumber;
const int STencentUserInfo::kBlueVipLevelFieldNumber;
const int STencentUserInfo::kIsYellowVipFieldNumber;
const int STencentUserInfo::kIsYellowYearVipFieldNumber;
const int STencentUserInfo::kIsSuperYellowVipFieldNumber;
const int STencentUserInfo::kYellowVipLevelFieldNumber;
const int STencentUserInfo::kTgpLevelFieldNumber;
#endif  // !_MSC_VER

STencentUserInfo::STencentUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STencentUserInfo::InitAsDefaultInstance() {
}

STencentUserInfo::STencentUserInfo(const STencentUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STencentUserInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_blue_vip_ = false;
  is_blue_year_vip_ = false;
  is_super_blue_vip_ = false;
  blue_vip_level_ = 0;
  is_yellow_vip_ = false;
  is_yellow_year_vip_ = false;
  is_super_yellow_vip_ = false;
  yellow_vip_level_ = 0;
  tgp_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STencentUserInfo::~STencentUserInfo() {
  SharedDtor();
}

void STencentUserInfo::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void STencentUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STencentUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STencentUserInfo_descriptor_;
}

const STencentUserInfo& STencentUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

STencentUserInfo* STencentUserInfo::default_instance_ = NULL;

STencentUserInfo* STencentUserInfo::New() const {
  return new STencentUserInfo;
}

void STencentUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    is_blue_vip_ = false;
    is_blue_year_vip_ = false;
    is_super_blue_vip_ = false;
    blue_vip_level_ = 0;
    is_yellow_vip_ = false;
    is_yellow_year_vip_ = false;
    is_super_yellow_vip_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yellow_vip_level_ = 0;
    tgp_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STencentUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          platform_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_blue_vip;
        break;
      }
      
      // required bool is_blue_vip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_blue_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blue_vip_)));
          set_has_is_blue_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_blue_year_vip;
        break;
      }
      
      // required bool is_blue_year_vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_blue_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blue_year_vip_)));
          set_has_is_blue_year_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_super_blue_vip;
        break;
      }
      
      // required bool is_super_blue_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_super_blue_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_super_blue_vip_)));
          set_has_is_super_blue_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blue_vip_level;
        break;
      }
      
      // required int32 blue_vip_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_vip_level_)));
          set_has_blue_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_yellow_vip;
        break;
      }
      
      // required bool is_yellow_vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_yellow_year_vip;
        break;
      }
      
      // required bool is_yellow_year_vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_super_yellow_vip;
        break;
      }
      
      // required bool is_super_yellow_vip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_super_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_super_yellow_vip_)));
          set_has_is_super_yellow_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_yellow_vip_level;
        break;
      }
      
      // required int32 yellow_vip_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tgp_level;
        break;
      }
      
      // required int32 tgp_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tgp_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgp_level_)));
          set_has_tgp_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STencentUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string platform = 1;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required bool is_blue_vip = 2;
  if (has_is_blue_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_blue_vip(), output);
  }
  
  // required bool is_blue_year_vip = 3;
  if (has_is_blue_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_blue_year_vip(), output);
  }
  
  // required bool is_super_blue_vip = 4;
  if (has_is_super_blue_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_super_blue_vip(), output);
  }
  
  // required int32 blue_vip_level = 5;
  if (has_blue_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->blue_vip_level(), output);
  }
  
  // required bool is_yellow_vip = 6;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_yellow_vip(), output);
  }
  
  // required bool is_yellow_year_vip = 7;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_yellow_year_vip(), output);
  }
  
  // required bool is_super_yellow_vip = 8;
  if (has_is_super_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_super_yellow_vip(), output);
  }
  
  // required int32 yellow_vip_level = 9;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yellow_vip_level(), output);
  }
  
  // required int32 tgp_level = 10;
  if (has_tgp_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tgp_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STencentUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string platform = 1;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required bool is_blue_vip = 2;
  if (has_is_blue_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_blue_vip(), target);
  }
  
  // required bool is_blue_year_vip = 3;
  if (has_is_blue_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_blue_year_vip(), target);
  }
  
  // required bool is_super_blue_vip = 4;
  if (has_is_super_blue_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_super_blue_vip(), target);
  }
  
  // required int32 blue_vip_level = 5;
  if (has_blue_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->blue_vip_level(), target);
  }
  
  // required bool is_yellow_vip = 6;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_yellow_vip(), target);
  }
  
  // required bool is_yellow_year_vip = 7;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_yellow_year_vip(), target);
  }
  
  // required bool is_super_yellow_vip = 8;
  if (has_is_super_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_super_yellow_vip(), target);
  }
  
  // required int32 yellow_vip_level = 9;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yellow_vip_level(), target);
  }
  
  // required int32 tgp_level = 10;
  if (has_tgp_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tgp_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STencentUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string platform = 1;
    if (has_platform()) {
      std::string platform_tmp = pwutils::utf8_from_mbs(platform());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          platform_tmp);
    }
    
    // required bool is_blue_vip = 2;
    if (has_is_blue_vip()) {
      total_size += 1 + 1;
    }
    
    // required bool is_blue_year_vip = 3;
    if (has_is_blue_year_vip()) {
      total_size += 1 + 1;
    }
    
    // required bool is_super_blue_vip = 4;
    if (has_is_super_blue_vip()) {
      total_size += 1 + 1;
    }
    
    // required int32 blue_vip_level = 5;
    if (has_blue_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_vip_level());
    }
    
    // required bool is_yellow_vip = 6;
    if (has_is_yellow_vip()) {
      total_size += 1 + 1;
    }
    
    // required bool is_yellow_year_vip = 7;
    if (has_is_yellow_year_vip()) {
      total_size += 1 + 1;
    }
    
    // required bool is_super_yellow_vip = 8;
    if (has_is_super_yellow_vip()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 yellow_vip_level = 9;
    if (has_yellow_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_vip_level());
    }
    
    // required int32 tgp_level = 10;
    if (has_tgp_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tgp_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STencentUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STencentUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STencentUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STencentUserInfo::MergeFrom(const STencentUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_is_blue_vip()) {
      set_is_blue_vip(from.is_blue_vip());
    }
    if (from.has_is_blue_year_vip()) {
      set_is_blue_year_vip(from.is_blue_year_vip());
    }
    if (from.has_is_super_blue_vip()) {
      set_is_super_blue_vip(from.is_super_blue_vip());
    }
    if (from.has_blue_vip_level()) {
      set_blue_vip_level(from.blue_vip_level());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_is_super_yellow_vip()) {
      set_is_super_yellow_vip(from.is_super_yellow_vip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_tgp_level()) {
      set_tgp_level(from.tgp_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STencentUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STencentUserInfo::CopyFrom(const STencentUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STencentUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void STencentUserInfo::Swap(STencentUserInfo* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(is_blue_vip_, other->is_blue_vip_);
    std::swap(is_blue_year_vip_, other->is_blue_year_vip_);
    std::swap(is_super_blue_vip_, other->is_super_blue_vip_);
    std::swap(blue_vip_level_, other->blue_vip_level_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(is_super_yellow_vip_, other->is_super_yellow_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(tgp_level_, other->tgp_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STencentUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STencentUserInfo_descriptor_;
  metadata.reflection = STencentUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMagicIntensify::kLevelPencentFieldNumber;
const int SMagicIntensify::kLevelValueFieldNumber;
const int SMagicIntensify::kLevelAdditionFieldNumber;
#endif  // !_MSC_VER

SMagicIntensify::SMagicIntensify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMagicIntensify::InitAsDefaultInstance() {
}

SMagicIntensify::SMagicIntensify(const SMagicIntensify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMagicIntensify::SharedCtor() {
  _cached_size_ = 0;
  levelpencent_ = 0;
  levelvalue_ = 0;
  leveladdition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMagicIntensify::~SMagicIntensify() {
  SharedDtor();
}

void SMagicIntensify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SMagicIntensify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMagicIntensify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMagicIntensify_descriptor_;
}

const SMagicIntensify& SMagicIntensify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SMagicIntensify* SMagicIntensify::default_instance_ = NULL;

SMagicIntensify* SMagicIntensify::New() const {
  return new SMagicIntensify;
}

void SMagicIntensify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelpencent_ = 0;
    levelvalue_ = 0;
    leveladdition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMagicIntensify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LevelPencent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelpencent_)));
          set_has_levelpencent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LevelValue;
        break;
      }
      
      // required int32 LevelValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LevelValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelvalue_)));
          set_has_levelvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LevelAddition;
        break;
      }
      
      // required int32 LevelAddition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LevelAddition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leveladdition_)));
          set_has_leveladdition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMagicIntensify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 LevelPencent = 1;
  if (has_levelpencent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelpencent(), output);
  }
  
  // required int32 LevelValue = 2;
  if (has_levelvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levelvalue(), output);
  }
  
  // required int32 LevelAddition = 3;
  if (has_leveladdition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leveladdition(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMagicIntensify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 LevelPencent = 1;
  if (has_levelpencent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelpencent(), target);
  }
  
  // required int32 LevelValue = 2;
  if (has_levelvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levelvalue(), target);
  }
  
  // required int32 LevelAddition = 3;
  if (has_leveladdition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leveladdition(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMagicIntensify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 LevelPencent = 1;
    if (has_levelpencent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelpencent());
    }
    
    // required int32 LevelValue = 2;
    if (has_levelvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelvalue());
    }
    
    // required int32 LevelAddition = 3;
    if (has_leveladdition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leveladdition());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMagicIntensify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMagicIntensify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMagicIntensify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMagicIntensify::MergeFrom(const SMagicIntensify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelpencent()) {
      set_levelpencent(from.levelpencent());
    }
    if (from.has_levelvalue()) {
      set_levelvalue(from.levelvalue());
    }
    if (from.has_leveladdition()) {
      set_leveladdition(from.leveladdition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMagicIntensify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMagicIntensify::CopyFrom(const SMagicIntensify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMagicIntensify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SMagicIntensify::Swap(SMagicIntensify* other) {
  if (other != this) {
    std::swap(levelpencent_, other->levelpencent_);
    std::swap(levelvalue_, other->levelvalue_);
    std::swap(leveladdition_, other->leveladdition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMagicIntensify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMagicIntensify_descriptor_;
  metadata.reflection = SMagicIntensify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMagicType::kIdFieldNumber;
const int SMagicType::kLocFieldNumber;
const int SMagicType::kIntensifyFieldNumber;
const int SMagicType::kExpFieldNumber;
const int SMagicType::kLevelFieldNumber;
const int SMagicType::kOpenLevelFieldNumber;
const int SMagicType::kCombatPointFieldNumber;
#endif  // !_MSC_VER

SMagicType::SMagicType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMagicType::InitAsDefaultInstance() {
  intensify_ = const_cast< ::pwngs::protocol::worldsrv::SMagicIntensify*>(&::pwngs::protocol::worldsrv::SMagicIntensify::default_instance());
}

SMagicType::SMagicType(const SMagicType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMagicType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  loc_ = 0;
  intensify_ = NULL;
  exp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  open_level_ = 0;
  combat_point_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMagicType::~SMagicType() {
  SharedDtor();
}

void SMagicType::SharedDtor() {
  if (this != default_instance_) {
    delete intensify_;
  }
}

void SMagicType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMagicType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMagicType_descriptor_;
}

const SMagicType& SMagicType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SMagicType* SMagicType::default_instance_ = NULL;

SMagicType* SMagicType::New() const {
  return new SMagicType;
}

void SMagicType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    loc_ = 0;
    if (has_intensify()) {
      if (intensify_ != NULL) intensify_->::pwngs::protocol::worldsrv::SMagicIntensify::Clear();
    }
    exp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    open_level_ = 0;
    combat_point_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMagicType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loc;
        break;
      }
      
      // required int32 loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loc_)));
          set_has_loc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_intensify;
        break;
      }
      
      // required .pwngs.protocol.worldsrv.SMagicIntensify intensify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intensify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intensify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // required int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_level;
        break;
      }
      
      // required int32 open_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_combat_point;
        break;
      }
      
      // required int64 combat_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &combat_point_)));
          set_has_combat_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMagicType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 loc = 2;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loc(), output);
  }
  
  // required .pwngs.protocol.worldsrv.SMagicIntensify intensify = 3;
  if (has_intensify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intensify(), output);
  }
  
  // required int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }
  
  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // required int32 open_level = 6;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->open_level(), output);
  }
  
  // required int64 combat_point = 7;
  if (has_combat_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->combat_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMagicType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 loc = 2;
  if (has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loc(), target);
  }
  
  // required .pwngs.protocol.worldsrv.SMagicIntensify intensify = 3;
  if (has_intensify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->intensify(), target);
  }
  
  // required int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }
  
  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // required int32 open_level = 6;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->open_level(), target);
  }
  
  // required int64 combat_point = 7;
  if (has_combat_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->combat_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMagicType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 loc = 2;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loc());
    }
    
    // required .pwngs.protocol.worldsrv.SMagicIntensify intensify = 3;
    if (has_intensify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intensify());
    }
    
    // required int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 open_level = 6;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }
    
    // required int64 combat_point = 7;
    if (has_combat_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->combat_point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMagicType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMagicType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMagicType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMagicType::MergeFrom(const SMagicType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_loc()) {
      set_loc(from.loc());
    }
    if (from.has_intensify()) {
      mutable_intensify()->::pwngs::protocol::worldsrv::SMagicIntensify::MergeFrom(from.intensify());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_combat_point()) {
      set_combat_point(from.combat_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMagicType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMagicType::CopyFrom(const SMagicType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMagicType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_intensify()) {
    if (!this->intensify().IsInitialized()) return false;
  }
  return true;
}

void SMagicType::Swap(SMagicType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(loc_, other->loc_);
    std::swap(intensify_, other->intensify_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(open_level_, other->open_level_);
    std::swap(combat_point_, other->combat_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMagicType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMagicType_descriptor_;
  metadata.reflection = SMagicType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SVector3::kXFieldNumber;
const int SVector3::kYFieldNumber;
const int SVector3::kZFieldNumber;
#endif  // !_MSC_VER

SVector3::SVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SVector3::InitAsDefaultInstance() {
}

SVector3::SVector3(const SVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SVector3::~SVector3() {
  SharedDtor();
}

void SVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SVector3_descriptor_;
}

const SVector3& SVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SVector3* SVector3::default_instance_ = NULL;

SVector3* SVector3::New() const {
  return new SVector3;
}

void SVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SVector3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SVector3::MergeFrom(const SVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVector3::CopyFrom(const SVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SVector3::Swap(SVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SVector3_descriptor_;
  metadata.reflection = SVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SAura::kIdFieldNumber;
const int SAura::kCasterFieldNumber;
const int SAura::kOwnerFieldNumber;
const int SAura::kTypeFieldNumber;
const int SAura::kOverlapNumFieldNumber;
const int SAura::kDurationFieldNumber;
const int SAura::kParamFieldNumber;
const int SAura::kLevelFieldNumber;
#endif  // !_MSC_VER

SAura::SAura()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SAura::InitAsDefaultInstance() {
}

SAura::SAura(const SAura& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SAura::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  caster_ = GOOGLE_LONGLONG(0);
  owner_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  overlap_num_ = 0;
  duration_ = GOOGLE_LONGLONG(0);
  param_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SAura::~SAura() {
  SharedDtor();
}

void SAura::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SAura::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SAura::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SAura_descriptor_;
}

const SAura& SAura::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SAura* SAura::default_instance_ = NULL;

SAura* SAura::New() const {
  return new SAura;
}

void SAura::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    caster_ = GOOGLE_LONGLONG(0);
    owner_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    overlap_num_ = 0;
    duration_ = GOOGLE_LONGLONG(0);
    param_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SAura::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_caster;
        break;
      }
      
      // required int64 caster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caster_)));
          set_has_caster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }
      
      // required int64 owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_overlap_num;
        break;
      }
      
      // required int32 overlap_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlap_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlap_num_)));
          set_has_overlap_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duration;
        break;
      }
      
      // required int64 duration = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_param;
        break;
      }
      
      // required int32 param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }
      
      // required int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SAura::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int64 caster = 2;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->caster(), output);
  }
  
  // required int64 owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->owner(), output);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // required int32 overlap_num = 6;
  if (has_overlap_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->overlap_num(), output);
  }
  
  // required int64 duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->duration(), output);
  }
  
  // required int32 param = 8;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->param(), output);
  }
  
  // required int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SAura::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int64 caster = 2;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->caster(), target);
  }
  
  // required int64 owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->owner(), target);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // required int32 overlap_num = 6;
  if (has_overlap_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overlap_num(), target);
  }
  
  // required int64 duration = 7;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->duration(), target);
  }
  
  // required int32 param = 8;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->param(), target);
  }
  
  // required int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SAura::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int64 caster = 2;
    if (has_caster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->caster());
    }
    
    // required int64 owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner());
    }
    
    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 overlap_num = 6;
    if (has_overlap_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlap_num());
    }
    
    // required int64 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }
    
    // required int32 param = 8;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
    // required int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SAura::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SAura* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SAura*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SAura::MergeFrom(const SAura& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_caster()) {
      set_caster(from.caster());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_overlap_num()) {
      set_overlap_num(from.overlap_num());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SAura::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAura::CopyFrom(const SAura& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAura::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void SAura::Swap(SAura* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(caster_, other->caster_);
    std::swap(owner_, other->owner_);
    std::swap(type_, other->type_);
    std::swap(overlap_num_, other->overlap_num_);
    std::swap(duration_, other->duration_);
    std::swap(param_, other->param_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SAura::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SAura_descriptor_;
  metadata.reflection = SAura_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMotion::kMotionTypeFieldNumber;
const int SMotion::kMotionTargetFieldNumber;
const int SMotion::kMotionOrientationFieldNumber;
const int SMotion::kMotionPositionFieldNumber;
const int SMotion::kMotionPathFieldNumber;
const int SMotion::kParamFieldNumber;
#endif  // !_MSC_VER

SMotion::SMotion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMotion::InitAsDefaultInstance() {
  motion_orientation_ = const_cast< ::pwngs::protocol::worldsrv::SVector3*>(&::pwngs::protocol::worldsrv::SVector3::default_instance());
  motion_position_ = const_cast< ::pwngs::protocol::worldsrv::SVector3*>(&::pwngs::protocol::worldsrv::SVector3::default_instance());
}

SMotion::SMotion(const SMotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMotion::SharedCtor() {
  _cached_size_ = 0;
  motion_type_ = 0;
  motion_target_ = GOOGLE_LONGLONG(0);
  motion_orientation_ = NULL;
  motion_position_ = NULL;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMotion::~SMotion() {
  SharedDtor();
}

void SMotion::SharedDtor() {
  if (this != default_instance_) {
    delete motion_orientation_;
    delete motion_position_;
  }
}

void SMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMotion_descriptor_;
}

const SMotion& SMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SMotion* SMotion::default_instance_ = NULL;

SMotion* SMotion::New() const {
  return new SMotion;
}

void SMotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motion_type_ = 0;
    motion_target_ = GOOGLE_LONGLONG(0);
    if (has_motion_orientation()) {
      if (motion_orientation_ != NULL) motion_orientation_->::pwngs::protocol::worldsrv::SVector3::Clear();
    }
    if (has_motion_position()) {
      if (motion_position_ != NULL) motion_position_->::pwngs::protocol::worldsrv::SVector3::Clear();
    }
    param_ = 0;
  }
  motion_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 motion_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motion_type_)));
          set_has_motion_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_motion_target;
        break;
      }
      
      // optional int64 motion_target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motion_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &motion_target_)));
          set_has_motion_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_motion_orientation;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SVector3 motion_orientation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_motion_position;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SVector3 motion_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motion_path;
        break;
      }
      
      // repeated .pwngs.protocol.worldsrv.SVector3 motion_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motion_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motion_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motion_path;
        if (input->ExpectTag(53)) goto parse_param;
        break;
      }
      
      // optional float param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 motion_type = 1;
  if (has_motion_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motion_type(), output);
  }
  
  // optional int64 motion_target = 2;
  if (has_motion_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->motion_target(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SVector3 motion_orientation = 3;
  if (has_motion_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->motion_orientation(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SVector3 motion_position = 4;
  if (has_motion_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->motion_position(), output);
  }
  
  // repeated .pwngs.protocol.worldsrv.SVector3 motion_path = 5;
  for (int i = 0; i < this->motion_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motion_path(i), output);
  }
  
  // optional float param = 6;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 motion_type = 1;
  if (has_motion_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motion_type(), target);
  }
  
  // optional int64 motion_target = 2;
  if (has_motion_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->motion_target(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SVector3 motion_orientation = 3;
  if (has_motion_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->motion_orientation(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SVector3 motion_position = 4;
  if (has_motion_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->motion_position(), target);
  }
  
  // repeated .pwngs.protocol.worldsrv.SVector3 motion_path = 5;
  for (int i = 0; i < this->motion_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motion_path(i), target);
  }
  
  // optional float param = 6;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMotion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 motion_type = 1;
    if (has_motion_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motion_type());
    }
    
    // optional int64 motion_target = 2;
    if (has_motion_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->motion_target());
    }
    
    // optional .pwngs.protocol.worldsrv.SVector3 motion_orientation = 3;
    if (has_motion_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_orientation());
    }
    
    // optional .pwngs.protocol.worldsrv.SVector3 motion_position = 4;
    if (has_motion_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_position());
    }
    
    // optional float param = 6;
    if (has_param()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .pwngs.protocol.worldsrv.SVector3 motion_path = 5;
  total_size += 1 * this->motion_path_size();
  for (int i = 0; i < this->motion_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motion_path(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMotion::MergeFrom(const SMotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  motion_path_.MergeFrom(from.motion_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motion_type()) {
      set_motion_type(from.motion_type());
    }
    if (from.has_motion_target()) {
      set_motion_target(from.motion_target());
    }
    if (from.has_motion_orientation()) {
      mutable_motion_orientation()->::pwngs::protocol::worldsrv::SVector3::MergeFrom(from.motion_orientation());
    }
    if (from.has_motion_position()) {
      mutable_motion_position()->::pwngs::protocol::worldsrv::SVector3::MergeFrom(from.motion_position());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMotion::CopyFrom(const SMotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_motion_orientation()) {
    if (!this->motion_orientation().IsInitialized()) return false;
  }
  if (has_motion_position()) {
    if (!this->motion_position().IsInitialized()) return false;
  }
  for (int i = 0; i < motion_path_size(); i++) {
    if (!this->motion_path(i).IsInitialized()) return false;
  }
  return true;
}

void SMotion::Swap(SMotion* other) {
  if (other != this) {
    std::swap(motion_type_, other->motion_type_);
    std::swap(motion_target_, other->motion_target_);
    std::swap(motion_orientation_, other->motion_orientation_);
    std::swap(motion_position_, other->motion_position_);
    motion_path_.Swap(&other->motion_path_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMotion_descriptor_;
  metadata.reflection = SMotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SStageInfo::kIdFieldNumber;
const int SStageInfo::kSceneFieldNumber;
const int SStageInfo::kSceneNavmeshFieldNumber;
const int SStageInfo::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

SStageInfo::SStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SStageInfo::InitAsDefaultInstance() {
}

SStageInfo::SStageInfo(const SStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SStageInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_navmesh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SStageInfo::~SStageInfo() {
  SharedDtor();
}

void SStageInfo::SharedDtor() {
  if (scene_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_;
  }
  if (scene_navmesh_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_navmesh_;
  }
  if (scene_info_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_info_;
  }
  if (this != default_instance_) {
  }
}

void SStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SStageInfo_descriptor_;
}

const SStageInfo& SStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SStageInfo* SStageInfo::default_instance_ = NULL;

SStageInfo* SStageInfo::New() const {
  return new SStageInfo;
}

void SStageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_scene()) {
      if (scene_ != &::google::protobuf::internal::kEmptyString) {
        scene_->clear();
      }
    }
    if (has_scene_navmesh()) {
      if (scene_navmesh_ != &::google::protobuf::internal::kEmptyString) {
        scene_navmesh_->clear();
      }
    }
    if (has_scene_info()) {
      if (scene_info_ != &::google::protobuf::internal::kEmptyString) {
        scene_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene;
        break;
      }
      
      // required bytes scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scene()));
          scene_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scene_navmesh;
        break;
      }
      
      // required bytes scene_navmesh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_navmesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scene_navmesh()));
          scene_navmesh_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scene_info;
        break;
      }
      
      // required bytes scene_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scene_info()));
          scene_info_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required bytes scene = 2;
  if (has_scene()) {
    std::string tmp = pwutils::utf8_from_mbs(scene());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  // required bytes scene_navmesh = 3;
  if (has_scene_navmesh()) {
    std::string tmp = pwutils::utf8_from_mbs(scene_navmesh());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, tmp, output);
  }
  
  // required bytes scene_info = 4;
  if (has_scene_info()) {
    std::string tmp = pwutils::utf8_from_mbs(scene_info());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required bytes scene = 2;
  if (has_scene()) {
    std::string tmp = pwutils::utf8_from_mbs(scene());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  // required bytes scene_navmesh = 3;
  if (has_scene_navmesh()) {
    std::string tmp = pwutils::utf8_from_mbs(scene_navmesh());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, tmp, target);
  }
  
  // required bytes scene_info = 4;
  if (has_scene_info()) {
    std::string tmp = pwutils::utf8_from_mbs(scene_info());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SStageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required bytes scene = 2;
    if (has_scene()) {
      std::string scene_tmp = pwutils::utf8_from_mbs(scene());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          scene_tmp);
    }
    
    // required bytes scene_navmesh = 3;
    if (has_scene_navmesh()) {
      std::string scene_navmesh_tmp = pwutils::utf8_from_mbs(scene_navmesh());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          scene_navmesh_tmp);
    }
    
    // required bytes scene_info = 4;
    if (has_scene_info()) {
      std::string scene_info_tmp = pwutils::utf8_from_mbs(scene_info());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          scene_info_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SStageInfo::MergeFrom(const SStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_scene_navmesh()) {
      set_scene_navmesh(from.scene_navmesh());
    }
    if (from.has_scene_info()) {
      set_scene_info(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStageInfo::CopyFrom(const SStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SStageInfo::Swap(SStageInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scene_, other->scene_);
    std::swap(scene_navmesh_, other->scene_navmesh_);
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SStageInfo_descriptor_;
  metadata.reflection = SStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemModAttr::kModFieldNumber;
const int SItemModAttr::kTypeFieldNumber;
const int SItemModAttr::kValueFieldNumber;
#endif  // !_MSC_VER

SItemModAttr::SItemModAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemModAttr::InitAsDefaultInstance() {
}

SItemModAttr::SItemModAttr(const SItemModAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemModAttr::SharedCtor() {
  _cached_size_ = 0;
  mod_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemModAttr::~SItemModAttr() {
  SharedDtor();
}

void SItemModAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemModAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemModAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemModAttr_descriptor_;
}

const SItemModAttr& SItemModAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemModAttr* SItemModAttr::default_instance_ = NULL;

SItemModAttr* SItemModAttr::New() const {
  return new SItemModAttr;
}

void SItemModAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mod_ = 0;
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemModAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mod_)));
          set_has_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }
      
      // required float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemModAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mod = 1;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mod(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemModAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mod = 1;
  if (has_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mod(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemModAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mod = 1;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mod());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemModAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemModAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemModAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemModAttr::MergeFrom(const SItemModAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mod()) {
      set_mod(from.mod());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemModAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemModAttr::CopyFrom(const SItemModAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemModAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SItemModAttr::Swap(SItemModAttr* other) {
  if (other != this) {
    std::swap(mod_, other->mod_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemModAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemModAttr_descriptor_;
  metadata.reflection = SItemModAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemModTrig::kModFieldNumber;
const int SItemModTrig::kParamsFieldNumber;
#endif  // !_MSC_VER

SItemModTrig::SItemModTrig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemModTrig::InitAsDefaultInstance() {
}

SItemModTrig::SItemModTrig(const SItemModTrig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemModTrig::SharedCtor() {
  _cached_size_ = 0;
  mod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemModTrig::~SItemModTrig() {
  SharedDtor();
}

void SItemModTrig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemModTrig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemModTrig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemModTrig_descriptor_;
}

const SItemModTrig& SItemModTrig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemModTrig* SItemModTrig::default_instance_ = NULL;

SItemModTrig* SItemModTrig::New() const {
  return new SItemModTrig;
}

void SItemModTrig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mod_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemModTrig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mod_)));
          set_has_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_params;
        break;
      }
      
      // repeated float params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemModTrig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mod = 1;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mod(), output);
  }
  
  // repeated float params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemModTrig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mod = 1;
  if (has_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mod(), target);
  }
  
  // repeated float params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemModTrig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mod = 1;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mod());
    }
    
  }
  // repeated float params = 2;
  {
    int data_size = 0;
    data_size = 4 * this->params_size();
    total_size += 1 * this->params_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemModTrig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemModTrig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemModTrig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemModTrig::MergeFrom(const SItemModTrig& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mod()) {
      set_mod(from.mod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemModTrig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemModTrig::CopyFrom(const SItemModTrig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemModTrig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SItemModTrig::Swap(SItemModTrig* other) {
  if (other != this) {
    std::swap(mod_, other->mod_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemModTrig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemModTrig_descriptor_;
  metadata.reflection = SItemModTrig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCombatPoint::kZsPointFieldNumber;
const int SCombatPoint::kGsPointFieldNumber;
const int SCombatPoint::kFsPointFieldNumber;
#endif  // !_MSC_VER

SCombatPoint::SCombatPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCombatPoint::InitAsDefaultInstance() {
}

SCombatPoint::SCombatPoint(const SCombatPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCombatPoint::SharedCtor() {
  _cached_size_ = 0;
  zs_point_ = 0;
  gs_point_ = 0;
  fs_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCombatPoint::~SCombatPoint() {
  SharedDtor();
}

void SCombatPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCombatPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCombatPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCombatPoint_descriptor_;
}

const SCombatPoint& SCombatPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SCombatPoint* SCombatPoint::default_instance_ = NULL;

SCombatPoint* SCombatPoint::New() const {
  return new SCombatPoint;
}

void SCombatPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zs_point_ = 0;
    gs_point_ = 0;
    fs_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCombatPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float zs_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zs_point_)));
          set_has_zs_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gs_point;
        break;
      }
      
      // required float gs_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gs_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gs_point_)));
          set_has_gs_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fs_point;
        break;
      }
      
      // required float fs_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fs_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fs_point_)));
          set_has_fs_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCombatPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float zs_point = 1;
  if (has_zs_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zs_point(), output);
  }
  
  // required float gs_point = 2;
  if (has_gs_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gs_point(), output);
  }
  
  // required float fs_point = 3;
  if (has_fs_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fs_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCombatPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float zs_point = 1;
  if (has_zs_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zs_point(), target);
  }
  
  // required float gs_point = 2;
  if (has_gs_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gs_point(), target);
  }
  
  // required float fs_point = 3;
  if (has_fs_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fs_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCombatPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float zs_point = 1;
    if (has_zs_point()) {
      total_size += 1 + 4;
    }
    
    // required float gs_point = 2;
    if (has_gs_point()) {
      total_size += 1 + 4;
    }
    
    // required float fs_point = 3;
    if (has_fs_point()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCombatPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCombatPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCombatPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCombatPoint::MergeFrom(const SCombatPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zs_point()) {
      set_zs_point(from.zs_point());
    }
    if (from.has_gs_point()) {
      set_gs_point(from.gs_point());
    }
    if (from.has_fs_point()) {
      set_fs_point(from.fs_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCombatPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCombatPoint::CopyFrom(const SCombatPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCombatPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SCombatPoint::Swap(SCombatPoint* other) {
  if (other != this) {
    std::swap(zs_point_, other->zs_point_);
    std::swap(gs_point_, other->gs_point_);
    std::swap(fs_point_, other->fs_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCombatPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCombatPoint_descriptor_;
  metadata.reflection = SCombatPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemFashionParts::kIdxFieldNumber;
const int SItemFashionParts::kEnhanceLvFieldNumber;
#endif  // !_MSC_VER

SItemFashionParts::SItemFashionParts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemFashionParts::InitAsDefaultInstance() {
}

SItemFashionParts::SItemFashionParts(const SItemFashionParts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemFashionParts::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  enhance_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemFashionParts::~SItemFashionParts() {
  SharedDtor();
}

void SItemFashionParts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemFashionParts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemFashionParts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemFashionParts_descriptor_;
}

const SItemFashionParts& SItemFashionParts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemFashionParts* SItemFashionParts::default_instance_ = NULL;

SItemFashionParts* SItemFashionParts::New() const {
  return new SItemFashionParts;
}

void SItemFashionParts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    enhance_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemFashionParts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enhance_lv;
        break;
      }
      
      // required int32 enhance_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_lv_)));
          set_has_enhance_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemFashionParts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }
  
  // required int32 enhance_lv = 2;
  if (has_enhance_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhance_lv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemFashionParts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }
  
  // required int32 enhance_lv = 2;
  if (has_enhance_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhance_lv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemFashionParts::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }
    
    // required int32 enhance_lv = 2;
    if (has_enhance_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_lv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemFashionParts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemFashionParts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemFashionParts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemFashionParts::MergeFrom(const SItemFashionParts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_enhance_lv()) {
      set_enhance_lv(from.enhance_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemFashionParts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemFashionParts::CopyFrom(const SItemFashionParts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemFashionParts::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SItemFashionParts::Swap(SItemFashionParts* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(enhance_lv_, other->enhance_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemFashionParts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemFashionParts_descriptor_;
  metadata.reflection = SItemFashionParts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemWing::kExpFieldNumber;
const int SItemWing::kStarFieldNumber;
const int SItemWing::kLevelFieldNumber;
const int SItemWing::kStepFieldNumber;
const int SItemWing::kEquipStepFieldNumber;
const int SItemWing::kLuckFieldNumber;
#endif  // !_MSC_VER

SItemWing::SItemWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemWing::InitAsDefaultInstance() {
}

SItemWing::SItemWing(const SItemWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemWing::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  star_ = 0;
  level_ = 0;
  step_ = 0;
  equip_step_ = 0;
  luck_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemWing::~SItemWing() {
  SharedDtor();
}

void SItemWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemWing_descriptor_;
}

const SItemWing& SItemWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemWing* SItemWing::default_instance_ = NULL;

SItemWing* SItemWing::New() const {
  return new SItemWing;
}

void SItemWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    star_ = 0;
    level_ = 0;
    step_ = 0;
    equip_step_ = 0;
    luck_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }
      
      // required int32 step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_step;
        break;
      }
      
      // required int32 equip_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_step_)));
          set_has_equip_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_luck;
        break;
      }
      
      // required int32 luck = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luck_)));
          set_has_luck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }
  
  // required int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // required int32 step = 4;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->step(), output);
  }
  
  // required int32 equip_step = 5;
  if (has_equip_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equip_step(), output);
  }
  
  // required int32 luck = 6;
  if (has_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->luck(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }
  
  // required int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // required int32 step = 4;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->step(), target);
  }
  
  // required int32 equip_step = 5;
  if (has_equip_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equip_step(), target);
  }
  
  // required int32 luck = 6;
  if (has_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->luck(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 step = 4;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
    // required int32 equip_step = 5;
    if (has_equip_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_step());
    }
    
    // required int32 luck = 6;
    if (has_luck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luck());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemWing::MergeFrom(const SItemWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_equip_step()) {
      set_equip_step(from.equip_step());
    }
    if (from.has_luck()) {
      set_luck(from.luck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemWing::CopyFrom(const SItemWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemWing::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SItemWing::Swap(SItemWing* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(level_, other->level_);
    std::swap(step_, other->step_);
    std::swap(equip_step_, other->equip_step_);
    std::swap(luck_, other->luck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemWing_descriptor_;
  metadata.reflection = SItemWing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemEquip::kColorFieldNumber;
const int SItemEquip::kLevelFieldNumber;
const int SItemEquip::kUseLevelFieldNumber;
const int SItemEquip::kStarLevelFieldNumber;
const int SItemEquip::kEnchantLevelFieldNumber;
const int SItemEquip::kBasicsAttrFieldNumber;
const int SItemEquip::kExtendsAttrFieldNumber;
const int SItemEquip::kSpecialAttrFieldNumber;
const int SItemEquip::kSpecialTrigFieldNumber;
const int SItemEquip::kFashionPartsFieldNumber;
const int SItemEquip::kWingFieldNumber;
const int SItemEquip::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SItemEquip::SItemEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemEquip::InitAsDefaultInstance() {
  special_attr_ = const_cast< ::pwngs::protocol::worldsrv::SItemModAttr*>(&::pwngs::protocol::worldsrv::SItemModAttr::default_instance());
  special_trig_ = const_cast< ::pwngs::protocol::worldsrv::SItemModTrig*>(&::pwngs::protocol::worldsrv::SItemModTrig::default_instance());
  wing_ = const_cast< ::pwngs::protocol::worldsrv::SItemWing*>(&::pwngs::protocol::worldsrv::SItemWing::default_instance());
}

SItemEquip::SItemEquip(const SItemEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemEquip::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  level_ = 0;
  use_level_ = 0;
  star_level_ = 0;
  enchant_level_ = 0;
  special_attr_ = NULL;
  special_trig_ = NULL;
  wing_ = NULL;
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemEquip::~SItemEquip() {
  SharedDtor();
}

void SItemEquip::SharedDtor() {
  if (this != default_instance_) {
    delete special_attr_;
    delete special_trig_;
    delete wing_;
  }
}

void SItemEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemEquip_descriptor_;
}

const SItemEquip& SItemEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemEquip* SItemEquip::default_instance_ = NULL;

SItemEquip* SItemEquip::New() const {
  return new SItemEquip;
}

void SItemEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
    level_ = 0;
    use_level_ = 0;
    star_level_ = 0;
    enchant_level_ = 0;
    if (has_special_attr()) {
      if (special_attr_ != NULL) special_attr_->::pwngs::protocol::worldsrv::SItemModAttr::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_special_trig()) {
      if (special_trig_ != NULL) special_trig_->::pwngs::protocol::worldsrv::SItemModTrig::Clear();
    }
    if (has_wing()) {
      if (wing_ != NULL) wing_->::pwngs::protocol::worldsrv::SItemWing::Clear();
    }
    skill_id_ = 0;
  }
  basics_attr_.Clear();
  extends_attr_.Clear();
  fashion_parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_level;
        break;
      }
      
      // required int32 use_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_level_)));
          set_has_use_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star_level;
        break;
      }
      
      // optional int32 star_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enchant_level;
        break;
      }
      
      // optional int32 enchant_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_level_)));
          set_has_enchant_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_basics_attr;
        break;
      }
      
      // repeated .pwngs.protocol.worldsrv.SItemModAttr basics_attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basics_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basics_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_basics_attr;
        if (input->ExpectTag(58)) goto parse_extends_attr;
        break;
      }
      
      // repeated .pwngs.protocol.worldsrv.SItemModAttr extends_attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extends_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extends_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extends_attr;
        if (input->ExpectTag(66)) goto parse_special_attr;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemModAttr special_attr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_special_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_special_trig;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemModTrig special_trig = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special_trig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_special_trig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fashion_parts;
        break;
      }
      
      // repeated .pwngs.protocol.worldsrv.SItemFashionParts fashion_parts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashion_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fashion_parts;
        if (input->ExpectTag(90)) goto parse_wing;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemWing wing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required int32 use_level = 3;
  if (has_use_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use_level(), output);
  }
  
  // optional int32 star_level = 4;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star_level(), output);
  }
  
  // optional int32 enchant_level = 5;
  if (has_enchant_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enchant_level(), output);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr basics_attr = 6;
  for (int i = 0; i < this->basics_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->basics_attr(i), output);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr extends_attr = 7;
  for (int i = 0; i < this->extends_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extends_attr(i), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemModAttr special_attr = 8;
  if (has_special_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->special_attr(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemModTrig special_trig = 9;
  if (has_special_trig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->special_trig(), output);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemFashionParts fashion_parts = 10;
  for (int i = 0; i < this->fashion_parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fashion_parts(i), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemWing wing = 11;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wing(), output);
  }
  
  // optional int32 skill_id = 12;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required int32 use_level = 3;
  if (has_use_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use_level(), target);
  }
  
  // optional int32 star_level = 4;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star_level(), target);
  }
  
  // optional int32 enchant_level = 5;
  if (has_enchant_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enchant_level(), target);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr basics_attr = 6;
  for (int i = 0; i < this->basics_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->basics_attr(i), target);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr extends_attr = 7;
  for (int i = 0; i < this->extends_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extends_attr(i), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemModAttr special_attr = 8;
  if (has_special_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->special_attr(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemModTrig special_trig = 9;
  if (has_special_trig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->special_trig(), target);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemFashionParts fashion_parts = 10;
  for (int i = 0; i < this->fashion_parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fashion_parts(i), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemWing wing = 11;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wing(), target);
  }
  
  // optional int32 skill_id = 12;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 use_level = 3;
    if (has_use_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_level());
    }
    
    // optional int32 star_level = 4;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_level());
    }
    
    // optional int32 enchant_level = 5;
    if (has_enchant_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_level());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemModAttr special_attr = 8;
    if (has_special_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->special_attr());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pwngs.protocol.worldsrv.SItemModTrig special_trig = 9;
    if (has_special_trig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->special_trig());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemWing wing = 11;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing());
    }
    
    // optional int32 skill_id = 12;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
  }
  // repeated .pwngs.protocol.worldsrv.SItemModAttr basics_attr = 6;
  total_size += 1 * this->basics_attr_size();
  for (int i = 0; i < this->basics_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basics_attr(i));
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr extends_attr = 7;
  total_size += 1 * this->extends_attr_size();
  for (int i = 0; i < this->extends_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extends_attr(i));
  }
  
  // repeated .pwngs.protocol.worldsrv.SItemFashionParts fashion_parts = 10;
  total_size += 1 * this->fashion_parts_size();
  for (int i = 0; i < this->fashion_parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashion_parts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemEquip::MergeFrom(const SItemEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  basics_attr_.MergeFrom(from.basics_attr_);
  extends_attr_.MergeFrom(from.extends_attr_);
  fashion_parts_.MergeFrom(from.fashion_parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_use_level()) {
      set_use_level(from.use_level());
    }
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
    if (from.has_enchant_level()) {
      set_enchant_level(from.enchant_level());
    }
    if (from.has_special_attr()) {
      mutable_special_attr()->::pwngs::protocol::worldsrv::SItemModAttr::MergeFrom(from.special_attr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_special_trig()) {
      mutable_special_trig()->::pwngs::protocol::worldsrv::SItemModTrig::MergeFrom(from.special_trig());
    }
    if (from.has_wing()) {
      mutable_wing()->::pwngs::protocol::worldsrv::SItemWing::MergeFrom(from.wing());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemEquip::CopyFrom(const SItemEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < basics_attr_size(); i++) {
    if (!this->basics_attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < extends_attr_size(); i++) {
    if (!this->extends_attr(i).IsInitialized()) return false;
  }
  if (has_special_attr()) {
    if (!this->special_attr().IsInitialized()) return false;
  }
  if (has_special_trig()) {
    if (!this->special_trig().IsInitialized()) return false;
  }
  for (int i = 0; i < fashion_parts_size(); i++) {
    if (!this->fashion_parts(i).IsInitialized()) return false;
  }
  if (has_wing()) {
    if (!this->wing().IsInitialized()) return false;
  }
  return true;
}

void SItemEquip::Swap(SItemEquip* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(level_, other->level_);
    std::swap(use_level_, other->use_level_);
    std::swap(star_level_, other->star_level_);
    std::swap(enchant_level_, other->enchant_level_);
    basics_attr_.Swap(&other->basics_attr_);
    extends_attr_.Swap(&other->extends_attr_);
    std::swap(special_attr_, other->special_attr_);
    std::swap(special_trig_, other->special_trig_);
    fashion_parts_.Swap(&other->fashion_parts_);
    std::swap(wing_, other->wing_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemEquip_descriptor_;
  metadata.reflection = SItemEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemRune::kExpFieldNumber;
#endif  // !_MSC_VER

SItemRune::SItemRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemRune::InitAsDefaultInstance() {
}

SItemRune::SItemRune(const SItemRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemRune::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemRune::~SItemRune() {
  SharedDtor();
}

void SItemRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemRune_descriptor_;
}

const SItemRune& SItemRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemRune* SItemRune::default_instance_ = NULL;

SItemRune* SItemRune::New() const {
  return new SItemRune;
}

void SItemRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemRune::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemRune::MergeFrom(const SItemRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemRune::CopyFrom(const SItemRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemRune::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SItemRune::Swap(SItemRune* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemRune_descriptor_;
  metadata.reflection = SItemRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemBless::kModAttrsFieldNumber;
#endif  // !_MSC_VER

SItemBless::SItemBless()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemBless::InitAsDefaultInstance() {
}

SItemBless::SItemBless(const SItemBless& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemBless::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemBless::~SItemBless() {
  SharedDtor();
}

void SItemBless::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemBless::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemBless::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemBless_descriptor_;
}

const SItemBless& SItemBless::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemBless* SItemBless::default_instance_ = NULL;

SItemBless* SItemBless::New() const {
  return new SItemBless;
}

void SItemBless::Clear() {
  mod_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemBless::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mod_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mod_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemBless::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mod_attrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemBless::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mod_attrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemBless::ByteSize() const {
  int total_size = 0;
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  total_size += 1 * this->mod_attrs_size();
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mod_attrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemBless::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemBless* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemBless*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemBless::MergeFrom(const SItemBless& from) {
  GOOGLE_CHECK_NE(&from, this);
  mod_attrs_.MergeFrom(from.mod_attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemBless::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemBless::CopyFrom(const SItemBless& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemBless::IsInitialized() const {
  
  for (int i = 0; i < mod_attrs_size(); i++) {
    if (!this->mod_attrs(i).IsInitialized()) return false;
  }
  return true;
}

void SItemBless::Swap(SItemBless* other) {
  if (other != this) {
    mod_attrs_.Swap(&other->mod_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemBless::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemBless_descriptor_;
  metadata.reflection = SItemBless_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemEgg::kAptitudeFieldNumber;
const int SItemEgg::kFireDmgFieldNumber;
const int SItemEgg::kColdDmgFieldNumber;
const int SItemEgg::kLightDmgFieldNumber;
const int SItemEgg::kPoisonDmgFieldNumber;
const int SItemEgg::kFireResFieldNumber;
const int SItemEgg::kColdResFieldNumber;
const int SItemEgg::kLightResFieldNumber;
const int SItemEgg::kPoisonResFieldNumber;
const int SItemEgg::kGrowRateFieldNumber;
const int SItemEgg::kGrowRateLimitFieldNumber;
const int SItemEgg::kConRateFieldNumber;
const int SItemEgg::kConRateLimitFieldNumber;
#endif  // !_MSC_VER

SItemEgg::SItemEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemEgg::InitAsDefaultInstance() {
}

SItemEgg::SItemEgg(const SItemEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemEgg::SharedCtor() {
  _cached_size_ = 0;
  aptitude_ = 0;
  fire_dmg_ = 0;
  cold_dmg_ = 0;
  light_dmg_ = 0;
  poison_dmg_ = 0;
  fire_res_ = 0;
  cold_res_ = 0;
  light_res_ = 0;
  poison_res_ = 0;
  grow_rate_ = 0;
  grow_rate_limit_ = 0;
  con_rate_ = 0;
  con_rate_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemEgg::~SItemEgg() {
  SharedDtor();
}

void SItemEgg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemEgg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemEgg_descriptor_;
}

const SItemEgg& SItemEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemEgg* SItemEgg::default_instance_ = NULL;

SItemEgg* SItemEgg::New() const {
  return new SItemEgg;
}

void SItemEgg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aptitude_ = 0;
    fire_dmg_ = 0;
    cold_dmg_ = 0;
    light_dmg_ = 0;
    poison_dmg_ = 0;
    fire_res_ = 0;
    cold_res_ = 0;
    light_res_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    poison_res_ = 0;
    grow_rate_ = 0;
    grow_rate_limit_ = 0;
    con_rate_ = 0;
    con_rate_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float aptitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aptitude_)));
          set_has_aptitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fire_dmg;
        break;
      }
      
      // required float fire_dmg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fire_dmg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_dmg_)));
          set_has_fire_dmg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cold_dmg;
        break;
      }
      
      // required float cold_dmg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cold_dmg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cold_dmg_)));
          set_has_cold_dmg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_light_dmg;
        break;
      }
      
      // required float light_dmg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_light_dmg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_dmg_)));
          set_has_light_dmg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_poison_dmg;
        break;
      }
      
      // required float poison_dmg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_poison_dmg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &poison_dmg_)));
          set_has_poison_dmg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fire_res;
        break;
      }
      
      // required float fire_res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fire_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fire_res_)));
          set_has_fire_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_cold_res;
        break;
      }
      
      // required float cold_res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cold_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cold_res_)));
          set_has_cold_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_light_res;
        break;
      }
      
      // required float light_res = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_light_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_res_)));
          set_has_light_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_poison_res;
        break;
      }
      
      // required float poison_res = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_poison_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &poison_res_)));
          set_has_poison_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_grow_rate;
        break;
      }
      
      // required float grow_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_grow_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &grow_rate_)));
          set_has_grow_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_grow_rate_limit;
        break;
      }
      
      // required float grow_rate_limit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_grow_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &grow_rate_limit_)));
          set_has_grow_rate_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_con_rate;
        break;
      }
      
      // required float con_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_con_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &con_rate_)));
          set_has_con_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_con_rate_limit;
        break;
      }
      
      // required float con_rate_limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_con_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &con_rate_limit_)));
          set_has_con_rate_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float aptitude = 1;
  if (has_aptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->aptitude(), output);
  }
  
  // required float fire_dmg = 2;
  if (has_fire_dmg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fire_dmg(), output);
  }
  
  // required float cold_dmg = 3;
  if (has_cold_dmg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cold_dmg(), output);
  }
  
  // required float light_dmg = 4;
  if (has_light_dmg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->light_dmg(), output);
  }
  
  // required float poison_dmg = 5;
  if (has_poison_dmg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->poison_dmg(), output);
  }
  
  // required float fire_res = 6;
  if (has_fire_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fire_res(), output);
  }
  
  // required float cold_res = 7;
  if (has_cold_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cold_res(), output);
  }
  
  // required float light_res = 8;
  if (has_light_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->light_res(), output);
  }
  
  // required float poison_res = 9;
  if (has_poison_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->poison_res(), output);
  }
  
  // required float grow_rate = 10;
  if (has_grow_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->grow_rate(), output);
  }
  
  // required float grow_rate_limit = 11;
  if (has_grow_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->grow_rate_limit(), output);
  }
  
  // required float con_rate = 12;
  if (has_con_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->con_rate(), output);
  }
  
  // required float con_rate_limit = 13;
  if (has_con_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->con_rate_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float aptitude = 1;
  if (has_aptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->aptitude(), target);
  }
  
  // required float fire_dmg = 2;
  if (has_fire_dmg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fire_dmg(), target);
  }
  
  // required float cold_dmg = 3;
  if (has_cold_dmg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cold_dmg(), target);
  }
  
  // required float light_dmg = 4;
  if (has_light_dmg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->light_dmg(), target);
  }
  
  // required float poison_dmg = 5;
  if (has_poison_dmg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->poison_dmg(), target);
  }
  
  // required float fire_res = 6;
  if (has_fire_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fire_res(), target);
  }
  
  // required float cold_res = 7;
  if (has_cold_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cold_res(), target);
  }
  
  // required float light_res = 8;
  if (has_light_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->light_res(), target);
  }
  
  // required float poison_res = 9;
  if (has_poison_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->poison_res(), target);
  }
  
  // required float grow_rate = 10;
  if (has_grow_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->grow_rate(), target);
  }
  
  // required float grow_rate_limit = 11;
  if (has_grow_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->grow_rate_limit(), target);
  }
  
  // required float con_rate = 12;
  if (has_con_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->con_rate(), target);
  }
  
  // required float con_rate_limit = 13;
  if (has_con_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->con_rate_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemEgg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float aptitude = 1;
    if (has_aptitude()) {
      total_size += 1 + 4;
    }
    
    // required float fire_dmg = 2;
    if (has_fire_dmg()) {
      total_size += 1 + 4;
    }
    
    // required float cold_dmg = 3;
    if (has_cold_dmg()) {
      total_size += 1 + 4;
    }
    
    // required float light_dmg = 4;
    if (has_light_dmg()) {
      total_size += 1 + 4;
    }
    
    // required float poison_dmg = 5;
    if (has_poison_dmg()) {
      total_size += 1 + 4;
    }
    
    // required float fire_res = 6;
    if (has_fire_res()) {
      total_size += 1 + 4;
    }
    
    // required float cold_res = 7;
    if (has_cold_res()) {
      total_size += 1 + 4;
    }
    
    // required float light_res = 8;
    if (has_light_res()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float poison_res = 9;
    if (has_poison_res()) {
      total_size += 1 + 4;
    }
    
    // required float grow_rate = 10;
    if (has_grow_rate()) {
      total_size += 1 + 4;
    }
    
    // required float grow_rate_limit = 11;
    if (has_grow_rate_limit()) {
      total_size += 1 + 4;
    }
    
    // required float con_rate = 12;
    if (has_con_rate()) {
      total_size += 1 + 4;
    }
    
    // required float con_rate_limit = 13;
    if (has_con_rate_limit()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemEgg::MergeFrom(const SItemEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aptitude()) {
      set_aptitude(from.aptitude());
    }
    if (from.has_fire_dmg()) {
      set_fire_dmg(from.fire_dmg());
    }
    if (from.has_cold_dmg()) {
      set_cold_dmg(from.cold_dmg());
    }
    if (from.has_light_dmg()) {
      set_light_dmg(from.light_dmg());
    }
    if (from.has_poison_dmg()) {
      set_poison_dmg(from.poison_dmg());
    }
    if (from.has_fire_res()) {
      set_fire_res(from.fire_res());
    }
    if (from.has_cold_res()) {
      set_cold_res(from.cold_res());
    }
    if (from.has_light_res()) {
      set_light_res(from.light_res());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_poison_res()) {
      set_poison_res(from.poison_res());
    }
    if (from.has_grow_rate()) {
      set_grow_rate(from.grow_rate());
    }
    if (from.has_grow_rate_limit()) {
      set_grow_rate_limit(from.grow_rate_limit());
    }
    if (from.has_con_rate()) {
      set_con_rate(from.con_rate());
    }
    if (from.has_con_rate_limit()) {
      set_con_rate_limit(from.con_rate_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemEgg::CopyFrom(const SItemEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemEgg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void SItemEgg::Swap(SItemEgg* other) {
  if (other != this) {
    std::swap(aptitude_, other->aptitude_);
    std::swap(fire_dmg_, other->fire_dmg_);
    std::swap(cold_dmg_, other->cold_dmg_);
    std::swap(light_dmg_, other->light_dmg_);
    std::swap(poison_dmg_, other->poison_dmg_);
    std::swap(fire_res_, other->fire_res_);
    std::swap(cold_res_, other->cold_res_);
    std::swap(light_res_, other->light_res_);
    std::swap(poison_res_, other->poison_res_);
    std::swap(grow_rate_, other->grow_rate_);
    std::swap(grow_rate_limit_, other->grow_rate_limit_);
    std::swap(con_rate_, other->con_rate_);
    std::swap(con_rate_limit_, other->con_rate_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemEgg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemEgg_descriptor_;
  metadata.reflection = SItemEgg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemEquipRune::kModAttrsFieldNumber;
#endif  // !_MSC_VER

SItemEquipRune::SItemEquipRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemEquipRune::InitAsDefaultInstance() {
}

SItemEquipRune::SItemEquipRune(const SItemEquipRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemEquipRune::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemEquipRune::~SItemEquipRune() {
  SharedDtor();
}

void SItemEquipRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemEquipRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemEquipRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemEquipRune_descriptor_;
}

const SItemEquipRune& SItemEquipRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemEquipRune* SItemEquipRune::default_instance_ = NULL;

SItemEquipRune* SItemEquipRune::New() const {
  return new SItemEquipRune;
}

void SItemEquipRune::Clear() {
  mod_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemEquipRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mod_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mod_attrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemEquipRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mod_attrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemEquipRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mod_attrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemEquipRune::ByteSize() const {
  int total_size = 0;
  
  // repeated .pwngs.protocol.worldsrv.SItemModAttr mod_attrs = 1;
  total_size += 1 * this->mod_attrs_size();
  for (int i = 0; i < this->mod_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mod_attrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemEquipRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemEquipRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemEquipRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemEquipRune::MergeFrom(const SItemEquipRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  mod_attrs_.MergeFrom(from.mod_attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemEquipRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemEquipRune::CopyFrom(const SItemEquipRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemEquipRune::IsInitialized() const {
  
  for (int i = 0; i < mod_attrs_size(); i++) {
    if (!this->mod_attrs(i).IsInitialized()) return false;
  }
  return true;
}

void SItemEquipRune::Swap(SItemEquipRune* other) {
  if (other != this) {
    mod_attrs_.Swap(&other->mod_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemEquipRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemEquipRune_descriptor_;
  metadata.reflection = SItemEquipRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemBloodGobm::kLevelFieldNumber;
const int SItemBloodGobm::kExpFieldNumber;
const int SItemBloodGobm::kActiveTypeFieldNumber;
const int SItemBloodGobm::kActiveParam1FieldNumber;
const int SItemBloodGobm::kActiveParam2FieldNumber;
#endif  // !_MSC_VER

SItemBloodGobm::SItemBloodGobm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemBloodGobm::InitAsDefaultInstance() {
}

SItemBloodGobm::SItemBloodGobm(const SItemBloodGobm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemBloodGobm::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  active_type_ = 0;
  active_param1_ = 0;
  active_param2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemBloodGobm::~SItemBloodGobm() {
  SharedDtor();
}

void SItemBloodGobm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemBloodGobm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemBloodGobm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemBloodGobm_descriptor_;
}

const SItemBloodGobm& SItemBloodGobm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemBloodGobm* SItemBloodGobm::default_instance_ = NULL;

SItemBloodGobm* SItemBloodGobm::New() const {
  return new SItemBloodGobm;
}

void SItemBloodGobm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
    active_type_ = 0;
    active_param1_ = 0;
    active_param2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemBloodGobm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_type;
        break;
      }
      
      // required int32 active_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_type_)));
          set_has_active_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active_param1;
        break;
      }
      
      // required int32 active_param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_param1_)));
          set_has_active_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_param2;
        break;
      }
      
      // required int32 active_param2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_param2_)));
          set_has_active_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemBloodGobm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // required int32 active_type = 3;
  if (has_active_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_type(), output);
  }
  
  // required int32 active_param1 = 4;
  if (has_active_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_param1(), output);
  }
  
  // required int32 active_param2 = 5;
  if (has_active_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->active_param2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemBloodGobm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // required int32 active_type = 3;
  if (has_active_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_type(), target);
  }
  
  // required int32 active_param1 = 4;
  if (has_active_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_param1(), target);
  }
  
  // required int32 active_param2 = 5;
  if (has_active_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->active_param2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemBloodGobm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required int32 active_type = 3;
    if (has_active_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_type());
    }
    
    // required int32 active_param1 = 4;
    if (has_active_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_param1());
    }
    
    // required int32 active_param2 = 5;
    if (has_active_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_param2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemBloodGobm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemBloodGobm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemBloodGobm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemBloodGobm::MergeFrom(const SItemBloodGobm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_active_type()) {
      set_active_type(from.active_type());
    }
    if (from.has_active_param1()) {
      set_active_param1(from.active_param1());
    }
    if (from.has_active_param2()) {
      set_active_param2(from.active_param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemBloodGobm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemBloodGobm::CopyFrom(const SItemBloodGobm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemBloodGobm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SItemBloodGobm::Swap(SItemBloodGobm* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(active_type_, other->active_type_);
    std::swap(active_param1_, other->active_param1_);
    std::swap(active_param2_, other->active_param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemBloodGobm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemBloodGobm_descriptor_;
  metadata.reflection = SItemBloodGobm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SEquipIndexGem::kEquipIndexFieldNumber;
const int SEquipIndexGem::kGemsFieldNumber;
#endif  // !_MSC_VER

SEquipIndexGem::SEquipIndexGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SEquipIndexGem::InitAsDefaultInstance() {
}

SEquipIndexGem::SEquipIndexGem(const SEquipIndexGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SEquipIndexGem::SharedCtor() {
  _cached_size_ = 0;
  equip_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SEquipIndexGem::~SEquipIndexGem() {
  SharedDtor();
}

void SEquipIndexGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SEquipIndexGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SEquipIndexGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEquipIndexGem_descriptor_;
}

const SEquipIndexGem& SEquipIndexGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SEquipIndexGem* SEquipIndexGem::default_instance_ = NULL;

SEquipIndexGem* SEquipIndexGem::New() const {
  return new SEquipIndexGem;
}

void SEquipIndexGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_index_ = 0;
  }
  gems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SEquipIndexGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_index_)));
          set_has_equip_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gems;
        break;
      }
      
      // repeated .pwngs.protocol.worldsrv.SItem gems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SEquipIndexGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_index = 1;
  if (has_equip_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_index(), output);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItem gems = 2;
  for (int i = 0; i < this->gems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SEquipIndexGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_index = 1;
  if (has_equip_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_index(), target);
  }
  
  // repeated .pwngs.protocol.worldsrv.SItem gems = 2;
  for (int i = 0; i < this->gems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SEquipIndexGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_index = 1;
    if (has_equip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_index());
    }
    
  }
  // repeated .pwngs.protocol.worldsrv.SItem gems = 2;
  total_size += 1 * this->gems_size();
  for (int i = 0; i < this->gems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SEquipIndexGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SEquipIndexGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SEquipIndexGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SEquipIndexGem::MergeFrom(const SEquipIndexGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  gems_.MergeFrom(from.gems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_index()) {
      set_equip_index(from.equip_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SEquipIndexGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEquipIndexGem::CopyFrom(const SEquipIndexGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEquipIndexGem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < gems_size(); i++) {
    if (!this->gems(i).IsInitialized()) return false;
  }
  return true;
}

void SEquipIndexGem::Swap(SEquipIndexGem* other) {
  if (other != this) {
    std::swap(equip_index_, other->equip_index_);
    gems_.Swap(&other->gems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SEquipIndexGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SEquipIndexGem_descriptor_;
  metadata.reflection = SEquipIndexGem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemHPMP::kUsedValFieldNumber;
const int SItemHPMP::kTotalValFieldNumber;
#endif  // !_MSC_VER

SItemHPMP::SItemHPMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemHPMP::InitAsDefaultInstance() {
}

SItemHPMP::SItemHPMP(const SItemHPMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemHPMP::SharedCtor() {
  _cached_size_ = 0;
  used_val_ = 0;
  total_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemHPMP::~SItemHPMP() {
  SharedDtor();
}

void SItemHPMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemHPMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemHPMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemHPMP_descriptor_;
}

const SItemHPMP& SItemHPMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemHPMP* SItemHPMP::default_instance_ = NULL;

SItemHPMP* SItemHPMP::New() const {
  return new SItemHPMP;
}

void SItemHPMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    used_val_ = 0;
    total_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemHPMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 used_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_val_)));
          set_has_used_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_val;
        break;
      }
      
      // required int32 total_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_val_)));
          set_has_total_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemHPMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 used_val = 1;
  if (has_used_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->used_val(), output);
  }
  
  // required int32 total_val = 2;
  if (has_total_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemHPMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 used_val = 1;
  if (has_used_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->used_val(), target);
  }
  
  // required int32 total_val = 2;
  if (has_total_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemHPMP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 used_val = 1;
    if (has_used_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_val());
    }
    
    // required int32 total_val = 2;
    if (has_total_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemHPMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemHPMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemHPMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemHPMP::MergeFrom(const SItemHPMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_used_val()) {
      set_used_val(from.used_val());
    }
    if (from.has_total_val()) {
      set_total_val(from.total_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemHPMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemHPMP::CopyFrom(const SItemHPMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemHPMP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SItemHPMP::Swap(SItemHPMP* other) {
  if (other != this) {
    std::swap(used_val_, other->used_val_);
    std::swap(total_val_, other->total_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemHPMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemHPMP_descriptor_;
  metadata.reflection = SItemHPMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItem::kItemIdFieldNumber;
const int SItem::kItemTypeFieldNumber;
const int SItem::kItemCountFieldNumber;
const int SItem::kItemBagFieldNumber;
const int SItem::kItemPositionFieldNumber;
const int SItem::kItemFlagsFieldNumber;
const int SItem::kExpiredTimeFieldNumber;
const int SItem::kItemPriceFieldNumber;
const int SItem::kEquipAttrsFieldNumber;
const int SItem::kBlessAttrsFieldNumber;
const int SItem::kEggAttrsFieldNumber;
const int SItem::kGobmAttrsFieldNumber;
const int SItem::kCombatPointFieldNumber;
const int SItem::kHpmpAttrsFieldNumber;
#endif  // !_MSC_VER

SItem::SItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItem::InitAsDefaultInstance() {
  equip_attrs_ = const_cast< ::pwngs::protocol::worldsrv::SItemEquip*>(&::pwngs::protocol::worldsrv::SItemEquip::default_instance());
  bless_attrs_ = const_cast< ::pwngs::protocol::worldsrv::SItemBless*>(&::pwngs::protocol::worldsrv::SItemBless::default_instance());
  egg_attrs_ = const_cast< ::pwngs::protocol::worldsrv::SItemEgg*>(&::pwngs::protocol::worldsrv::SItemEgg::default_instance());
  gobm_attrs_ = const_cast< ::pwngs::protocol::worldsrv::SItemBloodGobm*>(&::pwngs::protocol::worldsrv::SItemBloodGobm::default_instance());
  combat_point_ = const_cast< ::pwngs::protocol::worldsrv::SCombatPoint*>(&::pwngs::protocol::worldsrv::SCombatPoint::default_instance());
  hpmp_attrs_ = const_cast< ::pwngs::protocol::worldsrv::SItemHPMP*>(&::pwngs::protocol::worldsrv::SItemHPMP::default_instance());
}

SItem::SItem(const SItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  item_type_ = 0;
  item_count_ = 0;
  item_bag_ = 0;
  item_position_ = 0;
  item_flags_ = GOOGLE_LONGLONG(0);
  expired_time_ = GOOGLE_LONGLONG(0);
  item_price_ = GOOGLE_LONGLONG(0);
  equip_attrs_ = NULL;
  bless_attrs_ = NULL;
  egg_attrs_ = NULL;
  gobm_attrs_ = NULL;
  combat_point_ = NULL;
  hpmp_attrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItem::~SItem() {
  SharedDtor();
}

void SItem::SharedDtor() {
  if (this != default_instance_) {
    delete equip_attrs_;
    delete bless_attrs_;
    delete egg_attrs_;
    delete gobm_attrs_;
    delete combat_point_;
    delete hpmp_attrs_;
  }
}

void SItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItem_descriptor_;
}

const SItem& SItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItem* SItem::default_instance_ = NULL;

SItem* SItem::New() const {
  return new SItem;
}

void SItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    item_type_ = 0;
    item_count_ = 0;
    item_bag_ = 0;
    item_position_ = 0;
    item_flags_ = GOOGLE_LONGLONG(0);
    expired_time_ = GOOGLE_LONGLONG(0);
    item_price_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_equip_attrs()) {
      if (equip_attrs_ != NULL) equip_attrs_->::pwngs::protocol::worldsrv::SItemEquip::Clear();
    }
    if (has_bless_attrs()) {
      if (bless_attrs_ != NULL) bless_attrs_->::pwngs::protocol::worldsrv::SItemBless::Clear();
    }
    if (has_egg_attrs()) {
      if (egg_attrs_ != NULL) egg_attrs_->::pwngs::protocol::worldsrv::SItemEgg::Clear();
    }
    if (has_gobm_attrs()) {
      if (gobm_attrs_ != NULL) gobm_attrs_->::pwngs::protocol::worldsrv::SItemBloodGobm::Clear();
    }
    if (has_combat_point()) {
      if (combat_point_ != NULL) combat_point_->::pwngs::protocol::worldsrv::SCombatPoint::Clear();
    }
    if (has_hpmp_attrs()) {
      if (hpmp_attrs_ != NULL) hpmp_attrs_->::pwngs::protocol::worldsrv::SItemHPMP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_type;
        break;
      }
      
      // required int32 item_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // required int32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_bag;
        break;
      }
      
      // required int32 item_bag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bag_)));
          set_has_item_bag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_position;
        break;
      }
      
      // required int32 item_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_position_)));
          set_has_item_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_flags;
        break;
      }
      
      // required int64 item_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_flags_)));
          set_has_item_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expired_time;
        break;
      }
      
      // required int64 expired_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_price;
        break;
      }
      
      // optional int64 item_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_price_)));
          set_has_item_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip_attrs;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemEquip equip_attrs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bless_attrs;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemBless bless_attrs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bless_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bless_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_egg_attrs;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemEgg egg_attrs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_egg_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egg_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gobm_attrs;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemBloodGobm gobm_attrs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gobm_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gobm_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_combat_point;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SCombatPoint combat_point = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combat_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combat_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hpmp_attrs;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SItemHPMP hpmp_attrs = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hpmp_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hpmp_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // required int32 item_type = 2;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_type(), output);
  }
  
  // required int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }
  
  // required int32 item_bag = 4;
  if (has_item_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_bag(), output);
  }
  
  // required int32 item_position = 5;
  if (has_item_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_position(), output);
  }
  
  // required int64 item_flags = 6;
  if (has_item_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->item_flags(), output);
  }
  
  // required int64 expired_time = 7;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expired_time(), output);
  }
  
  // optional int64 item_price = 8;
  if (has_item_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->item_price(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemEquip equip_attrs = 9;
  if (has_equip_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip_attrs(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemBless bless_attrs = 10;
  if (has_bless_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bless_attrs(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemEgg egg_attrs = 11;
  if (has_egg_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->egg_attrs(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemBloodGobm gobm_attrs = 12;
  if (has_gobm_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gobm_attrs(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SCombatPoint combat_point = 13;
  if (has_combat_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->combat_point(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemHPMP hpmp_attrs = 14;
  if (has_hpmp_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hpmp_attrs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // required int32 item_type = 2;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_type(), target);
  }
  
  // required int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }
  
  // required int32 item_bag = 4;
  if (has_item_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_bag(), target);
  }
  
  // required int32 item_position = 5;
  if (has_item_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_position(), target);
  }
  
  // required int64 item_flags = 6;
  if (has_item_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->item_flags(), target);
  }
  
  // required int64 expired_time = 7;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expired_time(), target);
  }
  
  // optional int64 item_price = 8;
  if (has_item_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->item_price(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemEquip equip_attrs = 9;
  if (has_equip_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip_attrs(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemBless bless_attrs = 10;
  if (has_bless_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bless_attrs(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemEgg egg_attrs = 11;
  if (has_egg_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->egg_attrs(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemBloodGobm gobm_attrs = 12;
  if (has_gobm_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gobm_attrs(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SCombatPoint combat_point = 13;
  if (has_combat_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->combat_point(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SItemHPMP hpmp_attrs = 14;
  if (has_hpmp_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->hpmp_attrs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // required int32 item_type = 2;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }
    
    // required int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // required int32 item_bag = 4;
    if (has_item_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bag());
    }
    
    // required int32 item_position = 5;
    if (has_item_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_position());
    }
    
    // required int64 item_flags = 6;
    if (has_item_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_flags());
    }
    
    // required int64 expired_time = 7;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expired_time());
    }
    
    // optional int64 item_price = 8;
    if (has_item_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pwngs.protocol.worldsrv.SItemEquip equip_attrs = 9;
    if (has_equip_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_attrs());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemBless bless_attrs = 10;
    if (has_bless_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bless_attrs());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemEgg egg_attrs = 11;
    if (has_egg_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->egg_attrs());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemBloodGobm gobm_attrs = 12;
    if (has_gobm_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gobm_attrs());
    }
    
    // optional .pwngs.protocol.worldsrv.SCombatPoint combat_point = 13;
    if (has_combat_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combat_point());
    }
    
    // optional .pwngs.protocol.worldsrv.SItemHPMP hpmp_attrs = 14;
    if (has_hpmp_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hpmp_attrs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItem::MergeFrom(const SItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_bag()) {
      set_item_bag(from.item_bag());
    }
    if (from.has_item_position()) {
      set_item_position(from.item_position());
    }
    if (from.has_item_flags()) {
      set_item_flags(from.item_flags());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
    if (from.has_item_price()) {
      set_item_price(from.item_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip_attrs()) {
      mutable_equip_attrs()->::pwngs::protocol::worldsrv::SItemEquip::MergeFrom(from.equip_attrs());
    }
    if (from.has_bless_attrs()) {
      mutable_bless_attrs()->::pwngs::protocol::worldsrv::SItemBless::MergeFrom(from.bless_attrs());
    }
    if (from.has_egg_attrs()) {
      mutable_egg_attrs()->::pwngs::protocol::worldsrv::SItemEgg::MergeFrom(from.egg_attrs());
    }
    if (from.has_gobm_attrs()) {
      mutable_gobm_attrs()->::pwngs::protocol::worldsrv::SItemBloodGobm::MergeFrom(from.gobm_attrs());
    }
    if (from.has_combat_point()) {
      mutable_combat_point()->::pwngs::protocol::worldsrv::SCombatPoint::MergeFrom(from.combat_point());
    }
    if (from.has_hpmp_attrs()) {
      mutable_hpmp_attrs()->::pwngs::protocol::worldsrv::SItemHPMP::MergeFrom(from.hpmp_attrs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItem::CopyFrom(const SItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_equip_attrs()) {
    if (!this->equip_attrs().IsInitialized()) return false;
  }
  if (has_bless_attrs()) {
    if (!this->bless_attrs().IsInitialized()) return false;
  }
  if (has_egg_attrs()) {
    if (!this->egg_attrs().IsInitialized()) return false;
  }
  if (has_gobm_attrs()) {
    if (!this->gobm_attrs().IsInitialized()) return false;
  }
  if (has_combat_point()) {
    if (!this->combat_point().IsInitialized()) return false;
  }
  if (has_hpmp_attrs()) {
    if (!this->hpmp_attrs().IsInitialized()) return false;
  }
  return true;
}

void SItem::Swap(SItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_bag_, other->item_bag_);
    std::swap(item_position_, other->item_position_);
    std::swap(item_flags_, other->item_flags_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(item_price_, other->item_price_);
    std::swap(equip_attrs_, other->equip_attrs_);
    std::swap(bless_attrs_, other->bless_attrs_);
    std::swap(egg_attrs_, other->egg_attrs_);
    std::swap(gobm_attrs_, other->gobm_attrs_);
    std::swap(combat_point_, other->combat_point_);
    std::swap(hpmp_attrs_, other->hpmp_attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItem_descriptor_;
  metadata.reflection = SItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItemPrice::kTidFieldNumber;
const int SItemPrice::kPriceFieldNumber;
#endif  // !_MSC_VER

SItemPrice::SItemPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItemPrice::InitAsDefaultInstance() {
}

SItemPrice::SItemPrice(const SItemPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItemPrice::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItemPrice::~SItemPrice() {
  SharedDtor();
}

void SItemPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItemPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItemPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItemPrice_descriptor_;
}

const SItemPrice& SItemPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SItemPrice* SItemPrice::default_instance_ = NULL;

SItemPrice* SItemPrice::New() const {
  return new SItemPrice;
}

void SItemPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItemPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // required int32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItemPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItemPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItemPrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItemPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItemPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItemPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItemPrice::MergeFrom(const SItemPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItemPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItemPrice::CopyFrom(const SItemPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SItemPrice::Swap(SItemPrice* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItemPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItemPrice_descriptor_;
  metadata.reflection = SItemPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPackItem::kTidFieldNumber;
const int SPackItem::kCountFieldNumber;
#endif  // !_MSC_VER

SPackItem::SPackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPackItem::InitAsDefaultInstance() {
}

SPackItem::SPackItem(const SPackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPackItem::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPackItem::~SPackItem() {
  SharedDtor();
}

void SPackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPackItem_descriptor_;
}

const SPackItem& SPackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SPackItem* SPackItem::default_instance_ = NULL;

SPackItem* SPackItem::New() const {
  return new SPackItem;
}

void SPackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPackItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPackItem::MergeFrom(const SPackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPackItem::CopyFrom(const SPackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SPackItem::Swap(SPackItem* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPackItem_descriptor_;
  metadata.reflection = SPackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRandomItem::kRandomItemTypeFieldNumber;
const int SRandomItem::kPackItemFieldNumber;
#endif  // !_MSC_VER

SRandomItem::SRandomItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRandomItem::InitAsDefaultInstance() {
  pack_item_ = const_cast< ::pwngs::protocol::worldsrv::SPackItem*>(&::pwngs::protocol::worldsrv::SPackItem::default_instance());
}

SRandomItem::SRandomItem(const SRandomItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRandomItem::SharedCtor() {
  _cached_size_ = 0;
  random_item_type_ = 0;
  pack_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRandomItem::~SRandomItem() {
  SharedDtor();
}

void SRandomItem::SharedDtor() {
  if (this != default_instance_) {
    delete pack_item_;
  }
}

void SRandomItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRandomItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRandomItem_descriptor_;
}

const SRandomItem& SRandomItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();  return *default_instance_;
}

SRandomItem* SRandomItem::default_instance_ = NULL;

SRandomItem* SRandomItem::New() const {
  return new SRandomItem;
}

void SRandomItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    random_item_type_ = 0;
    if (has_pack_item()) {
      if (pack_item_ != NULL) pack_item_->::pwngs::protocol::worldsrv::SPackItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRandomItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 random_item_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_item_type_)));
          set_has_random_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack_item;
        break;
      }
      
      // required .pwngs.protocol.worldsrv.SPackItem pack_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRandomItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 random_item_type = 1;
  if (has_random_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->random_item_type(), output);
  }
  
  // required .pwngs.protocol.worldsrv.SPackItem pack_item = 2;
  if (has_pack_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pack_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRandomItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 random_item_type = 1;
  if (has_random_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->random_item_type(), target);
  }
  
  // required .pwngs.protocol.worldsrv.SPackItem pack_item = 2;
  if (has_pack_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pack_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRandomItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 random_item_type = 1;
    if (has_random_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_item_type());
    }
    
    // required .pwngs.protocol.worldsrv.SPackItem pack_item = 2;
    if (has_pack_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack_item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRandomItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRandomItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRandomItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRandomItem::MergeFrom(const SRandomItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random_item_type()) {
      set_random_item_type(from.random_item_type());
    }
    if (from.has_pack_item()) {
      mutable_pack_item()->::pwngs::protocol::worldsrv::SPackItem::MergeFrom(from.pack_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRandomItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRandomItem::CopyFrom(const SRandomItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRandomItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pack_item()) {
    if (!this->pack_item().IsInitialized()) return false;
  }
  return true;
}

void SRandomItem::Swap(SRandomItem* other) {
  if (other != this) {
    std::swap(random_item_type_, other->random_item_type_);
    std::swap(pack_item_, other->pack_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRandomItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRandomItem_descriptor_;
  metadata.reflection = SRandomItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace worldsrv
}  // namespace protocol
}  // namespace pwngs

// @@protoc_insertion_point(global_scope)
