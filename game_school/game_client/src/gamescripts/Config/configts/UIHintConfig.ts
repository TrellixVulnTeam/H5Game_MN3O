class UIHintConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<UIHintConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly type:number;    public readonly okText:string;    public readonly cancelText:string;    public readonly countDown:number;    public constructor(id : number , type : number , okText : string , cancelText : string , countDown : number ){		super()        this.id = id;        this.type = type;        this.okText = okText;        this.cancelText = cancelText;        this.countDown = countDown;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "UIHintConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 5)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("UIHintConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var id: number  = rs.ReadInt();      var type: number  = rs.ReadInt();      var okText: string  = rs.ReadString();      var cancelText: string  = rs.ReadString();      var countDown: number  = rs.ReadInt();      var  new_obj_UIHintConfig : UIHintConfig = new UIHintConfig(id, type, okText, cancelText, countDown);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_UIHintConfig;        this.array.push(new_obj_UIHintConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="UIHintConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):UIHintConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}