class BattleConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<BattleConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly icon:string;    public readonly round:number;    public readonly boss_battle:boolean;    public readonly dialogue_front:number;    public readonly dialogue_tail:number;    public readonly battle_bg:string;    public readonly battle_music:string;    public readonly monster1:number;    public readonly monster2:number;    public readonly monster3:number;    public readonly monster4:number;    public readonly monster5:number;    public readonly monster6:number;    public constructor(id : number , icon : string , round : number , boss_battle : boolean , dialogue_front : number , dialogue_tail : number , battle_bg : string , battle_music : string , monster1 : number , monster2 : number , monster3 : number , monster4 : number , monster5 : number , monster6 : number ){		super()        this.id = id;        this.icon = icon;        this.round = round;        this.boss_battle = boss_battle;        this.dialogue_front = dialogue_front;        this.dialogue_tail = dialogue_tail;        this.battle_bg = battle_bg;        this.battle_music = battle_music;        this.monster1 = monster1;        this.monster2 = monster2;        this.monster3 = monster3;        this.monster4 = monster4;        this.monster5 = monster5;        this.monster6 = monster6;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "BattleConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 14)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("BattleConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var id: number  = rs.ReadInt();      var icon: string  = rs.ReadString();      var round: number  = rs.ReadInt();      var boss_battle: boolean  = rs.ReadBool();      var dialogue_front: number  = rs.ReadInt();      var dialogue_tail: number  = rs.ReadInt();      var battle_bg: string  = rs.ReadString();      var battle_music: string  = rs.ReadString();      var monster1: number  = rs.ReadInt();      var monster2: number  = rs.ReadInt();      var monster3: number  = rs.ReadInt();      var monster4: number  = rs.ReadInt();      var monster5: number  = rs.ReadInt();      var monster6: number  = rs.ReadInt();      var  new_obj_BattleConfig : BattleConfig = new BattleConfig(id, icon, round, boss_battle, dialogue_front, dialogue_tail, battle_bg, battle_music, monster1, monster2, monster3, monster4, monster5, monster6);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_BattleConfig;        this.array.push(new_obj_BattleConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="BattleConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):BattleConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}