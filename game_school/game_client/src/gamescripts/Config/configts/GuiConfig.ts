class GuiConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<GuiConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly ResName:string;    public readonly PosZ:number;    public readonly EscClose:boolean;    public readonly exclusion:number[];    public readonly hidemainui:number[];    public readonly ReadyToLoad:boolean;    public readonly readyLoadGroup:string[];    public readonly switchSceneIsClose:boolean;    public readonly dungeonHide:boolean;    public readonly onlyHide:boolean;    public readonly showloading:boolean;    public readonly needFreeRes:boolean;    public readonly AudioOfOpen:string;    public readonly AudioOfClose:string;    public readonly CanToTop:boolean;    public constructor(id : number , ResName : string , PosZ : number , EscClose : boolean , exclusion : number[] , hidemainui : number[] , ReadyToLoad : boolean , readyLoadGroup : string[] , switchSceneIsClose : boolean , dungeonHide : boolean , onlyHide : boolean , showloading : boolean , needFreeRes : boolean , AudioOfOpen : string , AudioOfClose : string , CanToTop : boolean ){		super()        this.id = id;        this.ResName = ResName;        this.PosZ = PosZ;        this.EscClose = EscClose;        this.exclusion = exclusion;        this.hidemainui = hidemainui;        this.ReadyToLoad = ReadyToLoad;        this.readyLoadGroup = readyLoadGroup;        this.switchSceneIsClose = switchSceneIsClose;        this.dungeonHide = dungeonHide;        this.onlyHide = onlyHide;        this.showloading = showloading;        this.needFreeRes = needFreeRes;        this.AudioOfOpen = AudioOfOpen;        this.AudioOfClose = AudioOfClose;        this.CanToTop = CanToTop;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "GuiConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 16)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("GuiConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_GuiConfig:number;      var id: number  = rs.ReadInt();      var ResName: string  = rs.ReadString();      var PosZ: number  = rs.ReadInt();      var EscClose: boolean  = rs.ReadBool();        arr_item_len_GuiConfig = rs.ReadShort();    var  exclusion :  number[] = [];        for(var i = 0; i < arr_item_len_GuiConfig; ++i)            exclusion[i] = rs.ReadInt();        arr_item_len_GuiConfig = rs.ReadShort();    var  hidemainui :  number[] = [];        for(var i = 0; i < arr_item_len_GuiConfig; ++i)            hidemainui[i] = rs.ReadInt();      var ReadyToLoad: boolean  = rs.ReadBool();        arr_item_len_GuiConfig = rs.ReadShort();    var  readyLoadGroup :  string[] = [];        for(var i = 0; i < arr_item_len_GuiConfig; ++i)            readyLoadGroup[i] = rs.ReadString();      var switchSceneIsClose: boolean  = rs.ReadBool();      var dungeonHide: boolean  = rs.ReadBool();      var onlyHide: boolean  = rs.ReadBool();      var showloading: boolean  = rs.ReadBool();      var needFreeRes: boolean  = rs.ReadBool();      var AudioOfOpen: string  = rs.ReadString();      var AudioOfClose: string  = rs.ReadString();      var CanToTop: boolean  = rs.ReadBool();      var  new_obj_GuiConfig : GuiConfig = new GuiConfig(id, ResName, PosZ, EscClose, exclusion, hidemainui, ReadyToLoad, readyLoadGroup, switchSceneIsClose, dungeonHide, onlyHide, showloading, needFreeRes, AudioOfOpen, AudioOfClose, CanToTop);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_GuiConfig;        this.array.push(new_obj_GuiConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="GuiConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):GuiConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}