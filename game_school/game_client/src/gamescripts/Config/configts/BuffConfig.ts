class BuffConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<BuffConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly ID:number;    public readonly name:string;    public readonly desc:string;    public readonly descPara:string;    public readonly imageSet:string;    public readonly Icon:string;    public readonly isIconDisplay:boolean;    public readonly friendlyLevel:number;    public readonly dispelType:number;    public readonly time:number;    public readonly settlePriority:number;    public readonly settleType:number;    public readonly timeType:number;    public readonly group:number;    public readonly groupPriority:number;    public readonly liveStyle:number;    public readonly defaultLayers:number;    public readonly maxLayers:number;    public readonly controlBit:number;    public readonly effectID1:number;    public readonly effectID2:number;    public readonly effectID3:number;    public readonly effectID4:number;    public readonly effectID5:number;    public readonly effect:number;    public readonly effectDelay:number;    public readonly effectPosType:number;    public constructor(ID : number , name : string , desc : string , descPara : string , imageSet : string , Icon : string , isIconDisplay : boolean , friendlyLevel : number , dispelType : number , time : number , settlePriority : number , settleType : number , timeType : number , group : number , groupPriority : number , liveStyle : number , defaultLayers : number , maxLayers : number , controlBit : number , effectID1 : number , effectID2 : number , effectID3 : number , effectID4 : number , effectID5 : number , effect : number , effectDelay : number , effectPosType : number ){		super()        this.ID = ID;        this.name = name;        this.desc = desc;        this.descPara = descPara;        this.imageSet = imageSet;        this.Icon = Icon;        this.isIconDisplay = isIconDisplay;        this.friendlyLevel = friendlyLevel;        this.dispelType = dispelType;        this.time = time;        this.settlePriority = settlePriority;        this.settleType = settleType;        this.timeType = timeType;        this.group = group;        this.groupPriority = groupPriority;        this.liveStyle = liveStyle;        this.defaultLayers = defaultLayers;        this.maxLayers = maxLayers;        this.controlBit = controlBit;        this.effectID1 = effectID1;        this.effectID2 = effectID2;        this.effectID3 = effectID3;        this.effectID4 = effectID4;        this.effectID5 = effectID5;        this.effect = effect;        this.effectDelay = effectDelay;        this.effectPosType = effectPosType;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "BuffConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 27)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("BuffConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var ID: number  = rs.ReadInt();      var name: string  = rs.ReadString();      var desc: string  = rs.ReadString();      var descPara: string  = rs.ReadString();      var imageSet: string  = rs.ReadString();      var Icon: string  = rs.ReadString();      var isIconDisplay: boolean  = rs.ReadBool();      var friendlyLevel: number  = rs.ReadInt();      var dispelType: number  = rs.ReadInt();      var time: number  = rs.ReadInt();      var settlePriority: number  = rs.ReadInt();      var settleType: number  = rs.ReadInt();      var timeType: number  = rs.ReadInt();      var group: number  = rs.ReadInt();      var groupPriority: number  = rs.ReadInt();      var liveStyle: number  = rs.ReadInt();      var defaultLayers: number  = rs.ReadInt();      var maxLayers: number  = rs.ReadInt();      var controlBit: number  = rs.ReadInt();      var effectID1: number  = rs.ReadInt();      var effectID2: number  = rs.ReadInt();      var effectID3: number  = rs.ReadInt();      var effectID4: number  = rs.ReadInt();      var effectID5: number  = rs.ReadInt();      var effect: number  = rs.ReadInt();      var effectDelay: number  = rs.ReadInt();      var effectPosType: number  = rs.ReadInt();      var  new_obj_BuffConfig : BuffConfig = new BuffConfig(ID, name, desc, descPara, imageSet, Icon, isIconDisplay, friendlyLevel, dispelType, time, settlePriority, settleType, timeType, group, groupPriority, liveStyle, defaultLayers, maxLayers, controlBit, effectID1, effectID2, effectID3, effectID4, effectID5, effect, effectDelay, effectPosType);                if(this.ContainsKey(ID))        {            return;        }		this.dic[ID]= new_obj_BuffConfig;        this.array.push(new_obj_BuffConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="BuffConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):BuffConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}