class PreloadReourceConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<PreloadReourceConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly name:string[];    public readonly proxy:number;    public constructor(id : number , name : string[] , proxy : number ){		super()        this.id = id;        this.name = name;        this.proxy = proxy;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "PreloadReourceConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 3)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("PreloadReourceConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_PreloadReourceConfig:number;      var id: number  = rs.ReadInt();        arr_item_len_PreloadReourceConfig = rs.ReadShort();    var  name :  string[] = [];        for(var i = 0; i < arr_item_len_PreloadReourceConfig; ++i)            name[i] = rs.ReadString();      var proxy: number  = rs.ReadInt();      var  new_obj_PreloadReourceConfig : PreloadReourceConfig = new PreloadReourceConfig(id, name, proxy);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_PreloadReourceConfig;        this.array.push(new_obj_PreloadReourceConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="PreloadReourceConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):PreloadReourceConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}