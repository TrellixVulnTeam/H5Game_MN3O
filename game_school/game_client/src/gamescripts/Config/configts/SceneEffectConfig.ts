class SceneEffectConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<SceneEffectConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly type:number;    public readonly para1:number;    public readonly para2:number;    public readonly para3:number;    public readonly para4:number;    public readonly para5:number;    public constructor(id : number , type : number , para1 : number , para2 : number , para3 : number , para4 : number , para5 : number ){		super()        this.id = id;        this.type = type;        this.para1 = para1;        this.para2 = para2;        this.para3 = para3;        this.para4 = para4;        this.para5 = para5;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "SceneEffectConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 7)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("SceneEffectConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var id: number  = rs.ReadInt();      var type: number  = rs.ReadInt();      var para1: number  = rs.ReadInt();      var para2: number  = rs.ReadInt();      var para3: number  = rs.ReadInt();      var para4: number  = rs.ReadInt();      var para5: number  = rs.ReadFloat();      var  new_obj_SceneEffectConfig : SceneEffectConfig = new SceneEffectConfig(id, type, para1, para2, para3, para4, para5);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_SceneEffectConfig;        this.array.push(new_obj_SceneEffectConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="SceneEffectConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):SceneEffectConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}