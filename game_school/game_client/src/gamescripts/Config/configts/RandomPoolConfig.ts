class RandomPoolConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<RandomPoolConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly comment:string;    public readonly randNum:number;    public readonly item1:number[];    public readonly item2:number[];    public readonly item3:number[];    public readonly item4:number[];    public readonly item5:number[];    public readonly item6:number[];    public readonly item7:number[];    public readonly item8:number[];    public readonly item9:number[];    public readonly item10:number[];    public readonly item11:number[];    public readonly item12:number[];    public readonly item13:number[];    public readonly item14:number[];    public readonly item15:number[];    public readonly item16:number[];    public readonly item17:number[];    public readonly item18:number[];    public readonly item19:number[];    public readonly item20:number[];    public constructor(id : number , comment : string , randNum : number , item1 : number[] , item2 : number[] , item3 : number[] , item4 : number[] , item5 : number[] , item6 : number[] , item7 : number[] , item8 : number[] , item9 : number[] , item10 : number[] , item11 : number[] , item12 : number[] , item13 : number[] , item14 : number[] , item15 : number[] , item16 : number[] , item17 : number[] , item18 : number[] , item19 : number[] , item20 : number[] ){		super()        this.id = id;        this.comment = comment;        this.randNum = randNum;        this.item1 = item1;        this.item2 = item2;        this.item3 = item3;        this.item4 = item4;        this.item5 = item5;        this.item6 = item6;        this.item7 = item7;        this.item8 = item8;        this.item9 = item9;        this.item10 = item10;        this.item11 = item11;        this.item12 = item12;        this.item13 = item13;        this.item14 = item14;        this.item15 = item15;        this.item16 = item16;        this.item17 = item17;        this.item18 = item18;        this.item19 = item19;        this.item20 = item20;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "RandomPoolConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 23)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("RandomPoolConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_RandomPoolConfig:number;      var id: number  = rs.ReadInt();      var comment: string  = rs.ReadString();      var randNum: number  = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item1 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item1[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item2 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item2[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item3 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item3[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item4 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item4[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item5 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item5[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item6 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item6[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item7 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item7[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item8 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item8[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item9 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item9[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item10 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item10[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item11 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item11[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item12 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item12[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item13 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item13[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item14 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item14[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item15 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item15[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item16 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item16[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item17 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item17[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item18 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item18[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item19 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item19[i] = rs.ReadInt();        arr_item_len_RandomPoolConfig = rs.ReadShort();    var  item20 :  number[] = [];        for(var i = 0; i < arr_item_len_RandomPoolConfig; ++i)            item20[i] = rs.ReadInt();      var  new_obj_RandomPoolConfig : RandomPoolConfig = new RandomPoolConfig(id, comment, randNum, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13, item14, item15, item16, item17, item18, item19, item20);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_RandomPoolConfig;        this.array.push(new_obj_RandomPoolConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="RandomPoolConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):RandomPoolConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}