class CreatureAttrTypeConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<CreatureAttrTypeConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly life:number;    public readonly damage:number;    public readonly physical_defence:number;    public readonly spell_defence:number;    public readonly crit_amount:number;    public readonly toughness_amout:number;    public readonly shot_speed:number;    public readonly linking_skills_probability:number;    public readonly damage_reduction:number;    public readonly deeper_damage:number;    public readonly crit_chance:number;    public readonly toughness_chance:number;    public readonly crit_damage:number;    public readonly crit_reduced_amount:number;    public readonly treatment_effect:number;    public readonly break_strength:number;    public readonly break_resistance:number;    public constructor(id : number , life : number , damage : number , physical_defence : number , spell_defence : number , crit_amount : number , toughness_amout : number , shot_speed : number , linking_skills_probability : number , damage_reduction : number , deeper_damage : number , crit_chance : number , toughness_chance : number , crit_damage : number , crit_reduced_amount : number , treatment_effect : number , break_strength : number , break_resistance : number ){		super()        this.id = id;        this.life = life;        this.damage = damage;        this.physical_defence = physical_defence;        this.spell_defence = spell_defence;        this.crit_amount = crit_amount;        this.toughness_amout = toughness_amout;        this.shot_speed = shot_speed;        this.linking_skills_probability = linking_skills_probability;        this.damage_reduction = damage_reduction;        this.deeper_damage = deeper_damage;        this.crit_chance = crit_chance;        this.toughness_chance = toughness_chance;        this.crit_damage = crit_damage;        this.crit_reduced_amount = crit_reduced_amount;        this.treatment_effect = treatment_effect;        this.break_strength = break_strength;        this.break_resistance = break_resistance;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "CreatureAttrTypeConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 18)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("CreatureAttrTypeConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var id: number  = rs.ReadInt();      var life: number  = rs.ReadFloat();      var damage: number  = rs.ReadFloat();      var physical_defence: number  = rs.ReadFloat();      var spell_defence: number  = rs.ReadFloat();      var crit_amount: number  = rs.ReadFloat();      var toughness_amout: number  = rs.ReadFloat();      var shot_speed: number  = rs.ReadFloat();      var linking_skills_probability: number  = rs.ReadFloat();      var damage_reduction: number  = rs.ReadFloat();      var deeper_damage: number  = rs.ReadFloat();      var crit_chance: number  = rs.ReadFloat();      var toughness_chance: number  = rs.ReadFloat();      var crit_damage: number  = rs.ReadFloat();      var crit_reduced_amount: number  = rs.ReadFloat();      var treatment_effect: number  = rs.ReadFloat();      var break_strength: number  = rs.ReadFloat();      var break_resistance: number  = rs.ReadFloat();      var  new_obj_CreatureAttrTypeConfig : CreatureAttrTypeConfig = new CreatureAttrTypeConfig(id, life, damage, physical_defence, spell_defence, crit_amount, toughness_amout, shot_speed, linking_skills_probability, damage_reduction, deeper_damage, crit_chance, toughness_chance, crit_damage, crit_reduced_amount, treatment_effect, break_strength, break_resistance);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_CreatureAttrTypeConfig;        this.array.push(new_obj_CreatureAttrTypeConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="CreatureAttrTypeConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):CreatureAttrTypeConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}