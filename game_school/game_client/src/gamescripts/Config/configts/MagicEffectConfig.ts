class MagicEffectConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<MagicEffectConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly ID:number;    public readonly objectType:number;    public readonly objectType2:number;    public readonly objectNum:number;    public readonly effect:number[];    public readonly effectDelay:number[];    public readonly effectPosType:number[];    public readonly effect_colour:string;    public readonly effect_colour_time1:number;    public readonly effect_colour_time2:number;    public readonly delay:number;    public readonly effectBits:number;    public readonly hitBuff1:number;    public readonly hitBuff2:number;    public readonly hitBuff3:number;    public readonly hitBuffChance1:number;    public readonly hitBuffChance2:number;    public readonly hitBuffChance3:number;    public readonly dispelBit:number;    public readonly hurtPercentage:number;    public readonly hurtValue:number;    public readonly additionalHurtType:number;    public readonly hurtPercentageMods:string;    public readonly hurtValueMods:string;    public readonly curePercentage:number;    public readonly cureValue:number;    public readonly curePercentageMods:string;    public readonly cureValueMods:string;    public constructor(ID : number , objectType : number , objectType2 : number , objectNum : number , effect : number[] , effectDelay : number[] , effectPosType : number[] , effect_colour : string , effect_colour_time1 : number , effect_colour_time2 : number , delay : number , effectBits : number , hitBuff1 : number , hitBuff2 : number , hitBuff3 : number , hitBuffChance1 : number , hitBuffChance2 : number , hitBuffChance3 : number , dispelBit : number , hurtPercentage : number , hurtValue : number , additionalHurtType : number , hurtPercentageMods : string , hurtValueMods : string , curePercentage : number , cureValue : number , curePercentageMods : string , cureValueMods : string ){		super()        this.ID = ID;        this.objectType = objectType;        this.objectType2 = objectType2;        this.objectNum = objectNum;        this.effect = effect;        this.effectDelay = effectDelay;        this.effectPosType = effectPosType;        this.effect_colour = effect_colour;        this.effect_colour_time1 = effect_colour_time1;        this.effect_colour_time2 = effect_colour_time2;        this.delay = delay;        this.effectBits = effectBits;        this.hitBuff1 = hitBuff1;        this.hitBuff2 = hitBuff2;        this.hitBuff3 = hitBuff3;        this.hitBuffChance1 = hitBuffChance1;        this.hitBuffChance2 = hitBuffChance2;        this.hitBuffChance3 = hitBuffChance3;        this.dispelBit = dispelBit;        this.hurtPercentage = hurtPercentage;        this.hurtValue = hurtValue;        this.additionalHurtType = additionalHurtType;        this.hurtPercentageMods = hurtPercentageMods;        this.hurtValueMods = hurtValueMods;        this.curePercentage = curePercentage;        this.cureValue = cureValue;        this.curePercentageMods = curePercentageMods;        this.cureValueMods = cureValueMods;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "MagicEffectConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 28)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("MagicEffectConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_MagicEffectConfig:number;      var ID: number  = rs.ReadInt();      var objectType: number  = rs.ReadInt();      var objectType2: number  = rs.ReadInt();      var objectNum: number  = rs.ReadInt();        arr_item_len_MagicEffectConfig = rs.ReadShort();    var  effect :  number[] = [];        for(var i = 0; i < arr_item_len_MagicEffectConfig; ++i)            effect[i] = rs.ReadInt();        arr_item_len_MagicEffectConfig = rs.ReadShort();    var  effectDelay :  number[] = [];        for(var i = 0; i < arr_item_len_MagicEffectConfig; ++i)            effectDelay[i] = rs.ReadInt();        arr_item_len_MagicEffectConfig = rs.ReadShort();    var  effectPosType :  number[] = [];        for(var i = 0; i < arr_item_len_MagicEffectConfig; ++i)            effectPosType[i] = rs.ReadInt();      var effect_colour: string  = rs.ReadString();      var effect_colour_time1: number  = rs.ReadInt();      var effect_colour_time2: number  = rs.ReadInt();      var delay: number  = rs.ReadInt();      var effectBits: number  = rs.ReadInt();      var hitBuff1: number  = rs.ReadInt();      var hitBuff2: number  = rs.ReadInt();      var hitBuff3: number  = rs.ReadInt();      var hitBuffChance1: number  = rs.ReadFloat();      var hitBuffChance2: number  = rs.ReadFloat();      var hitBuffChance3: number  = rs.ReadFloat();      var dispelBit: number  = rs.ReadInt();      var hurtPercentage: number  = rs.ReadInt();      var hurtValue: number  = rs.ReadInt();      var additionalHurtType: number  = rs.ReadInt();      var hurtPercentageMods: string  = rs.ReadString();      var hurtValueMods: string  = rs.ReadString();      var curePercentage: number  = rs.ReadInt();      var cureValue: number  = rs.ReadInt();      var curePercentageMods: string  = rs.ReadString();      var cureValueMods: string  = rs.ReadString();      var  new_obj_MagicEffectConfig : MagicEffectConfig = new MagicEffectConfig(ID, objectType, objectType2, objectNum, effect, effectDelay, effectPosType, effect_colour, effect_colour_time1, effect_colour_time2, delay, effectBits, hitBuff1, hitBuff2, hitBuff3, hitBuffChance1, hitBuffChance2, hitBuffChance3, dispelBit, hurtPercentage, hurtValue, additionalHurtType, hurtPercentageMods, hurtValueMods, curePercentage, cureValue, curePercentageMods, cureValueMods);                if(this.ContainsKey(ID))        {            return;        }		this.dic[ID]= new_obj_MagicEffectConfig;        this.array.push(new_obj_MagicEffectConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="MagicEffectConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):MagicEffectConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}