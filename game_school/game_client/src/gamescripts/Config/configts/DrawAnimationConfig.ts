class DrawAnimationConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<DrawAnimationConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly drawID:number;    public readonly drawScale:number;    public readonly type:number;    public readonly face:number;    public readonly sound:string[];    public readonly soundDelay:number[];    public readonly liveTime:number;    public readonly extraResource1:string;    public constructor(id : number , drawID : number , drawScale : number , type : number , face : number , sound : string[] , soundDelay : number[] , liveTime : number , extraResource1 : string ){		super()        this.id = id;        this.drawID = drawID;        this.drawScale = drawScale;        this.type = type;        this.face = face;        this.sound = sound;        this.soundDelay = soundDelay;        this.liveTime = liveTime;        this.extraResource1 = extraResource1;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "DrawAnimationConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 9)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("DrawAnimationConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_DrawAnimationConfig:number;      var id: number  = rs.ReadInt();      var drawID: number  = rs.ReadInt();      var drawScale: number  = rs.ReadFloat();      var type: number  = rs.ReadInt();      var face: number  = rs.ReadInt();        arr_item_len_DrawAnimationConfig = rs.ReadShort();    var  sound :  string[] = [];        for(var i = 0; i < arr_item_len_DrawAnimationConfig; ++i)            sound[i] = rs.ReadString();        arr_item_len_DrawAnimationConfig = rs.ReadShort();    var  soundDelay :  number[] = [];        for(var i = 0; i < arr_item_len_DrawAnimationConfig; ++i)            soundDelay[i] = rs.ReadInt();      var liveTime: number  = rs.ReadInt();      var extraResource1: string  = rs.ReadString();      var  new_obj_DrawAnimationConfig : DrawAnimationConfig = new DrawAnimationConfig(id, drawID, drawScale, type, face, sound, soundDelay, liveTime, extraResource1);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_DrawAnimationConfig;        this.array.push(new_obj_DrawAnimationConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="DrawAnimationConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):DrawAnimationConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}