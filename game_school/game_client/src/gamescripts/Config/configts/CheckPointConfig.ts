class CheckPointConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<CheckPointConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly chapter:number;    public readonly checkpoint_name:string;    public readonly coordinate:number[];    public readonly checkpoint_type:number;    public readonly front_id:number;    public readonly unlockLevel:number;    public readonly battle_bg:string;    public readonly plot:number;    public readonly battle:number[];    public readonly request:number[];    public readonly awardAttr:number;    public readonly suggestPower:number;    public readonly consume:number;    public readonly dailyChance:number;    public readonly exp:number;    public readonly money:number;    public readonly frist_reward:number;    public readonly normal_reward:number;    public constructor(id : number , chapter : number , checkpoint_name : string , coordinate : number[] , checkpoint_type : number , front_id : number , unlockLevel : number , battle_bg : string , plot : number , battle : number[] , request : number[] , awardAttr : number , suggestPower : number , consume : number , dailyChance : number , exp : number , money : number , frist_reward : number , normal_reward : number ){		super()        this.id = id;        this.chapter = chapter;        this.checkpoint_name = checkpoint_name;        this.coordinate = coordinate;        this.checkpoint_type = checkpoint_type;        this.front_id = front_id;        this.unlockLevel = unlockLevel;        this.battle_bg = battle_bg;        this.plot = plot;        this.battle = battle;        this.request = request;        this.awardAttr = awardAttr;        this.suggestPower = suggestPower;        this.consume = consume;        this.dailyChance = dailyChance;        this.exp = exp;        this.money = money;        this.frist_reward = frist_reward;        this.normal_reward = normal_reward;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "CheckPointConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 19)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("CheckPointConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_CheckPointConfig:number;      var id: number  = rs.ReadInt();      var chapter: number  = rs.ReadInt();      var checkpoint_name: string  = rs.ReadString();        arr_item_len_CheckPointConfig = rs.ReadShort();    var  coordinate :  number[] = [];        for(var i = 0; i < arr_item_len_CheckPointConfig; ++i)            coordinate[i] = rs.ReadInt();      var checkpoint_type: number  = rs.ReadInt();      var front_id: number  = rs.ReadInt();      var unlockLevel: number  = rs.ReadInt();      var battle_bg: string  = rs.ReadString();      var plot: number  = rs.ReadInt();        arr_item_len_CheckPointConfig = rs.ReadShort();    var  battle :  number[] = [];        for(var i = 0; i < arr_item_len_CheckPointConfig; ++i)            battle[i] = rs.ReadInt();        arr_item_len_CheckPointConfig = rs.ReadShort();    var  request :  number[] = [];        for(var i = 0; i < arr_item_len_CheckPointConfig; ++i)            request[i] = rs.ReadInt();      var awardAttr: number  = rs.ReadInt();      var suggestPower: number  = rs.ReadInt();      var consume: number  = rs.ReadInt();      var dailyChance: number  = rs.ReadInt();      var exp: number  = rs.ReadInt();      var money: number  = rs.ReadInt();      var frist_reward: number  = rs.ReadInt();      var normal_reward: number  = rs.ReadInt();      var  new_obj_CheckPointConfig : CheckPointConfig = new CheckPointConfig(id, chapter, checkpoint_name, coordinate, checkpoint_type, front_id, unlockLevel, battle_bg, plot, battle, request, awardAttr, suggestPower, consume, dailyChance, exp, money, frist_reward, normal_reward);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_CheckPointConfig;        this.array.push(new_obj_CheckPointConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="CheckPointConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):CheckPointConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}