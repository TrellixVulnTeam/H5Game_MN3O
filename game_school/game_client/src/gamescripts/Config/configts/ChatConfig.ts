class ChatConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<ChatConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly chatId:number;    public readonly nextId:number;    public readonly chatType:number;    public readonly type:number;    public readonly head:string;    public readonly name:string;    public readonly npcDialogType:number;    public readonly content:string;    public readonly voice:string;    public readonly playerDialogType:number;    public readonly optionID:number;    public constructor(chatId : number , nextId : number , chatType : number , type : number , head : string , name : string , npcDialogType : number , content : string , voice : string , playerDialogType : number , optionID : number ){		super()        this.chatId = chatId;        this.nextId = nextId;        this.chatType = chatType;        this.type = type;        this.head = head;        this.name = name;        this.npcDialogType = npcDialogType;        this.content = content;        this.voice = voice;        this.playerDialogType = playerDialogType;        this.optionID = optionID;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "ChatConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 11)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("ChatConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var chatId: number  = rs.ReadInt();      var nextId: number  = rs.ReadInt();      var chatType: number  = rs.ReadInt();      var type: number  = rs.ReadInt();      var head: string  = rs.ReadString();      var name: string  = rs.ReadString();      var npcDialogType: number  = rs.ReadInt();      var content: string  = rs.ReadString();      var voice: string  = rs.ReadString();      var playerDialogType: number  = rs.ReadInt();      var optionID: number  = rs.ReadInt();      var  new_obj_ChatConfig : ChatConfig = new ChatConfig(chatId, nextId, chatType, type, head, name, npcDialogType, content, voice, playerDialogType, optionID);                if(this.ContainsKey(chatId))        {            return;        }		this.dic[chatId]= new_obj_ChatConfig;        this.array.push(new_obj_ChatConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="ChatConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):ChatConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}