class AttributeFormatConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<AttributeFormatConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly attr:string;    public readonly format:number;    public readonly canBeNegative:number;    public readonly tips:string;    public readonly weight:number;    public readonly num_color1:string;    public readonly num_color2:string;    public constructor(id : number , attr : string , format : number , canBeNegative : number , tips : string , weight : number , num_color1 : string , num_color2 : string ){		super()        this.id = id;        this.attr = attr;        this.format = format;        this.canBeNegative = canBeNegative;        this.tips = tips;        this.weight = weight;        this.num_color1 = num_color1;        this.num_color2 = num_color2;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "AttributeFormatConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 8)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("AttributeFormatConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {               var id: number  = rs.ReadInt();      var attr: string  = rs.ReadString();      var format: number  = rs.ReadInt();      var canBeNegative: number  = rs.ReadInt();      var tips: string  = rs.ReadString();      var weight: number  = rs.ReadFloat();      var num_color1: string  = rs.ReadString();      var num_color2: string  = rs.ReadString();      var  new_obj_AttributeFormatConfig : AttributeFormatConfig = new AttributeFormatConfig(id, attr, format, canBeNegative, tips, weight, num_color1, num_color2);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_AttributeFormatConfig;        this.array.push(new_obj_AttributeFormatConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="AttributeFormatConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):AttributeFormatConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}