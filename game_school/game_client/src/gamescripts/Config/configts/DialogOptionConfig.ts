class DialogOptionConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<DialogOptionConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly optionID:number;    public readonly option1:number;    public readonly optionContent1:string;    public readonly optionContent2:string;    public readonly optionContent3:string;    public readonly optionContent4:string;    public readonly nextDialog1:number;    public readonly nextDialog2:number;    public readonly nextDialog3:number;    public readonly nextDialog4:number;    public readonly reward:number[];    public readonly reward_num:number[];    public constructor(optionID : number , option1 : number , optionContent1 : string , optionContent2 : string , optionContent3 : string , optionContent4 : string , nextDialog1 : number , nextDialog2 : number , nextDialog3 : number , nextDialog4 : number , reward : number[] , reward_num : number[] ){		super()        this.optionID = optionID;        this.option1 = option1;        this.optionContent1 = optionContent1;        this.optionContent2 = optionContent2;        this.optionContent3 = optionContent3;        this.optionContent4 = optionContent4;        this.nextDialog1 = nextDialog1;        this.nextDialog2 = nextDialog2;        this.nextDialog3 = nextDialog3;        this.nextDialog4 = nextDialog4;        this.reward = reward;        this.reward_num = reward_num;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "DialogOptionConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 12)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("DialogOptionConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_DialogOptionConfig:number;      var optionID: number  = rs.ReadInt();      var option1: number  = rs.ReadInt();      var optionContent1: string  = rs.ReadString();      var optionContent2: string  = rs.ReadString();      var optionContent3: string  = rs.ReadString();      var optionContent4: string  = rs.ReadString();      var nextDialog1: number  = rs.ReadInt();      var nextDialog2: number  = rs.ReadInt();      var nextDialog3: number  = rs.ReadInt();      var nextDialog4: number  = rs.ReadInt();        arr_item_len_DialogOptionConfig = rs.ReadShort();    var  reward :  number[] = [];        for(var i = 0; i < arr_item_len_DialogOptionConfig; ++i)            reward[i] = rs.ReadInt();        arr_item_len_DialogOptionConfig = rs.ReadShort();    var  reward_num :  number[] = [];        for(var i = 0; i < arr_item_len_DialogOptionConfig; ++i)            reward_num[i] = rs.ReadInt();      var  new_obj_DialogOptionConfig : DialogOptionConfig = new DialogOptionConfig(optionID, option1, optionContent1, optionContent2, optionContent3, optionContent4, nextDialog1, nextDialog2, nextDialog3, nextDialog4, reward, reward_num);                if(this.ContainsKey(optionID))        {            return;        }		this.dic[optionID]= new_obj_DialogOptionConfig;        this.array.push(new_obj_DialogOptionConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="DialogOptionConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):DialogOptionConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}