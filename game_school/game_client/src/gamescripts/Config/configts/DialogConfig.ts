class DialogConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<DialogConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly dialogID:number;    public readonly nextDialogID:number;    public readonly dialogType:number;    public readonly optionID:number;    public readonly cgPath:string;    public readonly npcID:number;    public readonly npcName:string;    public readonly faceIndex:number;    public readonly faceSymbol:number;    public readonly faceSymbolPos:number;    public readonly pos:number;    public readonly content:string;    public readonly background:string;    public readonly sound:string;    public readonly soundDelay:number;    public readonly voice:string;    public readonly music:string;    public readonly startSceneEffect:number[];    public readonly endSceneEffect:number[];    public constructor(dialogID : number , nextDialogID : number , dialogType : number , optionID : number , cgPath : string , npcID : number , npcName : string , faceIndex : number , faceSymbol : number , faceSymbolPos : number , pos : number , content : string , background : string , sound : string , soundDelay : number , voice : string , music : string , startSceneEffect : number[] , endSceneEffect : number[] ){		super()        this.dialogID = dialogID;        this.nextDialogID = nextDialogID;        this.dialogType = dialogType;        this.optionID = optionID;        this.cgPath = cgPath;        this.npcID = npcID;        this.npcName = npcName;        this.faceIndex = faceIndex;        this.faceSymbol = faceSymbol;        this.faceSymbolPos = faceSymbolPos;        this.pos = pos;        this.content = content;        this.background = background;        this.sound = sound;        this.soundDelay = soundDelay;        this.voice = voice;        this.music = music;        this.startSceneEffect = startSceneEffect;        this.endSceneEffect = endSceneEffect;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "DialogConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 19)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("DialogConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_DialogConfig:number;      var dialogID: number  = rs.ReadInt();      var nextDialogID: number  = rs.ReadInt();      var dialogType: number  = rs.ReadInt();      var optionID: number  = rs.ReadInt();      var cgPath: string  = rs.ReadString();      var npcID: number  = rs.ReadInt();      var npcName: string  = rs.ReadString();      var faceIndex: number  = rs.ReadInt();      var faceSymbol: number  = rs.ReadInt();      var faceSymbolPos: number  = rs.ReadInt();      var pos: number  = rs.ReadInt();      var content: string  = rs.ReadString();      var background: string  = rs.ReadString();      var sound: string  = rs.ReadString();      var soundDelay: number  = rs.ReadInt();      var voice: string  = rs.ReadString();      var music: string  = rs.ReadString();        arr_item_len_DialogConfig = rs.ReadShort();    var  startSceneEffect :  number[] = [];        for(var i = 0; i < arr_item_len_DialogConfig; ++i)            startSceneEffect[i] = rs.ReadInt();        arr_item_len_DialogConfig = rs.ReadShort();    var  endSceneEffect :  number[] = [];        for(var i = 0; i < arr_item_len_DialogConfig; ++i)            endSceneEffect[i] = rs.ReadInt();      var  new_obj_DialogConfig : DialogConfig = new DialogConfig(dialogID, nextDialogID, dialogType, optionID, cgPath, npcID, npcName, faceIndex, faceSymbol, faceSymbolPos, pos, content, background, sound, soundDelay, voice, music, startSceneEffect, endSceneEffect);                if(this.ContainsKey(dialogID))        {            return;        }		this.dic[dialogID]= new_obj_DialogConfig;        this.array.push(new_obj_DialogConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="DialogConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):DialogConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}