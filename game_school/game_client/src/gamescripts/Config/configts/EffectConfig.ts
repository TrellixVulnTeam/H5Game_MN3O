class EffectConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<EffectConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly ID:number;    public readonly resourcesGroup:string;    public readonly effectResources:string;    public readonly position:number[];    public readonly repeat:number;    public readonly layer:number;    public readonly scale:number;    public constructor(ID : number , resourcesGroup : string , effectResources : string , position : number[] , repeat : number , layer : number , scale : number ){		super()        this.ID = ID;        this.resourcesGroup = resourcesGroup;        this.effectResources = effectResources;        this.position = position;        this.repeat = repeat;        this.layer = layer;        this.scale = scale;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "EffectConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 7)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("EffectConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_EffectConfig:number;      var ID: number  = rs.ReadInt();      var resourcesGroup: string  = rs.ReadString();      var effectResources: string  = rs.ReadString();        arr_item_len_EffectConfig = rs.ReadShort();    var  position :  number[] = [];        for(var i = 0; i < arr_item_len_EffectConfig; ++i)            position[i] = rs.ReadFloat();      var repeat: number  = rs.ReadInt();      var layer: number  = rs.ReadInt();      var scale: number  = rs.ReadFloat();      var  new_obj_EffectConfig : EffectConfig = new EffectConfig(ID, resourcesGroup, effectResources, position, repeat, layer, scale);                if(this.ContainsKey(ID))        {            return;        }		this.dic[ID]= new_obj_EffectConfig;        this.array.push(new_obj_EffectConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="EffectConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):EffectConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}