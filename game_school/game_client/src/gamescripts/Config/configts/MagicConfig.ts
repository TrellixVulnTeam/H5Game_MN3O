class MagicConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<MagicConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly ID:number;    public readonly name:string;    public readonly describe:string;    public readonly imageSet:string;    public readonly Icon:string;    public readonly type:number;    public readonly cd:number;    public readonly cdInit:number;    public readonly magicAura:number;    public readonly magicBuff:number;    public readonly autoSkillPriority:number;    public readonly ifCombo:boolean;    public readonly comboSkillPriority:number;    public readonly triggerTime:number;    public readonly triggerChance:number;    public readonly triggerSkillPriority:number;    public readonly ifEnlarge:boolean;    public readonly ifAnimation:boolean;    public readonly AnimationType:number;    public readonly animationDraw:number;    public readonly rolePosType:number;    public readonly rolePosition:number[];    public readonly active:string;    public readonly effect:number[];    public readonly effectDelay:number[];    public readonly effctPosType:number[];    public readonly effectID:number[];    public readonly sound:string[];    public readonly soundDelay:number[];    public constructor(ID : number , name : string , describe : string , imageSet : string , Icon : string , type : number , cd : number , cdInit : number , magicAura : number , magicBuff : number , autoSkillPriority : number , ifCombo : boolean , comboSkillPriority : number , triggerTime : number , triggerChance : number , triggerSkillPriority : number , ifEnlarge : boolean , ifAnimation : boolean , AnimationType : number , animationDraw : number , rolePosType : number , rolePosition : number[] , active : string , effect : number[] , effectDelay : number[] , effctPosType : number[] , effectID : number[] , sound : string[] , soundDelay : number[] ){		super()        this.ID = ID;        this.name = name;        this.describe = describe;        this.imageSet = imageSet;        this.Icon = Icon;        this.type = type;        this.cd = cd;        this.cdInit = cdInit;        this.magicAura = magicAura;        this.magicBuff = magicBuff;        this.autoSkillPriority = autoSkillPriority;        this.ifCombo = ifCombo;        this.comboSkillPriority = comboSkillPriority;        this.triggerTime = triggerTime;        this.triggerChance = triggerChance;        this.triggerSkillPriority = triggerSkillPriority;        this.ifEnlarge = ifEnlarge;        this.ifAnimation = ifAnimation;        this.AnimationType = AnimationType;        this.animationDraw = animationDraw;        this.rolePosType = rolePosType;        this.rolePosition = rolePosition;        this.active = active;        this.effect = effect;        this.effectDelay = effectDelay;        this.effctPosType = effctPosType;        this.effectID = effectID;        this.sound = sound;        this.soundDelay = soundDelay;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "MagicConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 29)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("MagicConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_MagicConfig:number;      var ID: number  = rs.ReadInt();      var name: string  = rs.ReadString();      var describe: string  = rs.ReadString();      var imageSet: string  = rs.ReadString();      var Icon: string  = rs.ReadString();      var type: number  = rs.ReadInt();      var cd: number  = rs.ReadInt();      var cdInit: number  = rs.ReadInt();      var magicAura: number  = rs.ReadInt();      var magicBuff: number  = rs.ReadInt();      var autoSkillPriority: number  = rs.ReadInt();      var ifCombo: boolean  = rs.ReadBool();      var comboSkillPriority: number  = rs.ReadInt();      var triggerTime: number  = rs.ReadInt();      var triggerChance: number  = rs.ReadFloat();      var triggerSkillPriority: number  = rs.ReadInt();      var ifEnlarge: boolean  = rs.ReadBool();      var ifAnimation: boolean  = rs.ReadBool();      var AnimationType: number  = rs.ReadInt();      var animationDraw: number  = rs.ReadInt();      var rolePosType: number  = rs.ReadInt();        arr_item_len_MagicConfig = rs.ReadShort();    var  rolePosition :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            rolePosition[i] = rs.ReadFloat();      var active: string  = rs.ReadString();        arr_item_len_MagicConfig = rs.ReadShort();    var  effect :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            effect[i] = rs.ReadInt();        arr_item_len_MagicConfig = rs.ReadShort();    var  effectDelay :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            effectDelay[i] = rs.ReadInt();        arr_item_len_MagicConfig = rs.ReadShort();    var  effctPosType :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            effctPosType[i] = rs.ReadInt();        arr_item_len_MagicConfig = rs.ReadShort();    var  effectID :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            effectID[i] = rs.ReadInt();        arr_item_len_MagicConfig = rs.ReadShort();    var  sound :  string[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            sound[i] = rs.ReadString();        arr_item_len_MagicConfig = rs.ReadShort();    var  soundDelay :  number[] = [];        for(var i = 0; i < arr_item_len_MagicConfig; ++i)            soundDelay[i] = rs.ReadInt();      var  new_obj_MagicConfig : MagicConfig = new MagicConfig(ID, name, describe, imageSet, Icon, type, cd, cdInit, magicAura, magicBuff, autoSkillPriority, ifCombo, comboSkillPriority, triggerTime, triggerChance, triggerSkillPriority, ifEnlarge, ifAnimation, AnimationType, animationDraw, rolePosType, rolePosition, active, effect, effectDelay, effctPosType, effectID, sound, soundDelay);                if(this.ContainsKey(ID))        {            return;        }		this.dic[ID]= new_obj_MagicConfig;        this.array.push(new_obj_MagicConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="MagicConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):MagicConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}