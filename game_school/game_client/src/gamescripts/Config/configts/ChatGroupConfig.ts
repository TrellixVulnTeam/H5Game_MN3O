class ChatGroupConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<ChatGroupConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly chatID:number;    public readonly type:number;    public readonly belong:number;    public readonly chatName:string;    public readonly startChatID:number;    public readonly triggerType:number;    public readonly param1:number;    public readonly param2:number;    public readonly param3:number;    public readonly param4:number;    public readonly param5:number;    public readonly reward:number[];    public readonly reward_num:number[];    public constructor(chatID : number , type : number , belong : number , chatName : string , startChatID : number , triggerType : number , param1 : number , param2 : number , param3 : number , param4 : number , param5 : number , reward : number[] , reward_num : number[] ){		super()        this.chatID = chatID;        this.type = type;        this.belong = belong;        this.chatName = chatName;        this.startChatID = startChatID;        this.triggerType = triggerType;        this.param1 = param1;        this.param2 = param2;        this.param3 = param3;        this.param4 = param4;        this.param5 = param5;        this.reward = reward;        this.reward_num = reward_num;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "ChatGroupConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 13)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("ChatGroupConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_ChatGroupConfig:number;      var chatID: number  = rs.ReadInt();      var type: number  = rs.ReadInt();      var belong: number  = rs.ReadInt();      var chatName: string  = rs.ReadString();      var startChatID: number  = rs.ReadInt();      var triggerType: number  = rs.ReadInt();      var param1: number  = rs.ReadInt();      var param2: number  = rs.ReadInt();      var param3: number  = rs.ReadInt();      var param4: number  = rs.ReadFloat();      var param5: number  = rs.ReadFloat();        arr_item_len_ChatGroupConfig = rs.ReadShort();    var  reward :  number[] = [];        for(var i = 0; i < arr_item_len_ChatGroupConfig; ++i)            reward[i] = rs.ReadInt();        arr_item_len_ChatGroupConfig = rs.ReadShort();    var  reward_num :  number[] = [];        for(var i = 0; i < arr_item_len_ChatGroupConfig; ++i)            reward_num[i] = rs.ReadInt();      var  new_obj_ChatGroupConfig : ChatGroupConfig = new ChatGroupConfig(chatID, type, belong, chatName, startChatID, triggerType, param1, param2, param3, param4, param5, reward, reward_num);                if(this.ContainsKey(chatID))        {            return;        }		this.dic[chatID]= new_obj_ChatGroupConfig;        this.array.push(new_obj_ChatGroupConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="ChatGroupConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):ChatGroupConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}