class ModelConfig extends BaseConfig{    public static  resLoaded:boolean = false;    private static  dic: Object = {};  	public static array: Array<ModelConfig> = [];    public static  Init()    {       this. LoadRes();    }    public readonly id:number;    public readonly filename:string;    public readonly bound_center:number[];    public readonly bound_size:number[];    public readonly size:number;    public readonly position:number[];    public readonly animation:string;    public readonly animation2:string;    public readonly animationHurt:string;    public readonly animationHurt2:string;    public constructor(id : number , filename : string , bound_center : number[] , bound_size : number[] , size : number , position : number[] , animation : string , animation2 : string , animationHurt : string , animationHurt2 : string ){		super()        this.id = id;        this.filename = filename;        this.bound_center = bound_center;        this.bound_size = bound_size;        this.size = size;        this.position = position;        this.animation = animation;        this.animation2 = animation2;        this.animationHurt = animationHurt;        this.animationHurt2 = animationHurt2;    }     private static  OnLoadFile( data:any)    { 		var byteData:egret.ByteArray = new egret.ByteArray( data );		var rs:ReadStream = new ReadStream(byteData);        /*int file_len = */rs.ReadInt();        var flag :string= rs.ReadString();        if(flag != "ModelConfig")        {            return;        }        var col_cnt:number = rs.ReadShort();        if(col_cnt != 10)        {            return;        }        var row_cnt:number = rs.ReadInt();        for( var i = 0; i < row_cnt; i++)        {          this.  Add_Item(rs);        }	  ConfFact.SetResLoad("ModelConfig");        this.  resLoaded = true;    }     private static  Add_Item(rs:ReadStream )    {                     var arr_item_len_ModelConfig:number;      var id: number  = rs.ReadInt();      var filename: string  = rs.ReadString();        arr_item_len_ModelConfig = rs.ReadShort();    var  bound_center :  number[] = [];        for(var i = 0; i < arr_item_len_ModelConfig; ++i)            bound_center[i] = rs.ReadFloat();        arr_item_len_ModelConfig = rs.ReadShort();    var  bound_size :  number[] = [];        for(var i = 0; i < arr_item_len_ModelConfig; ++i)            bound_size[i] = rs.ReadFloat();      var size: number  = rs.ReadFloat();        arr_item_len_ModelConfig = rs.ReadShort();    var  position :  number[] = [];        for(var i = 0; i < arr_item_len_ModelConfig; ++i)            position[i] = rs.ReadInt();      var animation: string  = rs.ReadString();      var animation2: string  = rs.ReadString();      var animationHurt: string  = rs.ReadString();      var animationHurt2: string  = rs.ReadString();      var  new_obj_ModelConfig : ModelConfig = new ModelConfig(id, filename, bound_center, bound_size, size, position, animation, animation2, animationHurt, animationHurt2);                if(this.ContainsKey(id))        {            return;        }		this.dic[id]= new_obj_ModelConfig;        this.array.push(new_obj_ModelConfig);    }	private static  LoadRes()    {        if(this.resLoaded) return;		 if(this.isUseLocalTable)        {        var urlName:string = this. bytespath+="ModelConfig.bytes";        RES.getResByUrl(urlName,this.OnLoadFile,this,RES.ResourceItem.TYPE_BIN);        }            }	 public static  GetConfig(  id ):ModelConfig    {        for (var key in this.dic)            {            if(key==id)            {                 return this.dic[key];               }        }        return null;    }		   public static  ContainsKey(  id ):boolean    {        for (var key in this.dic)            {            if(key==id)            {                 return true;            }        }        return false;    }}