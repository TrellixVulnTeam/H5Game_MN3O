// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pwngs/protocol/accsrv/accsrv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pwngs {
namespace protocol {
namespace accsrv {

namespace {

const ::google::protobuf::Descriptor* CSLoginEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTokenLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTokenLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginUserPswd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginUserPswd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLogin173_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLogin173_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginLianYun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginLianYun_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginTencent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginTencent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginXiYou_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginXiYou_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLogin360_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLogin360_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLoginKor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLoginKor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginNew_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EProgramVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELoginType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto() {
  protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pwngs/protocol/accsrv/accsrv.proto");
  GOOGLE_CHECK(file != NULL);
  CSLoginEx_descriptor_ = file->message_type(0);
  static const int CSLoginEx_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, fatigue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, agent_),
  };
  CSLoginEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginEx_descriptor_,
      CSLoginEx::default_instance_,
      CSLoginEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginEx));
  CSLogin_descriptor_ = file->message_type(1);
  static const int CSLogin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, pswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, agent_),
  };
  CSLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLogin_descriptor_,
      CSLogin::default_instance_,
      CSLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLogin));
  SCLoginResult_descriptor_ = file->message_type(2);
  static const int SCLoginResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, suggestion_name_),
  };
  SCLoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCLoginResult_descriptor_,
      SCLoginResult::default_instance_,
      SCLoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCLoginResult));
  CSTokenLogin_descriptor_ = file->message_type(3);
  static const int CSTokenLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTokenLogin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTokenLogin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTokenLogin, token_),
  };
  CSTokenLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTokenLogin_descriptor_,
      CSTokenLogin::default_instance_,
      CSTokenLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTokenLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTokenLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTokenLogin));
  SLoginInformation_descriptor_ = file->message_type(4);
  static const int SLoginInformation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, unique_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, zoneid_),
  };
  SLoginInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginInformation_descriptor_,
      SLoginInformation::default_instance_,
      SLoginInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginInformation));
  SLoginUserPswd_descriptor_ = file->message_type(5);
  static const int SLoginUserPswd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginUserPswd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginUserPswd, pswd_),
  };
  SLoginUserPswd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginUserPswd_descriptor_,
      SLoginUserPswd::default_instance_,
      SLoginUserPswd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginUserPswd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginUserPswd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginUserPswd));
  SLogin173_descriptor_ = file->message_type(6);
  static const int SLogin173_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, fatigue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, signature_),
  };
  SLogin173_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLogin173_descriptor_,
      SLogin173::default_instance_,
      SLogin173_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin173, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLogin173));
  SLoginToken_descriptor_ = file->message_type(7);
  static const int SLoginToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginToken, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginToken, token_),
  };
  SLoginToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginToken_descriptor_,
      SLoginToken::default_instance_,
      SLoginToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginToken));
  SLoginLianYun_descriptor_ = file->message_type(8);
  static const int SLoginLianYun_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, sign_),
  };
  SLoginLianYun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginLianYun_descriptor_,
      SLoginLianYun::default_instance_,
      SLoginLianYun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginLianYun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginLianYun));
  SLoginTencent_descriptor_ = file->message_type(9);
  static const int SLoginTencent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, platform_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, pid_),
  };
  SLoginTencent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginTencent_descriptor_,
      SLoginTencent::default_instance_,
      SLoginTencent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginTencent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginTencent));
  SLoginXiYou_descriptor_ = file->message_type(10);
  static const int SLoginXiYou_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, fcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, exts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, channel_),
  };
  SLoginXiYou_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginXiYou_descriptor_,
      SLoginXiYou::default_instance_,
      SLoginXiYou_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginXiYou, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginXiYou));
  SLogin360_descriptor_ = file->message_type(11);
  static const int SLogin360_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, isadult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, sign_),
  };
  SLogin360_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLogin360_descriptor_,
      SLogin360::default_instance_,
      SLogin360_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLogin360, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLogin360));
  SLoginKor_descriptor_ = file->message_type(12);
  static const int SLoginKor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, fcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, sign_),
  };
  SLoginKor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLoginKor_descriptor_,
      SLoginKor::default_instance_,
      SLoginKor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLoginKor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLoginKor));
  CSLoginNew_descriptor_ = file->message_type(13);
  static const int CSLoginNew_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, loginuserpswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, login173_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, loginlianyun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, logintencent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, loginxiyou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, login360_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, loginkor_),
  };
  CSLoginNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginNew_descriptor_,
      CSLoginNew::default_instance_,
      CSLoginNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginNew));
  EProgramVersion_descriptor_ = file->enum_type(0);
  ELoginType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginEx_descriptor_, &CSLoginEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLogin_descriptor_, &CSLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCLoginResult_descriptor_, &SCLoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTokenLogin_descriptor_, &CSTokenLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginInformation_descriptor_, &SLoginInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginUserPswd_descriptor_, &SLoginUserPswd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLogin173_descriptor_, &SLogin173::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginToken_descriptor_, &SLoginToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginLianYun_descriptor_, &SLoginLianYun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginTencent_descriptor_, &SLoginTencent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginXiYou_descriptor_, &SLoginXiYou::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLogin360_descriptor_, &SLogin360::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLoginKor_descriptor_, &SLoginKor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginNew_descriptor_, &CSLoginNew::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto() {
  delete CSLoginEx::default_instance_;
  delete CSLoginEx_reflection_;
  delete CSLogin::default_instance_;
  delete CSLogin_reflection_;
  delete SCLoginResult::default_instance_;
  delete SCLoginResult_reflection_;
  delete CSTokenLogin::default_instance_;
  delete CSTokenLogin_reflection_;
  delete SLoginInformation::default_instance_;
  delete SLoginInformation_reflection_;
  delete SLoginUserPswd::default_instance_;
  delete SLoginUserPswd_reflection_;
  delete SLogin173::default_instance_;
  delete SLogin173_reflection_;
  delete SLoginToken::default_instance_;
  delete SLoginToken_reflection_;
  delete SLoginLianYun::default_instance_;
  delete SLoginLianYun_reflection_;
  delete SLoginTencent::default_instance_;
  delete SLoginTencent_reflection_;
  delete SLoginXiYou::default_instance_;
  delete SLoginXiYou_reflection_;
  delete SLogin360::default_instance_;
  delete SLogin360_reflection_;
  delete SLoginKor::default_instance_;
  delete SLoginKor_reflection_;
  delete CSLoginNew::default_instance_;
  delete CSLoginNew_reflection_;
}

void protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pwngs::protobuf_AddDesc_pwngs_2foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"pwngs/protocol/accsrv/accsrv.proto\022\025pw"
    "ngs.protocol.accsrv\032\023pwngs/options.proto"
    "\"\243\001\n\tCSLoginEx\022\016\n\006userid\030\001 \002(\003\022\n\n\002tm\030\002 \002"
    "(\003\022\017\n\007fatigue\030\003 \002(\005\022\021\n\tsignature\030\004 \002(\014\022\025"
    "\n\rmajor_version\030\005 \002(\005\022\025\n\rminor_version\030\006"
    " \002(\005\022\023\n\013client_type\030\007 \001(\005\022\r\n\005agent\030\010 \001(\014"
    ":\004\210\303\032\n\"\214\001\n\007CSLogin\022\014\n\004name\030\001 \002(\t\022\014\n\004pswd"
    "\030\002 \002(\t\022\r\n\005token\030\003 \001(\t\022\025\n\rmajor_version\030\004"
    " \002(\005\022\025\n\rminor_version\030\005 \002(\005\022\023\n\013client_ty"
    "pe\030\006 \001(\005\022\r\n\005agent\030\007 \001(\014:\004\210\303\032\013\"M\n\rSCLogin"
    "Result\022\016\n\006result\030\001 \002(\005\022\r\n\005error\030\002 \001(\t\022\027\n"
    "\017suggestion_name\030\003 \001(\t:\004\210\303\032\014\"\?\n\014CSTokenL"
    "ogin\022\014\n\004type\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\r\n\005toke"
    "n\030\003 \002(\t:\004\210\303\032\017\"\235\001\n\021SLoginInformation\022\025\n\rm"
    "ajor_version\030\001 \002(\005\022\025\n\rminor_version\030\002 \002("
    "\005\022\023\n\013client_type\030\003 \001(\005\022\r\n\005agent\030\004 \001(\014\022\030\n"
    "\020unique_device_id\030\005 \001(\014\022\014\n\004adid\030\006 \001(\014\022\016\n"
    "\006zoneid\030\007 \001(\005\",\n\016SLoginUserPswd\022\014\n\004name\030"
    "\001 \002(\t\022\014\n\004pswd\030\002 \002(\t\"K\n\tSLogin173\022\016\n\006user"
    "id\030\001 \002(\003\022\n\n\002tm\030\002 \002(\003\022\017\n\007fatigue\030\003 \002(\005\022\021\n"
    "\tsignature\030\004 \002(\014\"*\n\013SLoginToken\022\014\n\004name\030"
    "\001 \002(\t\022\r\n\005token\030\002 \002(\t\"\220\001\n\rSLoginLianYun\022\n"
    "\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\022\020\n\010serverid\030\003 \001"
    "(\005\022\022\n\nservername\030\004 \001(\014\022\r\n\005agent\030\005 \001(\014\022\013\n"
    "\003uid\030\006 \001(\014\022\t\n\001t\030\007 \001(\003\022\n\n\002cm\030\010 \001(\005\022\014\n\004sig"
    "n\030\t \001(\014\"e\n\rSLoginTencent\022\016\n\006openid\030\001 \002(\t"
    "\022\017\n\007openkey\030\002 \002(\t\022\020\n\010platform\030\003 \002(\t\022\024\n\014p"
    "latform_key\030\004 \002(\t\022\013\n\003pid\030\005 \001(\005\"\217\001\n\013SLogi"
    "nXiYou\022\013\n\003sid\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\013\n\003fcm\030"
    "\003 \002(\005\022\014\n\004exts\030\004 \002(\t\022\014\n\004time\030\005 \002(\003\022\020\n\010pla"
    "tform\030\006 \002(\t\022\014\n\004sign\030\007 \002(\t\022\014\n\004type\030\010 \002(\t\022"
    "\017\n\007channel\030\t \002(\t\"X\n\tSLogin360\022\013\n\003qid\030\001 \002"
    "(\003\022\021\n\tserver_id\030\002 \002(\t\022\014\n\004time\030\003 \002(\003\022\017\n\007i"
    "sAdult\030\004 \002(\005\022\014\n\004sign\030\005 \002(\t\"n\n\tSLoginKor\022"
    "\013\n\003uid\030\001 \002(\003\022\020\n\010platform\030\002 \002(\t\022\013\n\003sid\030\003 "
    "\002(\005\022\014\n\004time\030\004 \002(\003\022\013\n\003fcm\030\005 \002(\005\022\014\n\004type\030\006"
    " \002(\005\022\014\n\004sign\030\007 \002(\t\"\302\004\n\nCSLoginNew\022/\n\004typ"
    "e\030\001 \002(\0162!.pwngs.protocol.accsrv.ELoginTy"
    "pe\022;\n\tloginInfo\030\002 \001(\0132(.pwngs.protocol.a"
    "ccsrv.SLoginInformation\022<\n\rloginUserPswd"
    "\030\003 \001(\0132%.pwngs.protocol.accsrv.SLoginUse"
    "rPswd\0222\n\010login173\030\004 \001(\0132 .pwngs.protocol"
    ".accsrv.SLogin173\0226\n\nloginToken\030\005 \001(\0132\"."
    "pwngs.protocol.accsrv.SLoginToken\022:\n\014log"
    "inLianYun\030\006 \001(\0132$.pwngs.protocol.accsrv."
    "SLoginLianYun\022:\n\014loginTencent\030\007 \001(\0132$.pw"
    "ngs.protocol.accsrv.SLoginTencent\0226\n\nlog"
    "inXiYou\030\010 \001(\0132\".pwngs.protocol.accsrv.SL"
    "oginXiYou\0222\n\010login360\030\t \001(\0132 .pwngs.prot"
    "ocol.accsrv.SLogin360\0222\n\010loginKor\030\n \001(\0132"
    " .pwngs.protocol.accsrv.SLoginKor:\004\210\303\032\020*"
    "5\n\017EProgramVersion\022\020\n\014MajorVersion\020\001\022\020\n\014"
    "MinorVersion\020\000*\336\001\n\nELoginType\022\026\n\022LoginTy"
    "pe_UserPswd\020\000\022\021\n\rLoginType_173\020\001\022\023\n\017Logi"
    "nType_LaoHu\020\002\022\025\n\021LoginType_LianYun\020\003\022\025\n\021"
    "LoginType_Tencent\020\004\022\021\n\rLoginType_ARC\020\005\022\023"
    "\n\017LoginType_XiYou\020\006\022\021\n\rLoginType_360\020\007\022\021"
    "\n\rLoginType_Kor\020\010\022\024\n\020LoginType_Ladder\020d", 2319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pwngs/protocol/accsrv/accsrv.proto", &protobuf_RegisterTypes);
  CSLoginEx::default_instance_ = new CSLoginEx();
  CSLogin::default_instance_ = new CSLogin();
  SCLoginResult::default_instance_ = new SCLoginResult();
  CSTokenLogin::default_instance_ = new CSTokenLogin();
  SLoginInformation::default_instance_ = new SLoginInformation();
  SLoginUserPswd::default_instance_ = new SLoginUserPswd();
  SLogin173::default_instance_ = new SLogin173();
  SLoginToken::default_instance_ = new SLoginToken();
  SLoginLianYun::default_instance_ = new SLoginLianYun();
  SLoginTencent::default_instance_ = new SLoginTencent();
  SLoginXiYou::default_instance_ = new SLoginXiYou();
  SLogin360::default_instance_ = new SLogin360();
  SLoginKor::default_instance_ = new SLoginKor();
  CSLoginNew::default_instance_ = new CSLoginNew();
  CSLoginEx::default_instance_->InitAsDefaultInstance();
  CSLogin::default_instance_->InitAsDefaultInstance();
  SCLoginResult::default_instance_->InitAsDefaultInstance();
  CSTokenLogin::default_instance_->InitAsDefaultInstance();
  SLoginInformation::default_instance_->InitAsDefaultInstance();
  SLoginUserPswd::default_instance_->InitAsDefaultInstance();
  SLogin173::default_instance_->InitAsDefaultInstance();
  SLoginToken::default_instance_->InitAsDefaultInstance();
  SLoginLianYun::default_instance_->InitAsDefaultInstance();
  SLoginTencent::default_instance_->InitAsDefaultInstance();
  SLoginXiYou::default_instance_->InitAsDefaultInstance();
  SLogin360::default_instance_->InitAsDefaultInstance();
  SLoginKor::default_instance_->InitAsDefaultInstance();
  CSLoginNew::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto {
  StaticDescriptorInitializer_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto() {
    protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();
  }
} static_descriptor_initializer_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto_;

const ::google::protobuf::EnumDescriptor* EProgramVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProgramVersion_descriptor_;
}
bool EProgramVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELoginType_descriptor_;
}
bool ELoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginEx::kUseridFieldNumber;
const int CSLoginEx::kTmFieldNumber;
const int CSLoginEx::kFatigueFieldNumber;
const int CSLoginEx::kSignatureFieldNumber;
const int CSLoginEx::kMajorVersionFieldNumber;
const int CSLoginEx::kMinorVersionFieldNumber;
const int CSLoginEx::kClientTypeFieldNumber;
const int CSLoginEx::kAgentFieldNumber;
#endif  // !_MSC_VER

CSLoginEx::CSLoginEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginEx::InitAsDefaultInstance() {
}

CSLoginEx::CSLoginEx(const CSLoginEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginEx::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  tm_ = GOOGLE_LONGLONG(0);
  fatigue_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  major_version_ = 0;
  minor_version_ = 0;
  client_type_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginEx::~CSLoginEx() {
  SharedDtor();
}

void CSLoginEx::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (this != default_instance_) {
  }
}

void CSLoginEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginEx_descriptor_;
}

const CSLoginEx& CSLoginEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

CSLoginEx* CSLoginEx::default_instance_ = NULL;

CSLoginEx* CSLoginEx::New() const {
  return new CSLoginEx;
}

void CSLoginEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    tm_ = GOOGLE_LONGLONG(0);
    fatigue_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    major_version_ = 0;
    minor_version_ = 0;
    client_type_ = 0;
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tm;
        break;
      }
      
      // required int64 tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fatigue;
        break;
      }
      
      // required int32 fatigue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatigue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fatigue_)));
          set_has_fatigue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
          signature_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_major_version;
        break;
      }
      
      // required int32 major_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minor_version;
        break;
      }
      
      // required int32 minor_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_client_type;
        break;
      }
      
      // optional int32 client_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_agent;
        break;
      }
      
      // optional bytes agent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agent()));
          agent_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // required int64 tm = 2;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tm(), output);
  }
  
  // required int32 fatigue = 3;
  if (has_fatigue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fatigue(), output);
  }
  
  // required bytes signature = 4;
  if (has_signature()) {
    std::string tmp = pwutils::utf8_from_mbs(signature());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, tmp, output);
  }
  
  // required int32 major_version = 5;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->major_version(), output);
  }
  
  // required int32 minor_version = 6;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minor_version(), output);
  }
  
  // optional int32 client_type = 7;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->client_type(), output);
  }
  
  // optional bytes agent = 8;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // required int64 tm = 2;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tm(), target);
  }
  
  // required int32 fatigue = 3;
  if (has_fatigue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fatigue(), target);
  }
  
  // required bytes signature = 4;
  if (has_signature()) {
    std::string tmp = pwutils::utf8_from_mbs(signature());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, tmp, target);
  }
  
  // required int32 major_version = 5;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->major_version(), target);
  }
  
  // required int32 minor_version = 6;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minor_version(), target);
  }
  
  // optional int32 client_type = 7;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->client_type(), target);
  }
  
  // optional bytes agent = 8;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required int64 tm = 2;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tm());
    }
    
    // required int32 fatigue = 3;
    if (has_fatigue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fatigue());
    }
    
    // required bytes signature = 4;
    if (has_signature()) {
      std::string signature_tmp = pwutils::utf8_from_mbs(signature());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          signature_tmp);
    }
    
    // required int32 major_version = 5;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }
    
    // required int32 minor_version = 6;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }
    
    // optional int32 client_type = 7;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_type());
    }
    
    // optional bytes agent = 8;
    if (has_agent()) {
      std::string agent_tmp = pwutils::utf8_from_mbs(agent());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          agent_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginEx::MergeFrom(const CSLoginEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
    if (from.has_fatigue()) {
      set_fatigue(from.fatigue());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginEx::CopyFrom(const CSLoginEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void CSLoginEx::Swap(CSLoginEx* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tm_, other->tm_);
    std::swap(fatigue_, other->fatigue_);
    std::swap(signature_, other->signature_);
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(client_type_, other->client_type_);
    std::swap(agent_, other->agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginEx_descriptor_;
  metadata.reflection = CSLoginEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLogin::kNameFieldNumber;
const int CSLogin::kPswdFieldNumber;
const int CSLogin::kTokenFieldNumber;
const int CSLogin::kMajorVersionFieldNumber;
const int CSLogin::kMinorVersionFieldNumber;
const int CSLogin::kClientTypeFieldNumber;
const int CSLogin::kAgentFieldNumber;
#endif  // !_MSC_VER

CSLogin::CSLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLogin::InitAsDefaultInstance() {
}

CSLogin::CSLogin(const CSLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLogin::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  major_version_ = 0;
  minor_version_ = 0;
  client_type_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLogin::~CSLogin() {
  SharedDtor();
}

void CSLogin::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (this != default_instance_) {
  }
}

void CSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLogin_descriptor_;
}

const CSLogin& CSLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

CSLogin* CSLogin::default_instance_ = NULL;

CSLogin* CSLogin::New() const {
  return new CSLogin;
}

void CSLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    major_version_ = 0;
    minor_version_ = 0;
    client_type_ = 0;
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pswd;
        break;
      }
      
      // required string pswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          pswd_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          token_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_major_version;
        break;
      }
      
      // required int32 major_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minor_version;
        break;
      }
      
      // required int32 minor_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_client_type;
        break;
      }
      
      // optional int32 client_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_agent;
        break;
      }
      
      // optional bytes agent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agent()));
          agent_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // optional string token = 3;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, tmp, output);
  }
  
  // required int32 major_version = 4;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->major_version(), output);
  }
  
  // required int32 minor_version = 5;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minor_version(), output);
  }
  
  // optional int32 client_type = 6;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_type(), output);
  }
  
  // optional bytes agent = 7;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // optional string token = 3;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, tmp, target);
  }
  
  // required int32 major_version = 4;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->major_version(), target);
  }
  
  // required int32 minor_version = 5;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minor_version(), target);
  }
  
  // optional int32 client_type = 6;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->client_type(), target);
  }
  
  // optional bytes agent = 7;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          name_tmp);
    }
    
    // required string pswd = 2;
    if (has_pswd()) {
      std::string pswd_tmp = pwutils::utf8_from_mbs(pswd());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          pswd_tmp);
    }
    
    // optional string token = 3;
    if (has_token()) {
      std::string token_tmp = pwutils::utf8_from_mbs(token());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          token_tmp);
    }
    
    // required int32 major_version = 4;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }
    
    // required int32 minor_version = 5;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }
    
    // optional int32 client_type = 6;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_type());
    }
    
    // optional bytes agent = 7;
    if (has_agent()) {
      std::string agent_tmp = pwutils::utf8_from_mbs(agent());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          agent_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLogin::MergeFrom(const CSLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogin::CopyFrom(const CSLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void CSLogin::Swap(CSLogin* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pswd_, other->pswd_);
    std::swap(token_, other->token_);
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(client_type_, other->client_type_);
    std::swap(agent_, other->agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLogin_descriptor_;
  metadata.reflection = CSLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCLoginResult::kResultFieldNumber;
const int SCLoginResult::kErrorFieldNumber;
const int SCLoginResult::kSuggestionNameFieldNumber;
#endif  // !_MSC_VER

SCLoginResult::SCLoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCLoginResult::InitAsDefaultInstance() {
}

SCLoginResult::SCLoginResult(const SCLoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCLoginResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suggestion_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLoginResult::~SCLoginResult() {
  SharedDtor();
}

void SCLoginResult::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (suggestion_name_ != &::google::protobuf::internal::kEmptyString) {
    delete suggestion_name_;
  }
  if (this != default_instance_) {
  }
}

void SCLoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLoginResult_descriptor_;
}

const SCLoginResult& SCLoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SCLoginResult* SCLoginResult::default_instance_ = NULL;

SCLoginResult* SCLoginResult::New() const {
  return new SCLoginResult;
}

void SCLoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_suggestion_name()) {
      if (suggestion_name_ != &::google::protobuf::internal::kEmptyString) {
        suggestion_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCLoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          error_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggestion_name;
        break;
      }
      
      // optional string suggestion_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestion_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggestion_name()));
          suggestion_name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suggestion_name().data(), this->suggestion_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCLoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // optional string suggestion_name = 3;
  if (has_suggestion_name()) {
    std::string tmp = pwutils::utf8_from_mbs(suggestion_name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCLoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // optional string suggestion_name = 3;
  if (has_suggestion_name()) {
    std::string tmp = pwutils::utf8_from_mbs(suggestion_name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCLoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional string error = 2;
    if (has_error()) {
      std::string error_tmp = pwutils::utf8_from_mbs(error());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          error_tmp);
    }
    
    // optional string suggestion_name = 3;
    if (has_suggestion_name()) {
      std::string suggestion_name_tmp = pwutils::utf8_from_mbs(suggestion_name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          suggestion_name_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCLoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCLoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLoginResult::MergeFrom(const SCLoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_suggestion_name()) {
      set_suggestion_name(from.suggestion_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCLoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginResult::CopyFrom(const SCLoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCLoginResult::Swap(SCLoginResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(suggestion_name_, other->suggestion_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCLoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLoginResult_descriptor_;
  metadata.reflection = SCLoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTokenLogin::kTypeFieldNumber;
const int CSTokenLogin::kNameFieldNumber;
const int CSTokenLogin::kTokenFieldNumber;
#endif  // !_MSC_VER

CSTokenLogin::CSTokenLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTokenLogin::InitAsDefaultInstance() {
}

CSTokenLogin::CSTokenLogin(const CSTokenLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTokenLogin::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTokenLogin::~CSTokenLogin() {
  SharedDtor();
}

void CSTokenLogin::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CSTokenLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTokenLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTokenLogin_descriptor_;
}

const CSTokenLogin& CSTokenLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

CSTokenLogin* CSTokenLogin::default_instance_ = NULL;

CSTokenLogin* CSTokenLogin::New() const {
  return new CSTokenLogin;
}

void CSTokenLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTokenLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          token_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTokenLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // required string token = 3;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTokenLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // required string token = 3;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTokenLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          name_tmp);
    }
    
    // required string token = 3;
    if (has_token()) {
      std::string token_tmp = pwutils::utf8_from_mbs(token());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          token_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTokenLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTokenLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTokenLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTokenLogin::MergeFrom(const CSTokenLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTokenLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTokenLogin::CopyFrom(const CSTokenLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTokenLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSTokenLogin::Swap(CSTokenLogin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTokenLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTokenLogin_descriptor_;
  metadata.reflection = CSTokenLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginInformation::kMajorVersionFieldNumber;
const int SLoginInformation::kMinorVersionFieldNumber;
const int SLoginInformation::kClientTypeFieldNumber;
const int SLoginInformation::kAgentFieldNumber;
const int SLoginInformation::kUniqueDeviceIdFieldNumber;
const int SLoginInformation::kAdidFieldNumber;
const int SLoginInformation::kZoneidFieldNumber;
#endif  // !_MSC_VER

SLoginInformation::SLoginInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginInformation::InitAsDefaultInstance() {
}

SLoginInformation::SLoginInformation(const SLoginInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginInformation::SharedCtor() {
  _cached_size_ = 0;
  major_version_ = 0;
  minor_version_ = 0;
  client_type_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unique_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginInformation::~SLoginInformation() {
  SharedDtor();
}

void SLoginInformation::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (unique_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete unique_device_id_;
  }
  if (adid_ != &::google::protobuf::internal::kEmptyString) {
    delete adid_;
  }
  if (this != default_instance_) {
  }
}

void SLoginInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginInformation_descriptor_;
}

const SLoginInformation& SLoginInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginInformation* SLoginInformation::default_instance_ = NULL;

SLoginInformation* SLoginInformation::New() const {
  return new SLoginInformation;
}

void SLoginInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_version_ = 0;
    minor_version_ = 0;
    client_type_ = 0;
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_unique_device_id()) {
      if (unique_device_id_ != &::google::protobuf::internal::kEmptyString) {
        unique_device_id_->clear();
      }
    }
    if (has_adid()) {
      if (adid_ != &::google::protobuf::internal::kEmptyString) {
        adid_->clear();
      }
    }
    zoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 major_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor_version;
        break;
      }
      
      // required int32 minor_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_type;
        break;
      }
      
      // optional int32 client_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agent;
        break;
      }
      
      // optional bytes agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agent()));
          agent_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unique_device_id;
        break;
      }
      
      // optional bytes unique_device_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_unique_device_id()));
          unique_device_id_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_adid;
        break;
      }
      
      // optional bytes adid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adid()));
          adid_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }
      
      // optional int32 zoneid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 major_version = 1;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major_version(), output);
  }
  
  // required int32 minor_version = 2;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor_version(), output);
  }
  
  // optional int32 client_type = 3;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_type(), output);
  }
  
  // optional bytes agent = 4;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, tmp, output);
  }
  
  // optional bytes unique_device_id = 5;
  if (has_unique_device_id()) {
    std::string tmp = pwutils::utf8_from_mbs(unique_device_id());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, tmp, output);
  }
  
  // optional bytes adid = 6;
  if (has_adid()) {
    std::string tmp = pwutils::utf8_from_mbs(adid());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, tmp, output);
  }
  
  // optional int32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zoneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 major_version = 1;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major_version(), target);
  }
  
  // required int32 minor_version = 2;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor_version(), target);
  }
  
  // optional int32 client_type = 3;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_type(), target);
  }
  
  // optional bytes agent = 4;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, tmp, target);
  }
  
  // optional bytes unique_device_id = 5;
  if (has_unique_device_id()) {
    std::string tmp = pwutils::utf8_from_mbs(unique_device_id());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, tmp, target);
  }
  
  // optional bytes adid = 6;
  if (has_adid()) {
    std::string tmp = pwutils::utf8_from_mbs(adid());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, tmp, target);
  }
  
  // optional int32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zoneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 major_version = 1;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }
    
    // required int32 minor_version = 2;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }
    
    // optional int32 client_type = 3;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_type());
    }
    
    // optional bytes agent = 4;
    if (has_agent()) {
      std::string agent_tmp = pwutils::utf8_from_mbs(agent());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          agent_tmp);
    }
    
    // optional bytes unique_device_id = 5;
    if (has_unique_device_id()) {
      std::string unique_device_id_tmp = pwutils::utf8_from_mbs(unique_device_id());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          unique_device_id_tmp);
    }
    
    // optional bytes adid = 6;
    if (has_adid()) {
      std::string adid_tmp = pwutils::utf8_from_mbs(adid());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          adid_tmp);
    }
    
    // optional int32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginInformation::MergeFrom(const SLoginInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_unique_device_id()) {
      set_unique_device_id(from.unique_device_id());
    }
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginInformation::CopyFrom(const SLoginInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SLoginInformation::Swap(SLoginInformation* other) {
  if (other != this) {
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(client_type_, other->client_type_);
    std::swap(agent_, other->agent_);
    std::swap(unique_device_id_, other->unique_device_id_);
    std::swap(adid_, other->adid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginInformation_descriptor_;
  metadata.reflection = SLoginInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginUserPswd::kNameFieldNumber;
const int SLoginUserPswd::kPswdFieldNumber;
#endif  // !_MSC_VER

SLoginUserPswd::SLoginUserPswd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginUserPswd::InitAsDefaultInstance() {
}

SLoginUserPswd::SLoginUserPswd(const SLoginUserPswd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginUserPswd::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginUserPswd::~SLoginUserPswd() {
  SharedDtor();
}

void SLoginUserPswd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void SLoginUserPswd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginUserPswd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginUserPswd_descriptor_;
}

const SLoginUserPswd& SLoginUserPswd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginUserPswd* SLoginUserPswd::default_instance_ = NULL;

SLoginUserPswd* SLoginUserPswd::New() const {
  return new SLoginUserPswd;
}

void SLoginUserPswd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::kEmptyString) {
        pswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginUserPswd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pswd;
        break;
      }
      
      // required string pswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          pswd_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginUserPswd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginUserPswd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string pswd = 2;
  if (has_pswd()) {
    std::string tmp = pwutils::utf8_from_mbs(pswd());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginUserPswd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          name_tmp);
    }
    
    // required string pswd = 2;
    if (has_pswd()) {
      std::string pswd_tmp = pwutils::utf8_from_mbs(pswd());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          pswd_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginUserPswd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginUserPswd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginUserPswd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginUserPswd::MergeFrom(const SLoginUserPswd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginUserPswd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginUserPswd::CopyFrom(const SLoginUserPswd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginUserPswd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SLoginUserPswd::Swap(SLoginUserPswd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginUserPswd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginUserPswd_descriptor_;
  metadata.reflection = SLoginUserPswd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLogin173::kUseridFieldNumber;
const int SLogin173::kTmFieldNumber;
const int SLogin173::kFatigueFieldNumber;
const int SLogin173::kSignatureFieldNumber;
#endif  // !_MSC_VER

SLogin173::SLogin173()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLogin173::InitAsDefaultInstance() {
}

SLogin173::SLogin173(const SLogin173& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLogin173::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  tm_ = GOOGLE_LONGLONG(0);
  fatigue_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLogin173::~SLogin173() {
  SharedDtor();
}

void SLogin173::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SLogin173::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLogin173::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLogin173_descriptor_;
}

const SLogin173& SLogin173::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLogin173* SLogin173::default_instance_ = NULL;

SLogin173* SLogin173::New() const {
  return new SLogin173;
}

void SLogin173::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    tm_ = GOOGLE_LONGLONG(0);
    fatigue_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLogin173::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tm;
        break;
      }
      
      // required int64 tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fatigue;
        break;
      }
      
      // required int32 fatigue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatigue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fatigue_)));
          set_has_fatigue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
          signature_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLogin173::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // required int64 tm = 2;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tm(), output);
  }
  
  // required int32 fatigue = 3;
  if (has_fatigue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fatigue(), output);
  }
  
  // required bytes signature = 4;
  if (has_signature()) {
    std::string tmp = pwutils::utf8_from_mbs(signature());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLogin173::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // required int64 tm = 2;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tm(), target);
  }
  
  // required int32 fatigue = 3;
  if (has_fatigue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fatigue(), target);
  }
  
  // required bytes signature = 4;
  if (has_signature()) {
    std::string tmp = pwutils::utf8_from_mbs(signature());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLogin173::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required int64 tm = 2;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tm());
    }
    
    // required int32 fatigue = 3;
    if (has_fatigue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fatigue());
    }
    
    // required bytes signature = 4;
    if (has_signature()) {
      std::string signature_tmp = pwutils::utf8_from_mbs(signature());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          signature_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLogin173::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLogin173* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLogin173*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLogin173::MergeFrom(const SLogin173& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
    if (from.has_fatigue()) {
      set_fatigue(from.fatigue());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLogin173::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLogin173::CopyFrom(const SLogin173& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin173::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SLogin173::Swap(SLogin173* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tm_, other->tm_);
    std::swap(fatigue_, other->fatigue_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLogin173::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLogin173_descriptor_;
  metadata.reflection = SLogin173_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginToken::kNameFieldNumber;
const int SLoginToken::kTokenFieldNumber;
#endif  // !_MSC_VER

SLoginToken::SLoginToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginToken::InitAsDefaultInstance() {
}

SLoginToken::SLoginToken(const SLoginToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginToken::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginToken::~SLoginToken() {
  SharedDtor();
}

void SLoginToken::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void SLoginToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginToken_descriptor_;
}

const SLoginToken& SLoginToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginToken* SLoginToken::default_instance_ = NULL;

SLoginToken* SLoginToken::New() const {
  return new SLoginToken;
}

void SLoginToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          name_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          token_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string token = 2;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string token = 2;
  if (has_token()) {
    std::string tmp = pwutils::utf8_from_mbs(token());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginToken::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          name_tmp);
    }
    
    // required string token = 2;
    if (has_token()) {
      std::string token_tmp = pwutils::utf8_from_mbs(token());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          token_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginToken::MergeFrom(const SLoginToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginToken::CopyFrom(const SLoginToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SLoginToken::Swap(SLoginToken* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginToken_descriptor_;
  metadata.reflection = SLoginToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginLianYun::kIpFieldNumber;
const int SLoginLianYun::kPortFieldNumber;
const int SLoginLianYun::kServeridFieldNumber;
const int SLoginLianYun::kServernameFieldNumber;
const int SLoginLianYun::kAgentFieldNumber;
const int SLoginLianYun::kUidFieldNumber;
const int SLoginLianYun::kTFieldNumber;
const int SLoginLianYun::kCmFieldNumber;
const int SLoginLianYun::kSignFieldNumber;
#endif  // !_MSC_VER

SLoginLianYun::SLoginLianYun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginLianYun::InitAsDefaultInstance() {
}

SLoginLianYun::SLoginLianYun(const SLoginLianYun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginLianYun::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  serverid_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_ = GOOGLE_LONGLONG(0);
  cm_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginLianYun::~SLoginLianYun() {
  SharedDtor();
}

void SLoginLianYun::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void SLoginLianYun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginLianYun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginLianYun_descriptor_;
}

const SLoginLianYun& SLoginLianYun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginLianYun* SLoginLianYun::default_instance_ = NULL;

SLoginLianYun* SLoginLianYun::New() const {
  return new SLoginLianYun;
}

void SLoginLianYun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    serverid_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    t_ = GOOGLE_LONGLONG(0);
    cm_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginLianYun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
          ip_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }
      
      // optional int32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servername;
        break;
      }
      
      // optional bytes servername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
          servername_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_agent;
        break;
      }
      
      // optional bytes agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agent()));
          agent_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uid;
        break;
      }
      
      // optional bytes uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
          uid_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t;
        break;
      }
      
      // optional int64 t = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cm;
        break;
      }
      
      // optional int32 cm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cm_)));
          set_has_cm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sign;
        break;
      }
      
      // optional bytes sign = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
          sign_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginLianYun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    std::string tmp = pwutils::utf8_from_mbs(ip());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, tmp, output);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  // optional int32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }
  
  // optional bytes servername = 4;
  if (has_servername()) {
    std::string tmp = pwutils::utf8_from_mbs(servername());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, tmp, output);
  }
  
  // optional bytes agent = 5;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, tmp, output);
  }
  
  // optional bytes uid = 6;
  if (has_uid()) {
    std::string tmp = pwutils::utf8_from_mbs(uid());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, tmp, output);
  }
  
  // optional int64 t = 7;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->t(), output);
  }
  
  // optional int32 cm = 8;
  if (has_cm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cm(), output);
  }
  
  // optional bytes sign = 9;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginLianYun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    std::string tmp = pwutils::utf8_from_mbs(ip());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, tmp, target);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  // optional int32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }
  
  // optional bytes servername = 4;
  if (has_servername()) {
    std::string tmp = pwutils::utf8_from_mbs(servername());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, tmp, target);
  }
  
  // optional bytes agent = 5;
  if (has_agent()) {
    std::string tmp = pwutils::utf8_from_mbs(agent());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, tmp, target);
  }
  
  // optional bytes uid = 6;
  if (has_uid()) {
    std::string tmp = pwutils::utf8_from_mbs(uid());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, tmp, target);
  }
  
  // optional int64 t = 7;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->t(), target);
  }
  
  // optional int32 cm = 8;
  if (has_cm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cm(), target);
  }
  
  // optional bytes sign = 9;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginLianYun::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      std::string ip_tmp = pwutils::utf8_from_mbs(ip());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          ip_tmp);
    }
    
    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional int32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional bytes servername = 4;
    if (has_servername()) {
      std::string servername_tmp = pwutils::utf8_from_mbs(servername());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          servername_tmp);
    }
    
    // optional bytes agent = 5;
    if (has_agent()) {
      std::string agent_tmp = pwutils::utf8_from_mbs(agent());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          agent_tmp);
    }
    
    // optional bytes uid = 6;
    if (has_uid()) {
      std::string uid_tmp = pwutils::utf8_from_mbs(uid());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          uid_tmp);
    }
    
    // optional int64 t = 7;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t());
    }
    
    // optional int32 cm = 8;
    if (has_cm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cm());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes sign = 9;
    if (has_sign()) {
      std::string sign_tmp = pwutils::utf8_from_mbs(sign());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          sign_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginLianYun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginLianYun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginLianYun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginLianYun::MergeFrom(const SLoginLianYun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_cm()) {
      set_cm(from.cm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginLianYun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginLianYun::CopyFrom(const SLoginLianYun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginLianYun::IsInitialized() const {
  
  return true;
}

void SLoginLianYun::Swap(SLoginLianYun* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(agent_, other->agent_);
    std::swap(uid_, other->uid_);
    std::swap(t_, other->t_);
    std::swap(cm_, other->cm_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginLianYun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginLianYun_descriptor_;
  metadata.reflection = SLoginLianYun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginTencent::kOpenidFieldNumber;
const int SLoginTencent::kOpenkeyFieldNumber;
const int SLoginTencent::kPlatformFieldNumber;
const int SLoginTencent::kPlatformKeyFieldNumber;
const int SLoginTencent::kPidFieldNumber;
#endif  // !_MSC_VER

SLoginTencent::SLoginTencent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginTencent::InitAsDefaultInstance() {
}

SLoginTencent::SLoginTencent(const SLoginTencent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginTencent::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginTencent::~SLoginTencent() {
  SharedDtor();
}

void SLoginTencent::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform_key_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_key_;
  }
  if (this != default_instance_) {
  }
}

void SLoginTencent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginTencent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginTencent_descriptor_;
}

const SLoginTencent& SLoginTencent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginTencent* SLoginTencent::default_instance_ = NULL;

SLoginTencent* SLoginTencent::New() const {
  return new SLoginTencent;
}

void SLoginTencent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_platform_key()) {
      if (platform_key_ != &::google::protobuf::internal::kEmptyString) {
        platform_key_->clear();
      }
    }
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginTencent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          openid_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openkey;
        break;
      }
      
      // required string openkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          openkey_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }
      
      // required string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          platform_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_platform_key;
        break;
      }
      
      // required string platform_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_key()));
          platform_key_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_key().data(), this->platform_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginTencent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    std::string tmp = pwutils::utf8_from_mbs(openid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string openkey = 2;
  if (has_openkey()) {
    std::string tmp = pwutils::utf8_from_mbs(openkey());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // required string platform = 3;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, tmp, output);
  }
  
  // required string platform_key = 4;
  if (has_platform_key()) {
    std::string tmp = pwutils::utf8_from_mbs(platform_key());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, tmp, output);
  }
  
  // optional int32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginTencent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    std::string tmp = pwutils::utf8_from_mbs(openid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string openkey = 2;
  if (has_openkey()) {
    std::string tmp = pwutils::utf8_from_mbs(openkey());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // required string platform = 3;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, tmp, target);
  }
  
  // required string platform_key = 4;
  if (has_platform_key()) {
    std::string tmp = pwutils::utf8_from_mbs(platform_key());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, tmp, target);
  }
  
  // optional int32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginTencent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      std::string openid_tmp = pwutils::utf8_from_mbs(openid());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          openid_tmp);
    }
    
    // required string openkey = 2;
    if (has_openkey()) {
      std::string openkey_tmp = pwutils::utf8_from_mbs(openkey());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          openkey_tmp);
    }
    
    // required string platform = 3;
    if (has_platform()) {
      std::string platform_tmp = pwutils::utf8_from_mbs(platform());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          platform_tmp);
    }
    
    // required string platform_key = 4;
    if (has_platform_key()) {
      std::string platform_key_tmp = pwutils::utf8_from_mbs(platform_key());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          platform_key_tmp);
    }
    
    // optional int32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginTencent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginTencent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginTencent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginTencent::MergeFrom(const SLoginTencent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_platform_key()) {
      set_platform_key(from.platform_key());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginTencent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginTencent::CopyFrom(const SLoginTencent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginTencent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SLoginTencent::Swap(SLoginTencent* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(openkey_, other->openkey_);
    std::swap(platform_, other->platform_);
    std::swap(platform_key_, other->platform_key_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginTencent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginTencent_descriptor_;
  metadata.reflection = SLoginTencent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginXiYou::kSidFieldNumber;
const int SLoginXiYou::kUidFieldNumber;
const int SLoginXiYou::kFcmFieldNumber;
const int SLoginXiYou::kExtsFieldNumber;
const int SLoginXiYou::kTimeFieldNumber;
const int SLoginXiYou::kPlatformFieldNumber;
const int SLoginXiYou::kSignFieldNumber;
const int SLoginXiYou::kTypeFieldNumber;
const int SLoginXiYou::kChannelFieldNumber;
#endif  // !_MSC_VER

SLoginXiYou::SLoginXiYou()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginXiYou::InitAsDefaultInstance() {
}

SLoginXiYou::SLoginXiYou(const SLoginXiYou& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginXiYou::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fcm_ = 0;
  exts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginXiYou::~SLoginXiYou() {
  SharedDtor();
}

void SLoginXiYou::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (exts_ != &::google::protobuf::internal::kEmptyString) {
    delete exts_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void SLoginXiYou::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginXiYou::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginXiYou_descriptor_;
}

const SLoginXiYou& SLoginXiYou::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginXiYou* SLoginXiYou::default_instance_ = NULL;

SLoginXiYou* SLoginXiYou::New() const {
  return new SLoginXiYou;
}

void SLoginXiYou::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    fcm_ = 0;
    if (has_exts()) {
      if (exts_ != &::google::protobuf::internal::kEmptyString) {
        exts_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginXiYou::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          sid_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }
      
      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          uid_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fcm;
        break;
      }
      
      // required int32 fcm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fcm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcm_)));
          set_has_fcm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exts;
        break;
      }
      
      // required string exts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exts()));
          exts_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exts().data(), this->exts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // required int64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_platform;
        break;
      }
      
      // required string platform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          platform_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }
      
      // required string sign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          sign_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_type;
        break;
      }
      
      // required string type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          type_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_channel;
        break;
      }
      
      // required string channel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          channel_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginXiYou::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sid = 1;
  if (has_sid()) {
    std::string tmp = pwutils::utf8_from_mbs(sid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, tmp, output);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    std::string tmp = pwutils::utf8_from_mbs(uid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // required int32 fcm = 3;
  if (has_fcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fcm(), output);
  }
  
  // required string exts = 4;
  if (has_exts()) {
    std::string tmp = pwutils::utf8_from_mbs(exts());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, tmp, output);
  }
  
  // required int64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }
  
  // required string platform = 6;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, tmp, output);
  }
  
  // required string sign = 7;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, tmp, output);
  }
  
  // required string type = 8;
  if (has_type()) {
    std::string tmp = pwutils::utf8_from_mbs(type());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, tmp, output);
  }
  
  // required string channel = 9;
  if (has_channel()) {
    std::string tmp = pwutils::utf8_from_mbs(channel());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginXiYou::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sid = 1;
  if (has_sid()) {
    std::string tmp = pwutils::utf8_from_mbs(sid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, tmp, target);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    std::string tmp = pwutils::utf8_from_mbs(uid());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // required int32 fcm = 3;
  if (has_fcm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fcm(), target);
  }
  
  // required string exts = 4;
  if (has_exts()) {
    std::string tmp = pwutils::utf8_from_mbs(exts());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, tmp, target);
  }
  
  // required int64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }
  
  // required string platform = 6;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, tmp, target);
  }
  
  // required string sign = 7;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, tmp, target);
  }
  
  // required string type = 8;
  if (has_type()) {
    std::string tmp = pwutils::utf8_from_mbs(type());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, tmp, target);
  }
  
  // required string channel = 9;
  if (has_channel()) {
    std::string tmp = pwutils::utf8_from_mbs(channel());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginXiYou::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sid = 1;
    if (has_sid()) {
      std::string sid_tmp = pwutils::utf8_from_mbs(sid());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          sid_tmp);
    }
    
    // required string uid = 2;
    if (has_uid()) {
      std::string uid_tmp = pwutils::utf8_from_mbs(uid());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          uid_tmp);
    }
    
    // required int32 fcm = 3;
    if (has_fcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcm());
    }
    
    // required string exts = 4;
    if (has_exts()) {
      std::string exts_tmp = pwutils::utf8_from_mbs(exts());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          exts_tmp);
    }
    
    // required int64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required string platform = 6;
    if (has_platform()) {
      std::string platform_tmp = pwutils::utf8_from_mbs(platform());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          platform_tmp);
    }
    
    // required string sign = 7;
    if (has_sign()) {
      std::string sign_tmp = pwutils::utf8_from_mbs(sign());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          sign_tmp);
    }
    
    // required string type = 8;
    if (has_type()) {
      std::string type_tmp = pwutils::utf8_from_mbs(type());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          type_tmp);
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string channel = 9;
    if (has_channel()) {
      std::string channel_tmp = pwutils::utf8_from_mbs(channel());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          channel_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginXiYou::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginXiYou* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginXiYou*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginXiYou::MergeFrom(const SLoginXiYou& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fcm()) {
      set_fcm(from.fcm());
    }
    if (from.has_exts()) {
      set_exts(from.exts());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginXiYou::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginXiYou::CopyFrom(const SLoginXiYou& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginXiYou::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void SLoginXiYou::Swap(SLoginXiYou* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(uid_, other->uid_);
    std::swap(fcm_, other->fcm_);
    std::swap(exts_, other->exts_);
    std::swap(time_, other->time_);
    std::swap(platform_, other->platform_);
    std::swap(sign_, other->sign_);
    std::swap(type_, other->type_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginXiYou::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginXiYou_descriptor_;
  metadata.reflection = SLoginXiYou_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLogin360::kQidFieldNumber;
const int SLogin360::kServerIdFieldNumber;
const int SLogin360::kTimeFieldNumber;
const int SLogin360::kIsAdultFieldNumber;
const int SLogin360::kSignFieldNumber;
#endif  // !_MSC_VER

SLogin360::SLogin360()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLogin360::InitAsDefaultInstance() {
}

SLogin360::SLogin360(const SLogin360& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLogin360::SharedCtor() {
  _cached_size_ = 0;
  qid_ = GOOGLE_LONGLONG(0);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  isadult_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLogin360::~SLogin360() {
  SharedDtor();
}

void SLogin360::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void SLogin360::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLogin360::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLogin360_descriptor_;
}

const SLogin360& SLogin360::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLogin360* SLogin360::default_instance_ = NULL;

SLogin360* SLogin360::New() const {
  return new SLogin360;
}

void SLogin360::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qid_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    isadult_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLogin360::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 qid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &qid_)));
          set_has_qid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }
      
      // required string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          server_id_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // required int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isAdult;
        break;
      }
      
      // required int32 isAdult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }
      
      // required string sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          sign_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLogin360::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 qid = 1;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->qid(), output);
  }
  
  // required string server_id = 2;
  if (has_server_id()) {
    std::string tmp = pwutils::utf8_from_mbs(server_id());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // required int32 isAdult = 4;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isadult(), output);
  }
  
  // required string sign = 5;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLogin360::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 qid = 1;
  if (has_qid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->qid(), target);
  }
  
  // required string server_id = 2;
  if (has_server_id()) {
    std::string tmp = pwutils::utf8_from_mbs(server_id());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // required int32 isAdult = 4;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isadult(), target);
  }
  
  // required string sign = 5;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLogin360::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 qid = 1;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->qid());
    }
    
    // required string server_id = 2;
    if (has_server_id()) {
      std::string server_id_tmp = pwutils::utf8_from_mbs(server_id());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          server_id_tmp);
    }
    
    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required int32 isAdult = 4;
    if (has_isadult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isadult());
    }
    
    // required string sign = 5;
    if (has_sign()) {
      std::string sign_tmp = pwutils::utf8_from_mbs(sign());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          sign_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLogin360::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLogin360* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLogin360*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLogin360::MergeFrom(const SLogin360& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLogin360::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLogin360::CopyFrom(const SLogin360& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin360::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SLogin360::Swap(SLogin360* other) {
  if (other != this) {
    std::swap(qid_, other->qid_);
    std::swap(server_id_, other->server_id_);
    std::swap(time_, other->time_);
    std::swap(isadult_, other->isadult_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLogin360::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLogin360_descriptor_;
  metadata.reflection = SLogin360_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLoginKor::kUidFieldNumber;
const int SLoginKor::kPlatformFieldNumber;
const int SLoginKor::kSidFieldNumber;
const int SLoginKor::kTimeFieldNumber;
const int SLoginKor::kFcmFieldNumber;
const int SLoginKor::kTypeFieldNumber;
const int SLoginKor::kSignFieldNumber;
#endif  // !_MSC_VER

SLoginKor::SLoginKor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLoginKor::InitAsDefaultInstance() {
}

SLoginKor::SLoginKor(const SLoginKor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLoginKor::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  fcm_ = 0;
  type_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLoginKor::~SLoginKor() {
  SharedDtor();
}

void SLoginKor::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void SLoginKor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLoginKor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLoginKor_descriptor_;
}

const SLoginKor& SLoginKor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

SLoginKor* SLoginKor::default_instance_ = NULL;

SLoginKor* SLoginKor::New() const {
  return new SLoginKor;
}

void SLoginKor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    sid_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    fcm_ = 0;
    type_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLoginKor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }
      
      // required string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          platform_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }
      
      // required int32 sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // required int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fcm;
        break;
      }
      
      // required int32 fcm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fcm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcm_)));
          set_has_fcm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }
      
      // required string sign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          sign_to_mbs();
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLoginKor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // required string platform = 2;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, tmp, output);
  }
  
  // required int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }
  
  // required int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }
  
  // required int32 fcm = 5;
  if (has_fcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fcm(), output);
  }
  
  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  // required string sign = 7;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLoginKor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // required string platform = 2;
  if (has_platform()) {
    std::string tmp = pwutils::utf8_from_mbs(platform());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, tmp, target);
  }
  
  // required int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }
  
  // required int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }
  
  // required int32 fcm = 5;
  if (has_fcm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fcm(), target);
  }
  
  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  // required string sign = 7;
  if (has_sign()) {
    std::string tmp = pwutils::utf8_from_mbs(sign());
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      tmp.data(), tmp.length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLoginKor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // required string platform = 2;
    if (has_platform()) {
      std::string platform_tmp = pwutils::utf8_from_mbs(platform());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          platform_tmp);
    }
    
    // required int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required int32 fcm = 5;
    if (has_fcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcm());
    }
    
    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string sign = 7;
    if (has_sign()) {
      std::string sign_tmp = pwutils::utf8_from_mbs(sign());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          sign_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLoginKor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLoginKor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLoginKor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLoginKor::MergeFrom(const SLoginKor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_fcm()) {
      set_fcm(from.fcm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLoginKor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLoginKor::CopyFrom(const SLoginKor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLoginKor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void SLoginKor::Swap(SLoginKor* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platform_, other->platform_);
    std::swap(sid_, other->sid_);
    std::swap(time_, other->time_);
    std::swap(fcm_, other->fcm_);
    std::swap(type_, other->type_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLoginKor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLoginKor_descriptor_;
  metadata.reflection = SLoginKor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSLoginNew::kTypeFieldNumber;
const int CSLoginNew::kLoginInfoFieldNumber;
const int CSLoginNew::kLoginUserPswdFieldNumber;
const int CSLoginNew::kLogin173FieldNumber;
const int CSLoginNew::kLoginTokenFieldNumber;
const int CSLoginNew::kLoginLianYunFieldNumber;
const int CSLoginNew::kLoginTencentFieldNumber;
const int CSLoginNew::kLoginXiYouFieldNumber;
const int CSLoginNew::kLogin360FieldNumber;
const int CSLoginNew::kLoginKorFieldNumber;
#endif  // !_MSC_VER

CSLoginNew::CSLoginNew()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginNew::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::pwngs::protocol::accsrv::SLoginInformation*>(&::pwngs::protocol::accsrv::SLoginInformation::default_instance());
  loginuserpswd_ = const_cast< ::pwngs::protocol::accsrv::SLoginUserPswd*>(&::pwngs::protocol::accsrv::SLoginUserPswd::default_instance());
  login173_ = const_cast< ::pwngs::protocol::accsrv::SLogin173*>(&::pwngs::protocol::accsrv::SLogin173::default_instance());
  logintoken_ = const_cast< ::pwngs::protocol::accsrv::SLoginToken*>(&::pwngs::protocol::accsrv::SLoginToken::default_instance());
  loginlianyun_ = const_cast< ::pwngs::protocol::accsrv::SLoginLianYun*>(&::pwngs::protocol::accsrv::SLoginLianYun::default_instance());
  logintencent_ = const_cast< ::pwngs::protocol::accsrv::SLoginTencent*>(&::pwngs::protocol::accsrv::SLoginTencent::default_instance());
  loginxiyou_ = const_cast< ::pwngs::protocol::accsrv::SLoginXiYou*>(&::pwngs::protocol::accsrv::SLoginXiYou::default_instance());
  login360_ = const_cast< ::pwngs::protocol::accsrv::SLogin360*>(&::pwngs::protocol::accsrv::SLogin360::default_instance());
  loginkor_ = const_cast< ::pwngs::protocol::accsrv::SLoginKor*>(&::pwngs::protocol::accsrv::SLoginKor::default_instance());
}

CSLoginNew::CSLoginNew(const CSLoginNew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginNew::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  logininfo_ = NULL;
  loginuserpswd_ = NULL;
  login173_ = NULL;
  logintoken_ = NULL;
  loginlianyun_ = NULL;
  logintencent_ = NULL;
  loginxiyou_ = NULL;
  login360_ = NULL;
  loginkor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginNew::~CSLoginNew() {
  SharedDtor();
}

void CSLoginNew::SharedDtor() {
  if (this != default_instance_) {
    delete logininfo_;
    delete loginuserpswd_;
    delete login173_;
    delete logintoken_;
    delete loginlianyun_;
    delete logintencent_;
    delete loginxiyou_;
    delete login360_;
    delete loginkor_;
  }
}

void CSLoginNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginNew_descriptor_;
}

const CSLoginNew& CSLoginNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwngs_2fprotocol_2faccsrv_2faccsrv_2eproto();  return *default_instance_;
}

CSLoginNew* CSLoginNew::default_instance_ = NULL;

CSLoginNew* CSLoginNew::New() const {
  return new CSLoginNew;
}

void CSLoginNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::pwngs::protocol::accsrv::SLoginInformation::Clear();
    }
    if (has_loginuserpswd()) {
      if (loginuserpswd_ != NULL) loginuserpswd_->::pwngs::protocol::accsrv::SLoginUserPswd::Clear();
    }
    if (has_login173()) {
      if (login173_ != NULL) login173_->::pwngs::protocol::accsrv::SLogin173::Clear();
    }
    if (has_logintoken()) {
      if (logintoken_ != NULL) logintoken_->::pwngs::protocol::accsrv::SLoginToken::Clear();
    }
    if (has_loginlianyun()) {
      if (loginlianyun_ != NULL) loginlianyun_->::pwngs::protocol::accsrv::SLoginLianYun::Clear();
    }
    if (has_logintencent()) {
      if (logintencent_ != NULL) logintencent_->::pwngs::protocol::accsrv::SLoginTencent::Clear();
    }
    if (has_loginxiyou()) {
      if (loginxiyou_ != NULL) loginxiyou_->::pwngs::protocol::accsrv::SLoginXiYou::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_login360()) {
      if (login360_ != NULL) login360_->::pwngs::protocol::accsrv::SLogin360::Clear();
    }
    if (has_loginkor()) {
      if (loginkor_ != NULL) loginkor_->::pwngs::protocol::accsrv::SLoginKor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pwngs.protocol.accsrv.ELoginType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (pwngs::protocol::accsrv::ELoginType_IsValid(value)) {
            set_type(static_cast< pwngs::protocol::accsrv::ELoginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginInfo;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginInformation loginInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_loginUserPswd;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginUserPswd loginUserPswd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginUserPswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginuserpswd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login173;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLogin173 login173 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login173:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login173()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loginToken;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginToken loginToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logintoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_loginLianYun;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginLianYun loginLianYun = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginLianYun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginlianyun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_loginTencent;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginTencent loginTencent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginTencent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logintencent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_loginXiYou;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginXiYou loginXiYou = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginXiYou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginxiyou()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_login360;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLogin360 login360 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login360:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login360()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_loginKor;
        break;
      }
      
      // optional .pwngs.protocol.accsrv.SLoginKor loginKor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginKor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginkor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSLoginNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pwngs.protocol.accsrv.ELoginType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginInformation loginInfo = 2;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logininfo(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginUserPswd loginUserPswd = 3;
  if (has_loginuserpswd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loginuserpswd(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLogin173 login173 = 4;
  if (has_login173()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login173(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginToken loginToken = 5;
  if (has_logintoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logintoken(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginLianYun loginLianYun = 6;
  if (has_loginlianyun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->loginlianyun(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginTencent loginTencent = 7;
  if (has_logintencent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->logintencent(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginXiYou loginXiYou = 8;
  if (has_loginxiyou()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->loginxiyou(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLogin360 login360 = 9;
  if (has_login360()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->login360(), output);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginKor loginKor = 10;
  if (has_loginkor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->loginkor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pwngs.protocol.accsrv.ELoginType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginInformation loginInfo = 2;
  if (has_logininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logininfo(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginUserPswd loginUserPswd = 3;
  if (has_loginuserpswd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loginuserpswd(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLogin173 login173 = 4;
  if (has_login173()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login173(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginToken loginToken = 5;
  if (has_logintoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->logintoken(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginLianYun loginLianYun = 6;
  if (has_loginlianyun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->loginlianyun(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginTencent loginTencent = 7;
  if (has_logintencent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->logintencent(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginXiYou loginXiYou = 8;
  if (has_loginxiyou()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->loginxiyou(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLogin360 login360 = 9;
  if (has_login360()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->login360(), target);
  }
  
  // optional .pwngs.protocol.accsrv.SLoginKor loginKor = 10;
  if (has_loginkor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->loginkor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginNew::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pwngs.protocol.accsrv.ELoginType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginInformation loginInfo = 2;
    if (has_logininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginUserPswd loginUserPswd = 3;
    if (has_loginuserpswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginuserpswd());
    }
    
    // optional .pwngs.protocol.accsrv.SLogin173 login173 = 4;
    if (has_login173()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login173());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginToken loginToken = 5;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logintoken());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginLianYun loginLianYun = 6;
    if (has_loginlianyun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginlianyun());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginTencent loginTencent = 7;
    if (has_logintencent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logintencent());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginXiYou loginXiYou = 8;
    if (has_loginxiyou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginxiyou());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pwngs.protocol.accsrv.SLogin360 login360 = 9;
    if (has_login360()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login360());
    }
    
    // optional .pwngs.protocol.accsrv.SLoginKor loginKor = 10;
    if (has_loginkor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginkor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginNew::MergeFrom(const CSLoginNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_logininfo()) {
      mutable_logininfo()->::pwngs::protocol::accsrv::SLoginInformation::MergeFrom(from.logininfo());
    }
    if (from.has_loginuserpswd()) {
      mutable_loginuserpswd()->::pwngs::protocol::accsrv::SLoginUserPswd::MergeFrom(from.loginuserpswd());
    }
    if (from.has_login173()) {
      mutable_login173()->::pwngs::protocol::accsrv::SLogin173::MergeFrom(from.login173());
    }
    if (from.has_logintoken()) {
      mutable_logintoken()->::pwngs::protocol::accsrv::SLoginToken::MergeFrom(from.logintoken());
    }
    if (from.has_loginlianyun()) {
      mutable_loginlianyun()->::pwngs::protocol::accsrv::SLoginLianYun::MergeFrom(from.loginlianyun());
    }
    if (from.has_logintencent()) {
      mutable_logintencent()->::pwngs::protocol::accsrv::SLoginTencent::MergeFrom(from.logintencent());
    }
    if (from.has_loginxiyou()) {
      mutable_loginxiyou()->::pwngs::protocol::accsrv::SLoginXiYou::MergeFrom(from.loginxiyou());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_login360()) {
      mutable_login360()->::pwngs::protocol::accsrv::SLogin360::MergeFrom(from.login360());
    }
    if (from.has_loginkor()) {
      mutable_loginkor()->::pwngs::protocol::accsrv::SLoginKor::MergeFrom(from.loginkor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginNew::CopyFrom(const CSLoginNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_logininfo()) {
    if (!this->logininfo().IsInitialized()) return false;
  }
  if (has_loginuserpswd()) {
    if (!this->loginuserpswd().IsInitialized()) return false;
  }
  if (has_login173()) {
    if (!this->login173().IsInitialized()) return false;
  }
  if (has_logintoken()) {
    if (!this->logintoken().IsInitialized()) return false;
  }
  if (has_logintencent()) {
    if (!this->logintencent().IsInitialized()) return false;
  }
  if (has_loginxiyou()) {
    if (!this->loginxiyou().IsInitialized()) return false;
  }
  if (has_login360()) {
    if (!this->login360().IsInitialized()) return false;
  }
  if (has_loginkor()) {
    if (!this->loginkor().IsInitialized()) return false;
  }
  return true;
}

void CSLoginNew::Swap(CSLoginNew* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(logininfo_, other->logininfo_);
    std::swap(loginuserpswd_, other->loginuserpswd_);
    std::swap(login173_, other->login173_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(loginlianyun_, other->loginlianyun_);
    std::swap(logintencent_, other->logintencent_);
    std::swap(loginxiyou_, other->loginxiyou_);
    std::swap(login360_, other->login360_);
    std::swap(loginkor_, other->loginkor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginNew_descriptor_;
  metadata.reflection = CSLoginNew_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace accsrv
}  // namespace protocol
}  // namespace pwngs

// @@protoc_insertion_point(global_scope)
