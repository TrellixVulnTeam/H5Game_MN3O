// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "process_proto/20000_29999_misc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pwngs {
namespace protocol {
namespace worldsrv {

namespace {

const ::google::protobuf::Descriptor* SCCharacterKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCharacterKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLevelup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLevelup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSTimeCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTimeCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCPong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto() {
  protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "process_proto/20000_29999_misc.proto");
  GOOGLE_CHECK(file != NULL);
  SCCharacterKick_descriptor_ = file->message_type(0);
  static const int SCCharacterKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterKick, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterKick, error_),
  };
  SCCharacterKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCharacterKick_descriptor_,
      SCCharacterKick::default_instance_,
      SCCharacterKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCharacterKick));
  SCLevelup_descriptor_ = file->message_type(1);
  static const int SCLevelup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLevelup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLevelup, level_),
  };
  SCLevelup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCLevelup_descriptor_,
      SCLevelup::default_instance_,
      SCLevelup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLevelup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLevelup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCLevelup));
  CSTimeCheck_descriptor_ = file->message_type(2);
  static const int CSTimeCheck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTimeCheck, data_),
  };
  CSTimeCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSTimeCheck_descriptor_,
      CSTimeCheck::default_instance_,
      CSTimeCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTimeCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTimeCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSTimeCheck));
  CSPing_descriptor_ = file->message_type(3);
  static const int CSPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPing, time_),
  };
  CSPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPing_descriptor_,
      CSPing::default_instance_,
      CSPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPing));
  SCPong_descriptor_ = file->message_type(4);
  static const int SCPong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPong, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPong, server_time_),
  };
  SCPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCPong_descriptor_,
      SCPong::default_instance_,
      SCPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCPong));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCharacterKick_descriptor_, &SCCharacterKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCLevelup_descriptor_, &SCLevelup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSTimeCheck_descriptor_, &CSTimeCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPing_descriptor_, &CSPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCPong_descriptor_, &SCPong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_process_5fproto_2f20000_5f29999_5fmisc_2eproto() {
  delete SCCharacterKick::default_instance_;
  delete SCCharacterKick_reflection_;
  delete SCLevelup::default_instance_;
  delete SCLevelup_reflection_;
  delete CSTimeCheck::default_instance_;
  delete CSTimeCheck_reflection_;
  delete CSPing::default_instance_;
  delete CSPing_reflection_;
  delete SCPong::default_instance_;
  delete SCPong_reflection_;
}

void protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pwngs::protobuf_AddDesc_pwngs_2foptions_2eproto();
  ::pwngs::protocol::worldsrv::protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$process_proto/20000_29999_misc.proto\022\027"
    "pwngs.protocol.worldsrv\032\023pwngs/options.p"
    "roto\032-pwngs/protocol/worldsrv/00000_0000"
    "0_def.proto\"8\n\017SCCharacterKick\022\016\n\006reason"
    "\030\001 \002(\005\022\r\n\005error\030\002 \001(\014:\006\210\303\032\240\234\001\".\n\tSCLevel"
    "up\022\n\n\002id\030\001 \002(\003\022\r\n\005level\030\002 \002(\005:\006\210\303\032\241\234\001\"#\n"
    "\013CSTimeCheck\022\014\n\004data\030\001 \001(\003:\006\210\303\032\251\234\001\"\036\n\006CS"
    "Ping\022\014\n\004time\030\001 \002(\002:\006\210\303\032\252\234\001\"3\n\006SCPong\022\014\n\004"
    "time\030\002 \002(\002\022\023\n\013server_time\030\003 \002(\003:\006\210\303\032\253\234\001", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "process_proto/20000_29999_misc.proto", &protobuf_RegisterTypes);
  SCCharacterKick::default_instance_ = new SCCharacterKick();
  SCLevelup::default_instance_ = new SCLevelup();
  CSTimeCheck::default_instance_ = new CSTimeCheck();
  CSPing::default_instance_ = new CSPing();
  SCPong::default_instance_ = new SCPong();
  SCCharacterKick::default_instance_->InitAsDefaultInstance();
  SCLevelup::default_instance_->InitAsDefaultInstance();
  CSTimeCheck::default_instance_->InitAsDefaultInstance();
  CSPing::default_instance_->InitAsDefaultInstance();
  SCPong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_process_5fproto_2f20000_5f29999_5fmisc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_process_5fproto_2f20000_5f29999_5fmisc_2eproto {
  StaticDescriptorInitializer_process_5fproto_2f20000_5f29999_5fmisc_2eproto() {
    protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();
  }
} static_descriptor_initializer_process_5fproto_2f20000_5f29999_5fmisc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SCCharacterKick::kReasonFieldNumber;
const int SCCharacterKick::kErrorFieldNumber;
#endif  // !_MSC_VER

SCCharacterKick::SCCharacterKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCharacterKick::InitAsDefaultInstance() {
}

SCCharacterKick::SCCharacterKick(const SCCharacterKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCharacterKick::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCharacterKick::~SCCharacterKick() {
  SharedDtor();
}

void SCCharacterKick::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SCCharacterKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCharacterKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCharacterKick_descriptor_;
}

const SCCharacterKick& SCCharacterKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();  return *default_instance_;
}

SCCharacterKick* SCCharacterKick::default_instance_ = NULL;

SCCharacterKick* SCCharacterKick::New() const {
  return new SCCharacterKick;
}

void SCCharacterKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCharacterKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional bytes error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
          error_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCharacterKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }
  
  // optional bytes error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCharacterKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }
  
  // optional bytes error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCharacterKick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
    // optional bytes error = 2;
    if (has_error()) {
      std::string error_tmp = pwutils::utf8_from_mbs(error());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          error_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCharacterKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCharacterKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCharacterKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCharacterKick::MergeFrom(const SCCharacterKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCharacterKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCharacterKick::CopyFrom(const SCCharacterKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCharacterKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCCharacterKick::Swap(SCCharacterKick* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCharacterKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCharacterKick_descriptor_;
  metadata.reflection = SCCharacterKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCLevelup::kIdFieldNumber;
const int SCLevelup::kLevelFieldNumber;
#endif  // !_MSC_VER

SCLevelup::SCLevelup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCLevelup::InitAsDefaultInstance() {
}

SCLevelup::SCLevelup(const SCLevelup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCLevelup::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLevelup::~SCLevelup() {
  SharedDtor();
}

void SCLevelup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCLevelup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLevelup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLevelup_descriptor_;
}

const SCLevelup& SCLevelup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();  return *default_instance_;
}

SCLevelup* SCLevelup::default_instance_ = NULL;

SCLevelup* SCLevelup::New() const {
  return new SCLevelup;
}

void SCLevelup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCLevelup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCLevelup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCLevelup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCLevelup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLevelup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCLevelup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCLevelup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLevelup::MergeFrom(const SCLevelup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCLevelup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLevelup::CopyFrom(const SCLevelup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLevelup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SCLevelup::Swap(SCLevelup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCLevelup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLevelup_descriptor_;
  metadata.reflection = SCLevelup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSTimeCheck::kDataFieldNumber;
#endif  // !_MSC_VER

CSTimeCheck::CSTimeCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSTimeCheck::InitAsDefaultInstance() {
}

CSTimeCheck::CSTimeCheck(const CSTimeCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSTimeCheck::SharedCtor() {
  _cached_size_ = 0;
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTimeCheck::~CSTimeCheck() {
  SharedDtor();
}

void CSTimeCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSTimeCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTimeCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTimeCheck_descriptor_;
}

const CSTimeCheck& CSTimeCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();  return *default_instance_;
}

CSTimeCheck* CSTimeCheck::default_instance_ = NULL;

CSTimeCheck* CSTimeCheck::New() const {
  return new CSTimeCheck;
}

void CSTimeCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSTimeCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTimeCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSTimeCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSTimeCheck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTimeCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSTimeCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSTimeCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSTimeCheck::MergeFrom(const CSTimeCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSTimeCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTimeCheck::CopyFrom(const CSTimeCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTimeCheck::IsInitialized() const {
  
  return true;
}

void CSTimeCheck::Swap(CSTimeCheck* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSTimeCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTimeCheck_descriptor_;
  metadata.reflection = CSTimeCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPing::kTimeFieldNumber;
#endif  // !_MSC_VER

CSPing::CSPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPing::InitAsDefaultInstance() {
}

CSPing::CSPing(const CSPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPing::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPing::~CSPing() {
  SharedDtor();
}

void CSPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPing_descriptor_;
}

const CSPing& CSPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();  return *default_instance_;
}

CSPing* CSPing::default_instance_ = NULL;

CSPing* CSPing::New() const {
  return new CSPing;
}

void CSPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float time = 1;
    if (has_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPing::MergeFrom(const CSPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPing::CopyFrom(const CSPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSPing::Swap(CSPing* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPing_descriptor_;
  metadata.reflection = CSPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCPong::kTimeFieldNumber;
const int SCPong::kServerTimeFieldNumber;
#endif  // !_MSC_VER

SCPong::SCPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCPong::InitAsDefaultInstance() {
}

SCPong::SCPong(const SCPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCPong::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  server_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCPong::~SCPong() {
  SharedDtor();
}

void SCPong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCPong_descriptor_;
}

const SCPong& SCPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f20000_5f29999_5fmisc_2eproto();  return *default_instance_;
}

SCPong* SCPong::default_instance_ = NULL;

SCPong* SCPong::New() const {
  return new SCPong;
}

void SCPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    server_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_time;
        break;
      }
      
      // required int64 server_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }
  
  // required int64 server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->server_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }
  
  // required int64 server_time = 3;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->server_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCPong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float time = 2;
    if (has_time()) {
      total_size += 1 + 4;
    }
    
    // required int64 server_time = 3;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCPong::MergeFrom(const SCPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPong::CopyFrom(const SCPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SCPong::Swap(SCPong* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCPong_descriptor_;
  metadata.reflection = SCPong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace worldsrv
}  // namespace protocol
}  // namespace pwngs

// @@protoc_insertion_point(global_scope)
