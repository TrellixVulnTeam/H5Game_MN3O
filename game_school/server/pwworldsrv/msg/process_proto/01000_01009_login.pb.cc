// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "process_proto/01000_01009_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pwngs {
namespace protocol {
namespace worldsrv {

namespace {

const ::google::protobuf::Descriptor* SCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginBegan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginBegan_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCLoginGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCLoginGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryCharacters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryCharacters_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCQueryCharacters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCQueryCharacters_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCharacterCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCharacterCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCharacterCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCharacterCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCharacterDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCharacterDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCharacterDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCharacterDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLadderInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLadderInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCharacterLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCharacterLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SServerInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SServerInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCharacterLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCharacterLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCharacterEnterWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCharacterEnterWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCharacterRevert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCharacterRevert_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCharacterRevert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCharacterRevert_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCDroppedHumanHint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCDroppedHumanHint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSKickDroppedHuman_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSKickDroppedHuman_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSLoginEnded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSLoginEnded_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto() {
  protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "process_proto/01000_01009_login.proto");
  GOOGLE_CHECK(file != NULL);
  SCharacter_descriptor_ = file->message_type(0);
  static const int SCharacter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, newbie_),
  };
  SCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCharacter_descriptor_,
      SCharacter::default_instance_,
      SCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCharacter));
  CSLoginBegan_descriptor_ = file->message_type(1);
  static const int CSLoginBegan_offsets_[1] = {
  };
  CSLoginBegan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginBegan_descriptor_,
      CSLoginBegan::default_instance_,
      CSLoginBegan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginBegan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginBegan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginBegan));
  CSLoginGate_descriptor_ = file->message_type(2);
  static const int CSLoginGate_offsets_[1] = {
  };
  CSLoginGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginGate_descriptor_,
      CSLoginGate::default_instance_,
      CSLoginGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginGate));
  SCLoginGate_descriptor_ = file->message_type(3);
  static const int SCLoginGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginGate, result_),
  };
  SCLoginGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCLoginGate_descriptor_,
      SCLoginGate::default_instance_,
      SCLoginGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCLoginGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCLoginGate));
  CSQueryCharacters_descriptor_ = file->message_type(4);
  static const int CSQueryCharacters_offsets_[1] = {
  };
  CSQueryCharacters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryCharacters_descriptor_,
      CSQueryCharacters::default_instance_,
      CSQueryCharacters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryCharacters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryCharacters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryCharacters));
  SCQueryCharacters_descriptor_ = file->message_type(5);
  static const int SCQueryCharacters_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQueryCharacters, characters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQueryCharacters, last_login_hid_),
  };
  SCQueryCharacters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCQueryCharacters_descriptor_,
      SCQueryCharacters::default_instance_,
      SCQueryCharacters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQueryCharacters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQueryCharacters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCQueryCharacters));
  CSCharacterCreate_descriptor_ = file->message_type(6);
  static const int CSCharacterCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterCreate, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterCreate, sex_),
  };
  CSCharacterCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCharacterCreate_descriptor_,
      CSCharacterCreate::default_instance_,
      CSCharacterCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCharacterCreate));
  SCCharacterCreate_descriptor_ = file->message_type(7);
  static const int SCCharacterCreate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterCreate, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterCreate, character_),
  };
  SCCharacterCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCharacterCreate_descriptor_,
      SCCharacterCreate::default_instance_,
      SCCharacterCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCharacterCreate));
  CSCharacterDelete_descriptor_ = file->message_type(8);
  static const int CSCharacterDelete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterDelete, id_),
  };
  CSCharacterDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCharacterDelete_descriptor_,
      CSCharacterDelete::default_instance_,
      CSCharacterDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCharacterDelete));
  SCCharacterDelete_descriptor_ = file->message_type(9);
  static const int SCCharacterDelete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterDelete, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterDelete, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterDelete, survive_time_),
  };
  SCCharacterDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCharacterDelete_descriptor_,
      SCCharacterDelete::default_instance_,
      SCCharacterDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCharacterDelete));
  SLadderInformation_descriptor_ = file->message_type(10);
  static const int SLadderInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLadderInformation, basemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLadderInformation, gamemap_),
  };
  SLadderInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLadderInformation_descriptor_,
      SLadderInformation::default_instance_,
      SLadderInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLadderInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLadderInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLadderInformation));
  CSCharacterLogin_descriptor_ = file->message_type(11);
  static const int CSCharacterLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterLogin, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterLogin, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterLogin, ladder_info_),
  };
  CSCharacterLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCharacterLogin_descriptor_,
      CSCharacterLogin::default_instance_,
      CSCharacterLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCharacterLogin));
  SServerInformation_descriptor_ = file->message_type(12);
  static const int SServerInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SServerInformation, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SServerInformation, operators_name_),
  };
  SServerInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SServerInformation_descriptor_,
      SServerInformation::default_instance_,
      SServerInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SServerInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SServerInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SServerInformation));
  SCCharacterLogin_descriptor_ = file->message_type(13);
  static const int SCCharacterLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterLogin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterLogin, error_),
  };
  SCCharacterLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCharacterLogin_descriptor_,
      SCCharacterLogin::default_instance_,
      SCCharacterLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCharacterLogin));
  CSCharacterEnterWorld_descriptor_ = file->message_type(14);
  static const int CSCharacterEnterWorld_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterEnterWorld, id_),
  };
  CSCharacterEnterWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCharacterEnterWorld_descriptor_,
      CSCharacterEnterWorld::default_instance_,
      CSCharacterEnterWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterEnterWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterEnterWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCharacterEnterWorld));
  CSCharacterRevert_descriptor_ = file->message_type(15);
  static const int CSCharacterRevert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterRevert, id_),
  };
  CSCharacterRevert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCharacterRevert_descriptor_,
      CSCharacterRevert::default_instance_,
      CSCharacterRevert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterRevert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCharacterRevert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCharacterRevert));
  SCCharacterRevert_descriptor_ = file->message_type(16);
  static const int SCCharacterRevert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterRevert, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterRevert, id_),
  };
  SCCharacterRevert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCharacterRevert_descriptor_,
      SCCharacterRevert::default_instance_,
      SCCharacterRevert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterRevert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCharacterRevert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCharacterRevert));
  SCDroppedHumanHint_descriptor_ = file->message_type(17);
  static const int SCDroppedHumanHint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDroppedHumanHint, dropped_hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDroppedHumanHint, dropped_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDroppedHumanHint, request_hid_),
  };
  SCDroppedHumanHint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCDroppedHumanHint_descriptor_,
      SCDroppedHumanHint::default_instance_,
      SCDroppedHumanHint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDroppedHumanHint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDroppedHumanHint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCDroppedHumanHint));
  CSKickDroppedHuman_descriptor_ = file->message_type(18);
  static const int CSKickDroppedHuman_offsets_[1] = {
  };
  CSKickDroppedHuman_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSKickDroppedHuman_descriptor_,
      CSKickDroppedHuman::default_instance_,
      CSKickDroppedHuman_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKickDroppedHuman, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSKickDroppedHuman, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSKickDroppedHuman));
  CSLoginEnded_descriptor_ = file->message_type(19);
  static const int CSLoginEnded_offsets_[1] = {
  };
  CSLoginEnded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSLoginEnded_descriptor_,
      CSLoginEnded::default_instance_,
      CSLoginEnded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEnded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSLoginEnded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSLoginEnded));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCharacter_descriptor_, &SCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginBegan_descriptor_, &CSLoginBegan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginGate_descriptor_, &CSLoginGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCLoginGate_descriptor_, &SCLoginGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryCharacters_descriptor_, &CSQueryCharacters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCQueryCharacters_descriptor_, &SCQueryCharacters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCharacterCreate_descriptor_, &CSCharacterCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCharacterCreate_descriptor_, &SCCharacterCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCharacterDelete_descriptor_, &CSCharacterDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCharacterDelete_descriptor_, &SCCharacterDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLadderInformation_descriptor_, &SLadderInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCharacterLogin_descriptor_, &CSCharacterLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SServerInformation_descriptor_, &SServerInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCharacterLogin_descriptor_, &SCCharacterLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCharacterEnterWorld_descriptor_, &CSCharacterEnterWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCharacterRevert_descriptor_, &CSCharacterRevert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCharacterRevert_descriptor_, &SCCharacterRevert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCDroppedHumanHint_descriptor_, &SCDroppedHumanHint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSKickDroppedHuman_descriptor_, &CSKickDroppedHuman::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSLoginEnded_descriptor_, &CSLoginEnded::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_process_5fproto_2f01000_5f01009_5flogin_2eproto() {
  delete SCharacter::default_instance_;
  delete SCharacter_reflection_;
  delete CSLoginBegan::default_instance_;
  delete CSLoginBegan_reflection_;
  delete CSLoginGate::default_instance_;
  delete CSLoginGate_reflection_;
  delete SCLoginGate::default_instance_;
  delete SCLoginGate_reflection_;
  delete CSQueryCharacters::default_instance_;
  delete CSQueryCharacters_reflection_;
  delete SCQueryCharacters::default_instance_;
  delete SCQueryCharacters_reflection_;
  delete CSCharacterCreate::default_instance_;
  delete CSCharacterCreate_reflection_;
  delete SCCharacterCreate::default_instance_;
  delete SCCharacterCreate_reflection_;
  delete CSCharacterDelete::default_instance_;
  delete CSCharacterDelete_reflection_;
  delete SCCharacterDelete::default_instance_;
  delete SCCharacterDelete_reflection_;
  delete SLadderInformation::default_instance_;
  delete SLadderInformation_reflection_;
  delete CSCharacterLogin::default_instance_;
  delete CSCharacterLogin_reflection_;
  delete SServerInformation::default_instance_;
  delete SServerInformation_reflection_;
  delete SCCharacterLogin::default_instance_;
  delete SCCharacterLogin_reflection_;
  delete CSCharacterEnterWorld::default_instance_;
  delete CSCharacterEnterWorld_reflection_;
  delete CSCharacterRevert::default_instance_;
  delete CSCharacterRevert_reflection_;
  delete SCCharacterRevert::default_instance_;
  delete SCCharacterRevert_reflection_;
  delete SCDroppedHumanHint::default_instance_;
  delete SCDroppedHumanHint_reflection_;
  delete CSKickDroppedHuman::default_instance_;
  delete CSKickDroppedHuman_reflection_;
  delete CSLoginEnded::default_instance_;
  delete CSLoginEnded_reflection_;
}

void protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pwngs::protobuf_AddDesc_pwngs_2foptions_2eproto();
  ::pwngs::protocol::worldsrv::protobuf_AddDesc_pwngs_2fprotocol_2fworldsrv_2f00000_5f00000_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%process_proto/01000_01009_login.proto\022"
    "\027pwngs.protocol.worldsrv\032\023pwngs/options."
    "proto\032-pwngs/protocol/worldsrv/00000_000"
    "00_def.proto\"f\n\nSCharacter\022\n\n\002id\030\001 \002(\003\022\014"
    "\n\004name\030\002 \002(\014\022\022\n\nprofession\030\003 \002(\005\022\r\n\005leve"
    "l\030\004 \002(\005\022\013\n\003sex\030\005 \002(\005\022\016\n\006newbie\030\006 \002(\010\"\025\n\014"
    "CSLoginBegan:\005\210\303\032\350\007\"\024\n\013CSLoginGate:\005\210\303\032\351"
    "\007\"$\n\013SCLoginGate\022\016\n\006result\030\001 \002(\005:\005\210\303\032\352\007\""
    "\032\n\021CSQueryCharacters:\005\210\303\032\353\007\"k\n\021SCQueryCh"
    "aracters\0227\n\ncharacters\030\001 \003(\0132#.pwngs.pro"
    "tocol.worldsrv.SCharacter\022\026\n\016last_login_"
    "hid\030\002 \001(\003:\005\210\303\032\354\007\"I\n\021CSCharacterCreate\022\014\n"
    "\004name\030\001 \002(\014\022\022\n\nprofession\030\002 \002(\005\022\013\n\003sex\030\003"
    " \002(\005:\005\210\303\032\355\007\"b\n\021SCCharacterCreate\022\016\n\006resu"
    "lt\030\001 \002(\005\0226\n\tcharacter\030\002 \001(\0132#.pwngs.prot"
    "ocol.worldsrv.SCharacter:\005\210\303\032\356\007\"&\n\021CSCha"
    "racterDelete\022\n\n\002id\030\001 \002(\003:\005\210\303\032\357\007\"L\n\021SCCha"
    "racterDelete\022\016\n\006result\030\001 \002(\005\022\n\n\002id\030\002 \001(\003"
    "\022\024\n\014survive_time\030\003 \001(\003:\005\210\303\032\360\007\"6\n\022SLadder"
    "Information\022\017\n\007basemap\030\001 \002(\005\022\017\n\007gamemap\030"
    "\002 \002(\003\"u\n\020CSCharacterLogin\022\013\n\003cid\030\001 \002(\003\022\013"
    "\n\003mac\030\002 \001(\014\022@\n\013ladder_info\030\003 \001(\0132+.pwngs"
    ".protocol.worldsrv.SLadderInformation:\005\210"
    "\303\032\361\007\"=\n\022SServerInformation\022\017\n\007zone_id\030\001 "
    "\002(\003\022\026\n\016operators_name\030\002 \002(\014\"8\n\020SCCharact"
    "erLogin\022\016\n\006result\030\001 \002(\005\022\r\n\005error\030\002 \001(\014:\005"
    "\210\303\032\362\007\"*\n\025CSCharacterEnterWorld\022\n\n\002id\030\001 \002"
    "(\003:\005\210\303\032\363\007\"&\n\021CSCharacterRevert\022\n\n\002id\030\001 \002"
    "(\003:\005\210\303\032\206\010\"6\n\021SCCharacterRevert\022\016\n\006result"
    "\030\001 \002(\005\022\n\n\002id\030\002 \001(\003:\005\210\303\032\207\010\"\\\n\022SCDroppedHu"
    "manHint\022\023\n\013dropped_hid\030\001 \002(\003\022\025\n\rdropped_"
    "scene\030\002 \002(\005\022\023\n\013request_hid\030\003 \002(\003:\005\210\303\032\213\010\""
    "\033\n\022CSKickDroppedHuman:\005\210\303\032\214\010\"\025\n\014CSLoginE"
    "nded:\005\210\303\032\257\t", 1331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "process_proto/01000_01009_login.proto", &protobuf_RegisterTypes);
  SCharacter::default_instance_ = new SCharacter();
  CSLoginBegan::default_instance_ = new CSLoginBegan();
  CSLoginGate::default_instance_ = new CSLoginGate();
  SCLoginGate::default_instance_ = new SCLoginGate();
  CSQueryCharacters::default_instance_ = new CSQueryCharacters();
  SCQueryCharacters::default_instance_ = new SCQueryCharacters();
  CSCharacterCreate::default_instance_ = new CSCharacterCreate();
  SCCharacterCreate::default_instance_ = new SCCharacterCreate();
  CSCharacterDelete::default_instance_ = new CSCharacterDelete();
  SCCharacterDelete::default_instance_ = new SCCharacterDelete();
  SLadderInformation::default_instance_ = new SLadderInformation();
  CSCharacterLogin::default_instance_ = new CSCharacterLogin();
  SServerInformation::default_instance_ = new SServerInformation();
  SCCharacterLogin::default_instance_ = new SCCharacterLogin();
  CSCharacterEnterWorld::default_instance_ = new CSCharacterEnterWorld();
  CSCharacterRevert::default_instance_ = new CSCharacterRevert();
  SCCharacterRevert::default_instance_ = new SCCharacterRevert();
  SCDroppedHumanHint::default_instance_ = new SCDroppedHumanHint();
  CSKickDroppedHuman::default_instance_ = new CSKickDroppedHuman();
  CSLoginEnded::default_instance_ = new CSLoginEnded();
  SCharacter::default_instance_->InitAsDefaultInstance();
  CSLoginBegan::default_instance_->InitAsDefaultInstance();
  CSLoginGate::default_instance_->InitAsDefaultInstance();
  SCLoginGate::default_instance_->InitAsDefaultInstance();
  CSQueryCharacters::default_instance_->InitAsDefaultInstance();
  SCQueryCharacters::default_instance_->InitAsDefaultInstance();
  CSCharacterCreate::default_instance_->InitAsDefaultInstance();
  SCCharacterCreate::default_instance_->InitAsDefaultInstance();
  CSCharacterDelete::default_instance_->InitAsDefaultInstance();
  SCCharacterDelete::default_instance_->InitAsDefaultInstance();
  SLadderInformation::default_instance_->InitAsDefaultInstance();
  CSCharacterLogin::default_instance_->InitAsDefaultInstance();
  SServerInformation::default_instance_->InitAsDefaultInstance();
  SCCharacterLogin::default_instance_->InitAsDefaultInstance();
  CSCharacterEnterWorld::default_instance_->InitAsDefaultInstance();
  CSCharacterRevert::default_instance_->InitAsDefaultInstance();
  SCCharacterRevert::default_instance_->InitAsDefaultInstance();
  SCDroppedHumanHint::default_instance_->InitAsDefaultInstance();
  CSKickDroppedHuman::default_instance_->InitAsDefaultInstance();
  CSLoginEnded::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_process_5fproto_2f01000_5f01009_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_process_5fproto_2f01000_5f01009_5flogin_2eproto {
  StaticDescriptorInitializer_process_5fproto_2f01000_5f01009_5flogin_2eproto() {
    protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();
  }
} static_descriptor_initializer_process_5fproto_2f01000_5f01009_5flogin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SCharacter::kIdFieldNumber;
const int SCharacter::kNameFieldNumber;
const int SCharacter::kProfessionFieldNumber;
const int SCharacter::kLevelFieldNumber;
const int SCharacter::kSexFieldNumber;
const int SCharacter::kNewbieFieldNumber;
#endif  // !_MSC_VER

SCharacter::SCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCharacter::InitAsDefaultInstance() {
}

SCharacter::SCharacter(const SCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCharacter::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  level_ = 0;
  sex_ = 0;
  newbie_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCharacter::~SCharacter() {
  SharedDtor();
}

void SCharacter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCharacter_descriptor_;
}

const SCharacter& SCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCharacter* SCharacter::default_instance_ = NULL;

SCharacter* SCharacter::New() const {
  return new SCharacter;
}

void SCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0;
    level_ = 0;
    sex_ = 0;
    newbie_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
          name_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }
      
      // required int32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_newbie;
        break;
      }
      
      // required bool newbie = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newbie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newbie_)));
          set_has_newbie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  // required int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }
  
  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // required int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }
  
  // required bool newbie = 6;
  if (has_newbie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->newbie(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  // required int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }
  
  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // required int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }
  
  // required bool newbie = 6;
  if (has_newbie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->newbie(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCharacter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          name_tmp);
    }
    
    // required int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }
    
    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // required bool newbie = 6;
    if (has_newbie()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCharacter::MergeFrom(const SCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_newbie()) {
      set_newbie(from.newbie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCharacter::CopyFrom(const SCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SCharacter::Swap(SCharacter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(newbie_, other->newbie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCharacter_descriptor_;
  metadata.reflection = SCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSLoginBegan::CSLoginBegan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginBegan::InitAsDefaultInstance() {
}

CSLoginBegan::CSLoginBegan(const CSLoginBegan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginBegan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginBegan::~CSLoginBegan() {
  SharedDtor();
}

void CSLoginBegan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginBegan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginBegan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginBegan_descriptor_;
}

const CSLoginBegan& CSLoginBegan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSLoginBegan* CSLoginBegan::default_instance_ = NULL;

CSLoginBegan* CSLoginBegan::New() const {
  return new CSLoginBegan;
}

void CSLoginBegan::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginBegan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSLoginBegan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginBegan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginBegan::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginBegan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginBegan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginBegan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginBegan::MergeFrom(const CSLoginBegan& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginBegan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginBegan::CopyFrom(const CSLoginBegan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginBegan::IsInitialized() const {
  
  return true;
}

void CSLoginBegan::Swap(CSLoginBegan* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginBegan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginBegan_descriptor_;
  metadata.reflection = CSLoginBegan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSLoginGate::CSLoginGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginGate::InitAsDefaultInstance() {
}

CSLoginGate::CSLoginGate(const CSLoginGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginGate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginGate::~CSLoginGate() {
  SharedDtor();
}

void CSLoginGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginGate_descriptor_;
}

const CSLoginGate& CSLoginGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSLoginGate* CSLoginGate::default_instance_ = NULL;

CSLoginGate* CSLoginGate::New() const {
  return new CSLoginGate;
}

void CSLoginGate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSLoginGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginGate::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginGate::MergeFrom(const CSLoginGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginGate::CopyFrom(const CSLoginGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginGate::IsInitialized() const {
  
  return true;
}

void CSLoginGate::Swap(CSLoginGate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginGate_descriptor_;
  metadata.reflection = CSLoginGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCLoginGate::kResultFieldNumber;
#endif  // !_MSC_VER

SCLoginGate::SCLoginGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCLoginGate::InitAsDefaultInstance() {
}

SCLoginGate::SCLoginGate(const SCLoginGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCLoginGate::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCLoginGate::~SCLoginGate() {
  SharedDtor();
}

void SCLoginGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCLoginGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLoginGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCLoginGate_descriptor_;
}

const SCLoginGate& SCLoginGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCLoginGate* SCLoginGate::default_instance_ = NULL;

SCLoginGate* SCLoginGate::New() const {
  return new SCLoginGate;
}

void SCLoginGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCLoginGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCLoginGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCLoginGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCLoginGate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLoginGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCLoginGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCLoginGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCLoginGate::MergeFrom(const SCLoginGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCLoginGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLoginGate::CopyFrom(const SCLoginGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLoginGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCLoginGate::Swap(SCLoginGate* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCLoginGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCLoginGate_descriptor_;
  metadata.reflection = SCLoginGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSQueryCharacters::CSQueryCharacters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryCharacters::InitAsDefaultInstance() {
}

CSQueryCharacters::CSQueryCharacters(const CSQueryCharacters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryCharacters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryCharacters::~CSQueryCharacters() {
  SharedDtor();
}

void CSQueryCharacters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryCharacters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryCharacters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryCharacters_descriptor_;
}

const CSQueryCharacters& CSQueryCharacters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSQueryCharacters* CSQueryCharacters::default_instance_ = NULL;

CSQueryCharacters* CSQueryCharacters::New() const {
  return new CSQueryCharacters;
}

void CSQueryCharacters::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryCharacters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSQueryCharacters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryCharacters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryCharacters::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryCharacters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryCharacters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryCharacters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryCharacters::MergeFrom(const CSQueryCharacters& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryCharacters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryCharacters::CopyFrom(const CSQueryCharacters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryCharacters::IsInitialized() const {
  
  return true;
}

void CSQueryCharacters::Swap(CSQueryCharacters* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryCharacters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryCharacters_descriptor_;
  metadata.reflection = CSQueryCharacters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCQueryCharacters::kCharactersFieldNumber;
const int SCQueryCharacters::kLastLoginHidFieldNumber;
#endif  // !_MSC_VER

SCQueryCharacters::SCQueryCharacters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCQueryCharacters::InitAsDefaultInstance() {
}

SCQueryCharacters::SCQueryCharacters(const SCQueryCharacters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCQueryCharacters::SharedCtor() {
  _cached_size_ = 0;
  last_login_hid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCQueryCharacters::~SCQueryCharacters() {
  SharedDtor();
}

void SCQueryCharacters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCQueryCharacters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCQueryCharacters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCQueryCharacters_descriptor_;
}

const SCQueryCharacters& SCQueryCharacters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCQueryCharacters* SCQueryCharacters::default_instance_ = NULL;

SCQueryCharacters* SCQueryCharacters::New() const {
  return new SCQueryCharacters;
}

void SCQueryCharacters::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_login_hid_ = GOOGLE_LONGLONG(0);
  }
  characters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCQueryCharacters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pwngs.protocol.worldsrv.SCharacter characters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_characters;
        if (input->ExpectTag(16)) goto parse_last_login_hid;
        break;
      }
      
      // optional int64 last_login_hid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_login_hid_)));
          set_has_last_login_hid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCQueryCharacters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pwngs.protocol.worldsrv.SCharacter characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characters(i), output);
  }
  
  // optional int64 last_login_hid = 2;
  if (has_last_login_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_login_hid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCQueryCharacters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pwngs.protocol.worldsrv.SCharacter characters = 1;
  for (int i = 0; i < this->characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characters(i), target);
  }
  
  // optional int64 last_login_hid = 2;
  if (has_last_login_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_login_hid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCQueryCharacters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 last_login_hid = 2;
    if (has_last_login_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_login_hid());
    }
    
  }
  // repeated .pwngs.protocol.worldsrv.SCharacter characters = 1;
  total_size += 1 * this->characters_size();
  for (int i = 0; i < this->characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCQueryCharacters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCQueryCharacters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCQueryCharacters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCQueryCharacters::MergeFrom(const SCQueryCharacters& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_.MergeFrom(from.characters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_login_hid()) {
      set_last_login_hid(from.last_login_hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCQueryCharacters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCQueryCharacters::CopyFrom(const SCQueryCharacters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCQueryCharacters::IsInitialized() const {
  
  for (int i = 0; i < characters_size(); i++) {
    if (!this->characters(i).IsInitialized()) return false;
  }
  return true;
}

void SCQueryCharacters::Swap(SCQueryCharacters* other) {
  if (other != this) {
    characters_.Swap(&other->characters_);
    std::swap(last_login_hid_, other->last_login_hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCQueryCharacters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCQueryCharacters_descriptor_;
  metadata.reflection = SCQueryCharacters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCharacterCreate::kNameFieldNumber;
const int CSCharacterCreate::kProfessionFieldNumber;
const int CSCharacterCreate::kSexFieldNumber;
#endif  // !_MSC_VER

CSCharacterCreate::CSCharacterCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCharacterCreate::InitAsDefaultInstance() {
}

CSCharacterCreate::CSCharacterCreate(const CSCharacterCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCharacterCreate::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCharacterCreate::~CSCharacterCreate() {
  SharedDtor();
}

void CSCharacterCreate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSCharacterCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCharacterCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCharacterCreate_descriptor_;
}

const CSCharacterCreate& CSCharacterCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSCharacterCreate* CSCharacterCreate::default_instance_ = NULL;

CSCharacterCreate* CSCharacterCreate::New() const {
  return new CSCharacterCreate;
}

void CSCharacterCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCharacterCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
          name_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }
      
      // required int32 profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // required int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCharacterCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, tmp, output);
  }
  
  // required int32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profession(), output);
  }
  
  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCharacterCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    std::string tmp = pwutils::utf8_from_mbs(name());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, tmp, target);
  }
  
  // required int32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profession(), target);
  }
  
  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCharacterCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      std::string name_tmp = pwutils::utf8_from_mbs(name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          name_tmp);
    }
    
    // required int32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }
    
    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCharacterCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCharacterCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCharacterCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCharacterCreate::MergeFrom(const CSCharacterCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCharacterCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCharacterCreate::CopyFrom(const CSCharacterCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCharacterCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CSCharacterCreate::Swap(CSCharacterCreate* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCharacterCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCharacterCreate_descriptor_;
  metadata.reflection = CSCharacterCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCCharacterCreate::kResultFieldNumber;
const int SCCharacterCreate::kCharacterFieldNumber;
#endif  // !_MSC_VER

SCCharacterCreate::SCCharacterCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCharacterCreate::InitAsDefaultInstance() {
  character_ = const_cast< ::pwngs::protocol::worldsrv::SCharacter*>(&::pwngs::protocol::worldsrv::SCharacter::default_instance());
}

SCCharacterCreate::SCCharacterCreate(const SCCharacterCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCharacterCreate::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  character_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCharacterCreate::~SCCharacterCreate() {
  SharedDtor();
}

void SCCharacterCreate::SharedDtor() {
  if (this != default_instance_) {
    delete character_;
  }
}

void SCCharacterCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCharacterCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCharacterCreate_descriptor_;
}

const SCCharacterCreate& SCCharacterCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCCharacterCreate* SCCharacterCreate::default_instance_ = NULL;

SCCharacterCreate* SCCharacterCreate::New() const {
  return new SCCharacterCreate;
}

void SCCharacterCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_character()) {
      if (character_ != NULL) character_->::pwngs::protocol::worldsrv::SCharacter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCharacterCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_character;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SCharacter character = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCharacterCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional .pwngs.protocol.worldsrv.SCharacter character = 2;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->character(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCharacterCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional .pwngs.protocol.worldsrv.SCharacter character = 2;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->character(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCharacterCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional .pwngs.protocol.worldsrv.SCharacter character = 2;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCharacterCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCharacterCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCharacterCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCharacterCreate::MergeFrom(const SCCharacterCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_character()) {
      mutable_character()->::pwngs::protocol::worldsrv::SCharacter::MergeFrom(from.character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCharacterCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCharacterCreate::CopyFrom(const SCCharacterCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCharacterCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_character()) {
    if (!this->character().IsInitialized()) return false;
  }
  return true;
}

void SCCharacterCreate::Swap(SCCharacterCreate* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(character_, other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCharacterCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCharacterCreate_descriptor_;
  metadata.reflection = SCCharacterCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCharacterDelete::kIdFieldNumber;
#endif  // !_MSC_VER

CSCharacterDelete::CSCharacterDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCharacterDelete::InitAsDefaultInstance() {
}

CSCharacterDelete::CSCharacterDelete(const CSCharacterDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCharacterDelete::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCharacterDelete::~CSCharacterDelete() {
  SharedDtor();
}

void CSCharacterDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCharacterDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCharacterDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCharacterDelete_descriptor_;
}

const CSCharacterDelete& CSCharacterDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSCharacterDelete* CSCharacterDelete::default_instance_ = NULL;

CSCharacterDelete* CSCharacterDelete::New() const {
  return new CSCharacterDelete;
}

void CSCharacterDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCharacterDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCharacterDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCharacterDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCharacterDelete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCharacterDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCharacterDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCharacterDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCharacterDelete::MergeFrom(const CSCharacterDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCharacterDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCharacterDelete::CopyFrom(const CSCharacterDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCharacterDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCharacterDelete::Swap(CSCharacterDelete* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCharacterDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCharacterDelete_descriptor_;
  metadata.reflection = CSCharacterDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCCharacterDelete::kResultFieldNumber;
const int SCCharacterDelete::kIdFieldNumber;
const int SCCharacterDelete::kSurviveTimeFieldNumber;
#endif  // !_MSC_VER

SCCharacterDelete::SCCharacterDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCharacterDelete::InitAsDefaultInstance() {
}

SCCharacterDelete::SCCharacterDelete(const SCCharacterDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCharacterDelete::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  survive_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCharacterDelete::~SCCharacterDelete() {
  SharedDtor();
}

void SCCharacterDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCCharacterDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCharacterDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCharacterDelete_descriptor_;
}

const SCCharacterDelete& SCCharacterDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCCharacterDelete* SCCharacterDelete::default_instance_ = NULL;

SCCharacterDelete* SCCharacterDelete::New() const {
  return new SCCharacterDelete;
}

void SCCharacterDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    survive_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCharacterDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_survive_time;
        break;
      }
      
      // optional int64 survive_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_survive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &survive_time_)));
          set_has_survive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCharacterDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // optional int64 survive_time = 3;
  if (has_survive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->survive_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCharacterDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  // optional int64 survive_time = 3;
  if (has_survive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->survive_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCharacterDelete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 survive_time = 3;
    if (has_survive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->survive_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCharacterDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCharacterDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCharacterDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCharacterDelete::MergeFrom(const SCCharacterDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_survive_time()) {
      set_survive_time(from.survive_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCharacterDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCharacterDelete::CopyFrom(const SCCharacterDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCharacterDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCCharacterDelete::Swap(SCCharacterDelete* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(survive_time_, other->survive_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCharacterDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCharacterDelete_descriptor_;
  metadata.reflection = SCCharacterDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLadderInformation::kBasemapFieldNumber;
const int SLadderInformation::kGamemapFieldNumber;
#endif  // !_MSC_VER

SLadderInformation::SLadderInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLadderInformation::InitAsDefaultInstance() {
}

SLadderInformation::SLadderInformation(const SLadderInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLadderInformation::SharedCtor() {
  _cached_size_ = 0;
  basemap_ = 0;
  gamemap_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLadderInformation::~SLadderInformation() {
  SharedDtor();
}

void SLadderInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLadderInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLadderInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLadderInformation_descriptor_;
}

const SLadderInformation& SLadderInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SLadderInformation* SLadderInformation::default_instance_ = NULL;

SLadderInformation* SLadderInformation::New() const {
  return new SLadderInformation;
}

void SLadderInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    basemap_ = 0;
    gamemap_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLadderInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 basemap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basemap_)));
          set_has_basemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gamemap;
        break;
      }
      
      // required int64 gamemap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamemap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gamemap_)));
          set_has_gamemap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLadderInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 basemap = 1;
  if (has_basemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->basemap(), output);
  }
  
  // required int64 gamemap = 2;
  if (has_gamemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gamemap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLadderInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 basemap = 1;
  if (has_basemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->basemap(), target);
  }
  
  // required int64 gamemap = 2;
  if (has_gamemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gamemap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLadderInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 basemap = 1;
    if (has_basemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basemap());
    }
    
    // required int64 gamemap = 2;
    if (has_gamemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gamemap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLadderInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLadderInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLadderInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLadderInformation::MergeFrom(const SLadderInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basemap()) {
      set_basemap(from.basemap());
    }
    if (from.has_gamemap()) {
      set_gamemap(from.gamemap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLadderInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLadderInformation::CopyFrom(const SLadderInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLadderInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SLadderInformation::Swap(SLadderInformation* other) {
  if (other != this) {
    std::swap(basemap_, other->basemap_);
    std::swap(gamemap_, other->gamemap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLadderInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLadderInformation_descriptor_;
  metadata.reflection = SLadderInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCharacterLogin::kCidFieldNumber;
const int CSCharacterLogin::kMacFieldNumber;
const int CSCharacterLogin::kLadderInfoFieldNumber;
#endif  // !_MSC_VER

CSCharacterLogin::CSCharacterLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCharacterLogin::InitAsDefaultInstance() {
  ladder_info_ = const_cast< ::pwngs::protocol::worldsrv::SLadderInformation*>(&::pwngs::protocol::worldsrv::SLadderInformation::default_instance());
}

CSCharacterLogin::CSCharacterLogin(const CSCharacterLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCharacterLogin::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ladder_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCharacterLogin::~CSCharacterLogin() {
  SharedDtor();
}

void CSCharacterLogin::SharedDtor() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
    delete ladder_info_;
  }
}

void CSCharacterLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCharacterLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCharacterLogin_descriptor_;
}

const CSCharacterLogin& CSCharacterLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSCharacterLogin* CSCharacterLogin::default_instance_ = NULL;

CSCharacterLogin* CSCharacterLogin::New() const {
  return new CSCharacterLogin;
}

void CSCharacterLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_ladder_info()) {
      if (ladder_info_ != NULL) ladder_info_->::pwngs::protocol::worldsrv::SLadderInformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCharacterLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }
      
      // optional bytes mac = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
          mac_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ladder_info;
        break;
      }
      
      // optional .pwngs.protocol.worldsrv.SLadderInformation ladder_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ladder_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ladder_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCharacterLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }
  
  // optional bytes mac = 2;
  if (has_mac()) {
    std::string tmp = pwutils::utf8_from_mbs(mac());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  // optional .pwngs.protocol.worldsrv.SLadderInformation ladder_info = 3;
  if (has_ladder_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ladder_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCharacterLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }
  
  // optional bytes mac = 2;
  if (has_mac()) {
    std::string tmp = pwutils::utf8_from_mbs(mac());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  // optional .pwngs.protocol.worldsrv.SLadderInformation ladder_info = 3;
  if (has_ladder_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ladder_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCharacterLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }
    
    // optional bytes mac = 2;
    if (has_mac()) {
      std::string mac_tmp = pwutils::utf8_from_mbs(mac());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          mac_tmp);
    }
    
    // optional .pwngs.protocol.worldsrv.SLadderInformation ladder_info = 3;
    if (has_ladder_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ladder_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCharacterLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCharacterLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCharacterLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCharacterLogin::MergeFrom(const CSCharacterLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_ladder_info()) {
      mutable_ladder_info()->::pwngs::protocol::worldsrv::SLadderInformation::MergeFrom(from.ladder_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCharacterLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCharacterLogin::CopyFrom(const CSCharacterLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCharacterLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ladder_info()) {
    if (!this->ladder_info().IsInitialized()) return false;
  }
  return true;
}

void CSCharacterLogin::Swap(CSCharacterLogin* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(mac_, other->mac_);
    std::swap(ladder_info_, other->ladder_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCharacterLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCharacterLogin_descriptor_;
  metadata.reflection = CSCharacterLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SServerInformation::kZoneIdFieldNumber;
const int SServerInformation::kOperatorsNameFieldNumber;
#endif  // !_MSC_VER

SServerInformation::SServerInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SServerInformation::InitAsDefaultInstance() {
}

SServerInformation::SServerInformation(const SServerInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SServerInformation::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = GOOGLE_LONGLONG(0);
  operators_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SServerInformation::~SServerInformation() {
  SharedDtor();
}

void SServerInformation::SharedDtor() {
  if (operators_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operators_name_;
  }
  if (this != default_instance_) {
  }
}

void SServerInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SServerInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SServerInformation_descriptor_;
}

const SServerInformation& SServerInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SServerInformation* SServerInformation::default_instance_ = NULL;

SServerInformation* SServerInformation::New() const {
  return new SServerInformation;
}

void SServerInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = GOOGLE_LONGLONG(0);
    if (has_operators_name()) {
      if (operators_name_ != &::google::protobuf::internal::kEmptyString) {
        operators_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SServerInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operators_name;
        break;
      }
      
      // required bytes operators_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operators_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operators_name()));
          operators_name_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SServerInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->zone_id(), output);
  }
  
  // required bytes operators_name = 2;
  if (has_operators_name()) {
    std::string tmp = pwutils::utf8_from_mbs(operators_name());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SServerInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->zone_id(), target);
  }
  
  // required bytes operators_name = 2;
  if (has_operators_name()) {
    std::string tmp = pwutils::utf8_from_mbs(operators_name());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SServerInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zone_id());
    }
    
    // required bytes operators_name = 2;
    if (has_operators_name()) {
      std::string operators_name_tmp = pwutils::utf8_from_mbs(operators_name());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          operators_name_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SServerInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SServerInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SServerInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SServerInformation::MergeFrom(const SServerInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_operators_name()) {
      set_operators_name(from.operators_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SServerInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SServerInformation::CopyFrom(const SServerInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SServerInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SServerInformation::Swap(SServerInformation* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(operators_name_, other->operators_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SServerInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SServerInformation_descriptor_;
  metadata.reflection = SServerInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCCharacterLogin::kResultFieldNumber;
const int SCCharacterLogin::kErrorFieldNumber;
#endif  // !_MSC_VER

SCCharacterLogin::SCCharacterLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCharacterLogin::InitAsDefaultInstance() {
}

SCCharacterLogin::SCCharacterLogin(const SCCharacterLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCharacterLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCharacterLogin::~SCCharacterLogin() {
  SharedDtor();
}

void SCCharacterLogin::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SCCharacterLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCharacterLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCharacterLogin_descriptor_;
}

const SCCharacterLogin& SCCharacterLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCCharacterLogin* SCCharacterLogin::default_instance_ = NULL;

SCCharacterLogin* SCCharacterLogin::New() const {
  return new SCCharacterLogin;
}

void SCCharacterLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCharacterLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional bytes error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
          error_to_mbs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCharacterLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional bytes error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, tmp, output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCharacterLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes error = 2;
  if (has_error()) {
    std::string tmp = pwutils::utf8_from_mbs(error());
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, tmp, target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCharacterLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional bytes error = 2;
    if (has_error()) {
      std::string error_tmp = pwutils::utf8_from_mbs(error());
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          error_tmp);
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCharacterLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCharacterLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCharacterLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCharacterLogin::MergeFrom(const SCCharacterLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCharacterLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCharacterLogin::CopyFrom(const SCCharacterLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCharacterLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCCharacterLogin::Swap(SCCharacterLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCharacterLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCharacterLogin_descriptor_;
  metadata.reflection = SCCharacterLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCharacterEnterWorld::kIdFieldNumber;
#endif  // !_MSC_VER

CSCharacterEnterWorld::CSCharacterEnterWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCharacterEnterWorld::InitAsDefaultInstance() {
}

CSCharacterEnterWorld::CSCharacterEnterWorld(const CSCharacterEnterWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCharacterEnterWorld::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCharacterEnterWorld::~CSCharacterEnterWorld() {
  SharedDtor();
}

void CSCharacterEnterWorld::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCharacterEnterWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCharacterEnterWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCharacterEnterWorld_descriptor_;
}

const CSCharacterEnterWorld& CSCharacterEnterWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSCharacterEnterWorld* CSCharacterEnterWorld::default_instance_ = NULL;

CSCharacterEnterWorld* CSCharacterEnterWorld::New() const {
  return new CSCharacterEnterWorld;
}

void CSCharacterEnterWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCharacterEnterWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCharacterEnterWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCharacterEnterWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCharacterEnterWorld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCharacterEnterWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCharacterEnterWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCharacterEnterWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCharacterEnterWorld::MergeFrom(const CSCharacterEnterWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCharacterEnterWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCharacterEnterWorld::CopyFrom(const CSCharacterEnterWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCharacterEnterWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCharacterEnterWorld::Swap(CSCharacterEnterWorld* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCharacterEnterWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCharacterEnterWorld_descriptor_;
  metadata.reflection = CSCharacterEnterWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCharacterRevert::kIdFieldNumber;
#endif  // !_MSC_VER

CSCharacterRevert::CSCharacterRevert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSCharacterRevert::InitAsDefaultInstance() {
}

CSCharacterRevert::CSCharacterRevert(const CSCharacterRevert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSCharacterRevert::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCharacterRevert::~CSCharacterRevert() {
  SharedDtor();
}

void CSCharacterRevert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCharacterRevert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCharacterRevert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCharacterRevert_descriptor_;
}

const CSCharacterRevert& CSCharacterRevert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSCharacterRevert* CSCharacterRevert::default_instance_ = NULL;

CSCharacterRevert* CSCharacterRevert::New() const {
  return new CSCharacterRevert;
}

void CSCharacterRevert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCharacterRevert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCharacterRevert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSCharacterRevert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSCharacterRevert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCharacterRevert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCharacterRevert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCharacterRevert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCharacterRevert::MergeFrom(const CSCharacterRevert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCharacterRevert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCharacterRevert::CopyFrom(const CSCharacterRevert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCharacterRevert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CSCharacterRevert::Swap(CSCharacterRevert* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCharacterRevert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCharacterRevert_descriptor_;
  metadata.reflection = CSCharacterRevert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCCharacterRevert::kResultFieldNumber;
const int SCCharacterRevert::kIdFieldNumber;
#endif  // !_MSC_VER

SCCharacterRevert::SCCharacterRevert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCharacterRevert::InitAsDefaultInstance() {
}

SCCharacterRevert::SCCharacterRevert(const SCCharacterRevert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCharacterRevert::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCharacterRevert::~SCCharacterRevert() {
  SharedDtor();
}

void SCCharacterRevert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCCharacterRevert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCharacterRevert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCharacterRevert_descriptor_;
}

const SCCharacterRevert& SCCharacterRevert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCCharacterRevert* SCCharacterRevert::default_instance_ = NULL;

SCCharacterRevert* SCCharacterRevert::New() const {
  return new SCCharacterRevert;
}

void SCCharacterRevert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCharacterRevert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCharacterRevert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCharacterRevert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCharacterRevert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCharacterRevert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCharacterRevert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCharacterRevert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCharacterRevert::MergeFrom(const SCCharacterRevert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCharacterRevert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCharacterRevert::CopyFrom(const SCCharacterRevert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCharacterRevert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCCharacterRevert::Swap(SCCharacterRevert* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCharacterRevert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCharacterRevert_descriptor_;
  metadata.reflection = SCCharacterRevert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCDroppedHumanHint::kDroppedHidFieldNumber;
const int SCDroppedHumanHint::kDroppedSceneFieldNumber;
const int SCDroppedHumanHint::kRequestHidFieldNumber;
#endif  // !_MSC_VER

SCDroppedHumanHint::SCDroppedHumanHint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCDroppedHumanHint::InitAsDefaultInstance() {
}

SCDroppedHumanHint::SCDroppedHumanHint(const SCDroppedHumanHint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCDroppedHumanHint::SharedCtor() {
  _cached_size_ = 0;
  dropped_hid_ = GOOGLE_LONGLONG(0);
  dropped_scene_ = 0;
  request_hid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCDroppedHumanHint::~SCDroppedHumanHint() {
  SharedDtor();
}

void SCDroppedHumanHint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCDroppedHumanHint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCDroppedHumanHint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCDroppedHumanHint_descriptor_;
}

const SCDroppedHumanHint& SCDroppedHumanHint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

SCDroppedHumanHint* SCDroppedHumanHint::default_instance_ = NULL;

SCDroppedHumanHint* SCDroppedHumanHint::New() const {
  return new SCDroppedHumanHint;
}

void SCDroppedHumanHint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropped_hid_ = GOOGLE_LONGLONG(0);
    dropped_scene_ = 0;
    request_hid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCDroppedHumanHint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dropped_hid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropped_hid_)));
          set_has_dropped_hid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dropped_scene;
        break;
      }
      
      // required int32 dropped_scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropped_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_scene_)));
          set_has_dropped_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_request_hid;
        break;
      }
      
      // required int64 request_hid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_hid_)));
          set_has_request_hid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCDroppedHumanHint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dropped_hid = 1;
  if (has_dropped_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dropped_hid(), output);
  }
  
  // required int32 dropped_scene = 2;
  if (has_dropped_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dropped_scene(), output);
  }
  
  // required int64 request_hid = 3;
  if (has_request_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->request_hid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCDroppedHumanHint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dropped_hid = 1;
  if (has_dropped_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dropped_hid(), target);
  }
  
  // required int32 dropped_scene = 2;
  if (has_dropped_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dropped_scene(), target);
  }
  
  // required int64 request_hid = 3;
  if (has_request_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->request_hid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCDroppedHumanHint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dropped_hid = 1;
    if (has_dropped_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dropped_hid());
    }
    
    // required int32 dropped_scene = 2;
    if (has_dropped_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropped_scene());
    }
    
    // required int64 request_hid = 3;
    if (has_request_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_hid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCDroppedHumanHint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCDroppedHumanHint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCDroppedHumanHint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCDroppedHumanHint::MergeFrom(const SCDroppedHumanHint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropped_hid()) {
      set_dropped_hid(from.dropped_hid());
    }
    if (from.has_dropped_scene()) {
      set_dropped_scene(from.dropped_scene());
    }
    if (from.has_request_hid()) {
      set_request_hid(from.request_hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCDroppedHumanHint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDroppedHumanHint::CopyFrom(const SCDroppedHumanHint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDroppedHumanHint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SCDroppedHumanHint::Swap(SCDroppedHumanHint* other) {
  if (other != this) {
    std::swap(dropped_hid_, other->dropped_hid_);
    std::swap(dropped_scene_, other->dropped_scene_);
    std::swap(request_hid_, other->request_hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCDroppedHumanHint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCDroppedHumanHint_descriptor_;
  metadata.reflection = SCDroppedHumanHint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSKickDroppedHuman::CSKickDroppedHuman()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSKickDroppedHuman::InitAsDefaultInstance() {
}

CSKickDroppedHuman::CSKickDroppedHuman(const CSKickDroppedHuman& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSKickDroppedHuman::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSKickDroppedHuman::~CSKickDroppedHuman() {
  SharedDtor();
}

void CSKickDroppedHuman::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSKickDroppedHuman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSKickDroppedHuman::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSKickDroppedHuman_descriptor_;
}

const CSKickDroppedHuman& CSKickDroppedHuman::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSKickDroppedHuman* CSKickDroppedHuman::default_instance_ = NULL;

CSKickDroppedHuman* CSKickDroppedHuman::New() const {
  return new CSKickDroppedHuman;
}

void CSKickDroppedHuman::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSKickDroppedHuman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSKickDroppedHuman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSKickDroppedHuman::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSKickDroppedHuman::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSKickDroppedHuman::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSKickDroppedHuman* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSKickDroppedHuman*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSKickDroppedHuman::MergeFrom(const CSKickDroppedHuman& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSKickDroppedHuman::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSKickDroppedHuman::CopyFrom(const CSKickDroppedHuman& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSKickDroppedHuman::IsInitialized() const {
  
  return true;
}

void CSKickDroppedHuman::Swap(CSKickDroppedHuman* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSKickDroppedHuman::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSKickDroppedHuman_descriptor_;
  metadata.reflection = CSKickDroppedHuman_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSLoginEnded::CSLoginEnded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSLoginEnded::InitAsDefaultInstance() {
}

CSLoginEnded::CSLoginEnded(const CSLoginEnded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSLoginEnded::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSLoginEnded::~CSLoginEnded() {
  SharedDtor();
}

void CSLoginEnded::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSLoginEnded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLoginEnded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSLoginEnded_descriptor_;
}

const CSLoginEnded& CSLoginEnded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_process_5fproto_2f01000_5f01009_5flogin_2eproto();  return *default_instance_;
}

CSLoginEnded* CSLoginEnded::default_instance_ = NULL;

CSLoginEnded* CSLoginEnded::New() const {
  return new CSLoginEnded;
}

void CSLoginEnded::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSLoginEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSLoginEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSLoginEnded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSLoginEnded::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLoginEnded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSLoginEnded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSLoginEnded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSLoginEnded::MergeFrom(const CSLoginEnded& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSLoginEnded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLoginEnded::CopyFrom(const CSLoginEnded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLoginEnded::IsInitialized() const {
  
  return true;
}

void CSLoginEnded::Swap(CSLoginEnded* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSLoginEnded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSLoginEnded_descriptor_;
  metadata.reflection = CSLoginEnded_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace worldsrv
}  // namespace protocol
}  // namespace pwngs

// @@protoc_insertion_point(global_scope)
